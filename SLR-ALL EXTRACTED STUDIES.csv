Covidence #,Study ID,Title,Reviewer Name,1.Study ID,2.Title,3.Year of Publication ,4.Abstract ,5.The countries from which the authors are from?,6.Type of Publication ,7.From which Journal or Conference was the study published from? ,8.What is the methodology used in the study? ,9.Primary Objective:,10.Does the study propose/refer to classification schemes/ techniques to distinguish between FRs and NFRs  ? ,"11.If the study proposes or references any classification schemes/techniques to distinguish between ""functional requirements"" and ""nonfunctional requirements,"" please provide the following details in a tabular format:",1 Name of the Technique ,1 Description ,1 Proposed or Referenced ,1 Reference(If applicable)  ,1 Tool Name developed and oriented towards RE ,1 Functions and Features of the Tool(if applicable)   ,1 Development status of the tool,1 Tool Proposed or Referred? ,1 Reference(if application) ,1 Other associated tools ,1 Nature of this association ,2 Name of the Technique ,2 Description ,2 Proposed or Referenced ,2 Reference(If applicable)  ,2 Tool Name developed and oriented towards RE ,2 Functions and Features of the Tool(if applicable)   ,2 Development status of the tool,2 Tool Proposed or Referred? ,2 Reference(if application) ,2 Other associated tools ,2 Nature of this association ,3 Name of the Technique ,3 Description ,3 Proposed or Referenced ,3 Reference(If applicable)  ,3 Tool Name developed and oriented towards RE ,3 Functions and Features of the Tool(if applicable)   ,3 Development status of the tool,3 Tool Proposed or Referred? ,3 Reference(if application) ,3 Other associated tools ,3 Nature of this association ,4 Name of the Technique ,4 Description ,4 Proposed or Referenced ,4 Reference(If applicable)  ,4 Tool Name developed and oriented towards RE ,4 Functions and Features of the Tool(if applicable)   ,4 Development status of the tool,4 Tool Proposed or Referred? ,4 Reference(if application) ,4 Other associated tools ,4 Nature of this association ,5 Name of the Technique ,5 Description ,5 Proposed or Referenced ,5 Reference(If applicable)  ,5 Tool Name developed and oriented towards RE ,5 Functions and Features of the Tool(if applicable)   ,5 Development status of the tool,5 Tool Proposed or Referred? ,5 Reference(if application) ,5 Other associated tools ,5 Nature of this association ,6 Name of the Technique ,6 Description ,6 Proposed or Referenced ,6 Reference(If applicable)  ,6 Tool Name developed and oriented towards RE ,6 Functions and Features of the Tool(if applicable)   ,6 Development status of the tool,6 Tool Proposed or Referred? ,6 Reference(if application) ,6 Other associated tools ,6 Nature of this association ,12.Does the study use any machine learning/Artificial Intelligence techniques for the classification of functional and nonfunctional requirements? ,13.Are there any datasets that were used for the classification process between FRs and NFRs?:,1 Dataset Name ,1 Data Points Used ,1 How they were used ,2 Dataset Name ,2 Data Points Used ,2 How they were used ,3 Dataset Name ,3 Data Points Used ,3 How they were used ,4 Dataset Name ,4 Data Points Used ,4 How they were used ,5 Dataset Name ,5 Data Points Used ,5 How they were used ,6 Dataset Name ,6 Data Points Used ,6 How they were used ,"14.Does the study propose/refer to classification schemes/techniques to distinguish NFRs under ""sub-categories""? ",15.Please mention which type of “Nonfunctional Requirements” is the study specialized in classifying. ,"16.If the study proposes or references any classification schemes/techniques to distinguish ""nonfunctional requirements"" into “sub-categories”,  please provide the following details in a tabular format::",1 Name of Technique ,1 Description ,1 Proposed or Referenced ,1 Reference(if applicable) ,1 Tool Name developed and oriented towards RE ,1 Functions and Features of the Tool( if applicable) ,1 Development status of the tool ,1 Tool Proposed or Referenced ,1 Reference(if applicable),1 Other associated tools ,1 Nature of this association ,2 Name of Technique ,2 Description ,2 Proposed or Referenced ,2 Reference(if applicable) ,2 Tool Name developed and oriented towards RE ,2 Functions and Features of the Tool( if applicable) ,2 Development status of the tool ,2 Tool Proposed or Referenced ,2 Reference(if applicable),2 Other associated tools ,2 Nature of this association ,3 Name of Technique ,3 Description ,3 Proposed or Referenced ,3 Reference(if applicable) ,3 Tool Name developed and oriented towards RE ,3 Functions and Features of the Tool( if applicable) ,3 Development status of the tool ,3 Tool Proposed or Referenced ,3 Reference(if applicable),3 Other associated tools ,3 Nature of this association ,4 Name of Technique ,4 Description ,4 Proposed or Referenced ,4 Reference(if applicable) ,4 Tool Name developed and oriented towards RE ,4 Functions and Features of the Tool( if applicable) ,4 Development status of the tool ,4 Tool Proposed or Referenced ,4 Reference(if applicable),4 Other associated tools ,4 Nature of this association ,5 Name of Technique ,5 Description ,5 Proposed or Referenced ,5 Reference(if applicable) ,5 Tool Name developed and oriented towards RE ,5 Functions and Features of the Tool( if applicable) ,5 Development status of the tool ,5 Tool Proposed or Referenced ,5 Reference(if applicable),5 Other associated tools ,5 Nature of this association ,6 Name of Technique ,6 Description ,6 Proposed or Referenced ,6 Reference(if applicable) ,6 Tool Name developed and oriented towards RE ,6 Functions and Features of the Tool( if applicable) ,6 Development status of the tool ,6 Tool Proposed or Referenced ,6 Reference(if applicable),6 Other associated tools ,6 Nature of this association ,17. Does the study mention any challenges faced with the classification of requirements? (whether it concerns those between FRs and NFRs or NFRs under subcategories) ,18.Does the study include any case studies for NFRs classification?,"19.Are there any datasets that were used for the classification process of NFRs into ""sub-categories""?:",1 Dataset Name ,1 Data Points Used ,1 How they were used ,2 Dataset Name ,2 Data Points Used ,2 How they were used ,3 Dataset Name ,3 Data Points Used ,3 How they were used ,4 Dataset Name ,4 Data Points Used ,4 How they were used ,5 Dataset Name ,5 Data Points Used ,5 How they were used ,6 Dataset Name ,6 Data Points Used ,6 How they were used ,7 Dataset Name ,7 Data Points Used ,7 How they were used ,20.Does the study ever mention the presentation/documentation of NFRs?,21.Future Research Directions:
352,Eckhardt 2016,Are non-functional requirements really non-functional? an investigation of non-functional requirements in practice,Consensus,352,Are 'Non-functional' Requirements really Non-functional? An Investigation of Non-functional Requirements in Practice.,2016,"Non-functional requirements (NFRs) are commonly distinguished from functional requirements by differentiating how the system shall do something in contrast to what the system shall do. This distinction is not only prevalent in research, but also influences how requirements are handled in practice. NFRs are usually documented separately from functional requirements, without quantitative measures, and with relatively vague descriptions. As a result, they remain difficult to analyze and test. Several authors argue, however, that many so-called NFRs actually describe behavioral properties and may be treated the same way as functional requirements. In this paper, we empirically investigate this point of view and aim to increase our understanding on the nature of NFRs addressing system properties. We report on the classification of 530 NFRs extracted from 11 industrial requirements specifications and analyze to which extent these NFRs describe system behavior. Our results suggest that most “non-functional” requirements are not non-functional as they describe behavior of a system. Consequently, we argue that many so-called NFRs can be handled similarly to functional requirements.",Germany,Conference ," IEEE/ACM 38th IEEE International Conference on Software Engineering
",Empirical Study ,"To empirically investigate the nature of non-functional requirements (NFRs) and analyze to what extent these NFRs describe system behavior, suggesting that many so-called NFRs are actually functional and can be handled similarly to functional requirements.",NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Usability
Security
Reliability
Efficiency
Maintainability
Portability",,"Broy’s Structured Views	","Assigns a system view to each NFR, categorizing them into behavioral and representational NFRs.	",Referenced,"Broy, M. Rethinking nonfunctional software requirements: A novel approach categorizing system and software requirements. IEEE Computer, 2015.	",NO,NO,NO,NO,NO,NO,NO,"ISO/IEC 9126 Quality Characteristics	","Uses quality model for external and internal quality to assign a quality characteristic to each NFR.	",Referenced,"ISO/IEC. Software engineering – Product quality. ISO/IEC 9126, International Organization for Standardization, 2001.	",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenge: Low inter-rater agreement in initial classification rounds.
Solution: Refined classification dimensions and created a decision tree and pattern catalog to support the classification process.",NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,"Context: NFRs are often documented separately from functional requirements without quantitative measures and with vague descriptions.
Proposed Solution: Integration of NFRs into a holistic software development process.
","Include remaining 1495 functional requirements in the study.
Provide specification blueprints for practitioners.
Investigate the consequences of labeling a requirement as ""NFR"" for the development process."
350,Afreen 2016,A taxonomy of software’s non-functional requirements,Consensus,350,A Taxonomy of Software’s Non-functional Requirements.,2016,"The study divides software requirements into functional (FRs) and non-functional requirements (NFRs). While FRs determine the functionality, NFRs specify how a system should be. The paper aims to present a taxonomy for NFRs to help requirements analysts easily identify different types of NFRs during the early phases of requirements engineering.",India,Conference ,Proceedings of the Second International Conference on Computer and Communication Technologies.,Theoretical Study  ,"To present a taxonomy of non-functional requirements that enables the requirements analyst to identify different types of NFRs during the requirements elicitation process.
",NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Usability
Security
Maintainability
Performance
Reliability
",,NFRs Classification based on Definition and Attributes,"Classifies NFRs as (i) with meaning and attributes, (ii) with meaning, (iii) without meaning and attributes.	",Proposed,"Boehm, B. W., Brown, J. R., Kaspar, H., Lipow, M., MacLeod, G., & Merritt, M. (1978). Characteristics of Software Quality. North-Holland Publishing Company, New York, USA.

Grady, R. B. (1987). Practical Software Metrics for Project Management and Process Improvement. Prentice-Hall, Englewood Cliffs, NJ, USA.

Glinz, M. (2007). On Non-Functional Requirements. In 15th IEEE International Requirements Engineering Conference (RE'07) (pp. 21-26). IEEE. DOI: 10.1109/RE.2007.45.


International Organization for Standardization. (2001). ISO/IEC 9126-1:2001 Software Engineering - Product Quality - Part 1: Quality Model. ISO/IEC, Geneva, Switzerland.
",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenges: Lack of standard definitions and attributes for many types of NFRs, conflicts between different NFRs (e.g., ""performance"" conflicting with ""security"").
","Type of Nonfunctional Requirement: Security, Usability
Details of Case Study: Institute Automation System (IAS) case study demonstrates the application of the proposed classification scheme to identify and prioritize NFRs.
Type of Case Study: Applied Case Study",,NO,NO,NO,,,,,,,,,,,,,,,,,,,"Context: The study discusses how the classification of NFRs can help in their documentation during the requirements elicitation phase.
","Applying the proposed classification scheme to different domains.
Studying the use of the Softgoal Interdependency Graph (SIG) tool for analyzing NFRs."
348,Rashwan 2013,Ontology-based classification of non-functional requirements in software specifications: A new corpus and SVM-based classifier,Consensus,348,Ontology-Based Classification of Non-functional Requirements in Software Specifications: A New Corpus and SVM-Based Classifier,2013,"A software requirements specification (SRS) contains all the requirements for a system-to-be. These are typically separated into functional requirements (FR), which describe the features of the system under development, and the non-functional requirements (NFR), which include quality attributes, design constraints, among others. It is well known that NFRs have a large impact on the overall cost and time of the system development process, as they frequently describe cross-cutting concerns. In order to improve software development support, an automated analysis of SRS documents for different NFR types is required. Our work contains two significant contributions towards this goal: (1) A new gold standard corpus containing annotations for different NFR types, based on a requirements ontology; and (2) a Support Vector Machine (SVM) classifier to automatically categorize requirements sentences into different ontology classes. Results obtained from two different SRS corpora demonstrate the effectiveness of our approach",Canada,Conference , 2013 IEEE 37th Annual Computer Software and Applications Conference,Experimental Research; Empirical Study ,"To develop an ontology-based classification scheme for non-functional requirements in software specifications, and to create a Support Vector Machine (SVM) classifier to automatically categorize requirement sentences into different ontology classes​",NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Security
Usability/Utility
Efficiency
Functionality
Reliability
Constraints",,"Ontology-Based Classification	","Uses a requirements ontology modeled using the Web Ontology Language (OWL) to classify non-functional requirements under sub-categories	",Proposed,"NO	","NO	","NO	","NO	","NO	","NO	","NO	","NO	","Support Vector Machine (SVM)-Based Classifier	","Uses SVM to classify requirement sentences into ontology classes.	","Proposed	","NO	","NO	","NO	","NO	","NO	","NO	","NO	","NO	",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,NO,,"Concordia RE Corpus	","3064 sentences	",Used to train and evaluate the SVM-based classifier for categorizing requirement sentences into ontology classes​.,"PROMISE Corpus	","15 SRS documents	",Used to validate the SVM classifier and evaluate its improvement over previously published results​.,,,,,,,,,,,,,,,,NO,"Yes, the study mentions that future work will focus on addressing existing mis-classifications by developing additional syntactic and semantic features for the classifiers, and applying SRS quality assurance methods through reasoning on the populated ontology"
346,Hasan 2014,Classification and qualitative analysis of non-functional requirements approaches,Consensus,346,Classification and Qualitative Analysis of Non-Functional Requirements Approaches.,2014,"The paper provides a systematic literature review of approaches to classifying and analyzing non-functional requirements (NFRs) in software engineering. It identifies various classification techniques and tools, their methodologies, and their applications, and offers a qualitative analysis of their effectiveness in different contexts. The review also highlights challenges and future research directions in the field of NFRs.",NO,Conference ,"15th International Conference, BPMDS 2014, 19th International Conference, EMMSAD 2014, held at CAiSE 2014, Thessaloniki, Greece.

",Systematic Review; Literature Review,,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Security Requirements
Performance Requirements
Usability Requirements",,"Ontology-Based Classification	","Uses ontologies to categorize NFRs by understanding their properties and interrelations.	",Referenced,"Rashwan, A., Ormandjieva, O., Witte, R. (2013). ""Ontology-Based Classification of Non-functional Requirements in Software Specifications: A New Corpus and SVM-Based Classifier"". In: 37th Annual Computer Software and Applications Conference, pp. 381–386.	","ElicitO	","Quality Ontology-Guided NFR Elicitation	",Developed,Referenced,"Al Balushi, T.H., Sampaio, P.R.F., Dabhi, D., Loucopoulos, P. (2007). ""ElicitO A Quality Ontology-Guided NFR Elicitation"". 13th Int. Conf. on Requirements Engineering Foundations for Software, Trondheim, Norway.	",NO,NO,"Goal-Oriented Approaches	","Uses goals to extract and prioritize NFRs, often employing goal-based questionnaires.	","Referenced	","Herrmann, A., Peach, B. (2008). ""MOQARE: Misuse-oriented quality requirements engineering"". Requirements Engineering 13(1), 73–86.	",NO,NO,NO,NO,NO,NO,NO,"Pattern-Based Approaches	","Focus on separating concerns to manage NFRs efficiently, using text mining and automated extraction methods.	","Referenced	",NO,NO,NO,NO,NO,NO,NO,NO,"Aspect-Oriented Approaches	","Focus on separating concerns to manage NFRs efficiently, using text mining and automated extraction methods.	","Referenced	","Casamayor, A., Godoy, D., Campo, M. (2010). ""Identification of non-functional requirements in textual specifications: A semi-supervised learning approach"". Information and Software Technology 52(4), 436–445.	","Semi-supervised text analysis tools	","Automated extraction of NFRs	",Developed,Referenced,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,NO,NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,"Context: Discusses the use of ontologies and goal-oriented techniques for better presentation of NFRs.
Proposal: Suggests ontology-based tools to help visualize and manage NFRs effectively.
","Investigate more robust AI-based classification techniques for NFRs.
Explore integration of aspect-oriented and goal-oriented approaches for enhanced NFR management."
344,Hakim 2018,Oversampling Imbalance Data: Case Study on Functional and Non Functional Requirement,Consensus,344,Oversampling Imbalance Data: Case Study on Functional and Non Functional Requirement,2018,"Non-functional requirements are one of the important factors that have a role to determine the success of software development. This factor is usually often ignored by developers because it is difficult to identify. Difficulties in identifying non-functional requirements carry a negative impact affecting software quality. A new framework is needed to identify non-functional requirements. The existing approach has not been able to properly identify non-functional requirements in case studies of data imbalance. Data imbalance may affect the performance of classification methods. Therefore, this study proposes a comparison of three methods namely RF, KNN and SVM using SMOTE. In this research, The total dataset used is 1366 requirements. The dataset includes unbalanced data, which consists of 1141 functional requirements and 225 non-functional requirements. The result of this research prove that data imbalance cause decreases the accuracy. This is evidenced by testing using three methods namely SVM, KNN, and RF. All three methods have the highest accuracy value in minority class 100%. While the best method with the highest accuracy value obtained by SVM because it proved to have better performance than KNN, and RF in terms of data imbalance with 100% minority class.
",Indonesia,Conference , IEEE International Conference on Frontiers of Information Technology.,Empirical Study ; Case Study ,"To propose a comparison of three methods (RF, KNN, and SVM) using SMOTE for the classification of non-functional and functional requirements, focusing on improving classification accuracy in cases of data imbalance.
",YES,,"Support Vector Machine (SVM)	","A binary classification strategy to overcome data imbalance and improve precision. Proven effective for text classification.	",Referenced,"Rashwan, A., Ormandjieva, O., & Witte, R. (2013). Ontology-based classification of non-functional requirements in software specifications: A new corpus and SVM-based classifier. Proceedings of the International Computer Software and Applications Conference, (pp. 381–386). IEEE. DOI: 10.1109/COMPSAC.2013.63
Chau, M., & Chen, H. (2008). A machine learning approach to web page filtering using content and structure analysis. Decision Support Systems, 44(2), 482-494. DOI: 10.1016/j.dss.2007.05.008
Zhang, Y., Dang, Y., Chen, H., Thurmond, M., & Larson, C. (2009). Automatic online news monitoring and classification for syndromic surveillance. Decision Support Systems, 47(4), 508-517. DOI: 10.1016/j.dss.2009.04.007",NO,NO,NO,NO,NO,NO,NO,KNN,"KNN is a simple non-parametric classification method based on the similarity measure. It stores all cases and classifies new cases based on their similarities to stored cases.	",Referenced,"Jabbar, M. A., Deekshatulu, B. L., & Chandra, P. (2013). Classification of heart disease using K-Nearest Neighbor and genetic algorithm. Procedia Technology, 10, 85–94. DOI: 10.1016/j.protcy.2013.12.328",NO,NO,NO,NO,NO,NO,NO,"Random Forest (RF)	","RF is a classification method that constructs a multitude of decision trees during the training phase and outputs the class that is the mode of the classes. It works well with complex datasets and provides robust results.	",Referenced,"Hanif, A., & Azhar, N. (2017). Resolving class imbalance and feature selection in customer churn dataset. 2017 International Conference on Frontiers of Information Technology (FIT), 82-86. DOI: 10.1109/FIT.2017.00022",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"AI Techniques Used: Support Vector Machine (SVM), K-Nearest Neighbor (KNN), Random Forest (RF)

How AI is Used: AI is used for the classification of requirements to distinguish between functional and non-functional requirements using different methods like SVM, KNN, and RF, and comparing their effectiveness with SMOTE to address data imbalance issues.

AI Tools Used: NO",,NO,Dataset consists of 1366 requirements: 1141 functional requirements and 225 non-functional requirements.,"Used to evaluate the accuracy of different classification methods (SVM, KNN, RF) for distinguishing between functional and non-functional requirements under imbalanced and balanced conditions using SMOTE.",,,,,,,,,,,,,,,,YES,"Time Behaviour
Resource Utilization
Capacity
User Error Protection
User Interface Aesthetic
Availability
Operability
Fault Tolerance
Recoverability
Integrity
Reusability
Adaptability",,"Synthetic Minority Oversampling Technique (SMOTE)	","SMOTE is an oversampling technique used to balance the minority class by creating synthetic examples rather than replicating them.	",Proposed,"Castellanos, F. J., Valero-Mas, J. J., Calvo-Zaragoza, J., & Rico-Juan, J. R. (2018). Oversampling imbalanced data in the string space. Pattern Recognition Letters, 103, 32–38. DOI: 10.1016/j.patrec.2017.10.024	","NO	","NO	","NO	","NO	","NO	","NO	",NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,NO,"The study suggests using 31 sub-attributes of ISO/IEC 25010, expanding hypernyms, and considering semantic relationships between each non-functional requirement category and relevant terms, as well as exploring different classification methods."
343,Cleland-Huang 2007,Automated classification of non-functional requirements,Consensus,343,Automated Classification of Non-Functional Requirements,2007,"This paper describes a technique for automating the detection and classification of non-functional requirements related to properties such as security, performance, and usability. Early detection of non-functional requirements enables them to be incorporated into the initial architectural design instead of being refactored at a later date. The approach is used to detect and classify stakeholders' quality concerns across requirements specifications containing scattered and non-categorized requirements, and also across freeform documents such as meeting minutes, interview notes, and memos. The paper first describes the classification algorithm and then evaluates its effectiveness through a series of experiments based on 30 requirements specifications developed as term projects by MS students at DePaul University. A new iterative approach is introduced for training or retraining a classifier to detect and classify non-functional requirements (NFR) in datasets dissimilar to the initial training sets. This approach is evaluated against a large free-form requirements document obtained from Siemens Logistics and Automotive Organization. Although the NFR classifier is unable to detect all NFRs, it is useful for supporting an analyst in the error-prone task of manually discovering NFRs and can quickly analyze large and complex documents to search for NFRs",USA,Journal,Requirements Engineering (Springer),Experimental Research; Case Study ,To develop and evaluate a method for the automated classification of non-functional requirements (NFRs) using a classifier trained to detect various types of NFRs across both structured and unstructured documents.,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Security
Performance
Usability
Look-and-Feel
Maintainability
Scalability
Legal
",,"Keyword-based classification	","Utilizes a predefined set of keywords associated with different NFR types to classify NFRs into sub-categories	",Proposed,"Cleland-Huang J, Settimi R, Zou X, Solc P (2007). ""Automated Classification of Non-Functional Requirements."" Requirements Engineering, 12(2), 103-120. DOI: 10.1007/s00766-007-0045-1.
",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"The classifier showed limitations in detecting some NFR types, like ""look-and-feel,"" due to overlap in terms across multiple requirements. Future work will investigate using categories of indicator terms or extended training to improve retrieval results.","Type of Case Study: Industrial Case Study
Details: A large free-form requirements document obtained from Siemens Logistics and Automotive Organization was used to evaluate the classifier.
Type of ""Nonfunctional Requirements"" in Case Study: All identified NFR sub-categories",,"Requirements specifications developed by DePaul MS students, a large free-form requirements document from Siemens Logistics and Automotive Organization.
",NO,Training and evaluating the NFR-classifier,,,,,,,,,,,,,,,,,,,Context: The classifier can support the process of gathering non-functional concerns by ensuring stakeholders' comments are not missed during elicitation.,"Improving the recall and precision for certain NFR types.
Exploring additional applications of the classifier in different domains."
341,Kassab 2009,An ontology based approach to non-functional requirements conceptualization,Consensus,341,An Ontology-Based Approach to Non-functional Requirements Conceptualization,2009,"The growing awareness of the importance of Non-Functional Requirements (NFRs) among the requirements engineering (RE) community in recent years has led to a heightened interest in NFRs description and modeling. This has led to the emergence of several models intended to capture and structure relevant concepts defining NFRs and their relations. However, many of these models are not commonly accepted due to loose definitions and a lack of taxonomy. This paper proposes an ontology-based approach that provides a Common Foundation necessary for projects considering NFRs and their relations early in the software development lifecycle. This approach aims to facilitate effective communication and integration of NFRs-related activities within the RE community.
","Canada, Netherlands",Conference ,"2009 Fourth International Conference on Software Engineering Advances
",Theoretical Study  ; Case Study ; Other: Ontology Development ,Systematically develop an ontology-based approach that is adequate for projects considering NFRs and their relations early in the software development lifecycle and throughout.,YES,,"Ontology-Based Conceptualization	","An ontology-based approach to describe, model, and structure NFRs, linking them explicitly to concepts and relations, facilitating their early consideration and throughout the software lifecycle.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Quality Requirements
Design Implementation
Economic Constraint
Operating Constraint
Political Cultural Constraint",,"Ontology-Based Conceptualization for NFR Subcategories	","An ontology-based approach to decompose NFRs into specific subcategories, such as quality requirements, operating constraints, and political-cultural constraints, to provide clarity and structure in requirements engineering.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"The study discusses challenges related to the lack of a common foundation and taxonomy for NFRs, leading to inconsistencies in their description, modeling, and integration across projects","The study includes a case study that applies the proposed ontology-based approach to a real-world project, demonstrating its effectiveness in structuring NFRs and their relationships.",,NO,NO,NO,,,,,,,,,,,,,,,,,,,"The study emphasizes the importance of presenting and documenting NFRs through the proposed ontology-based model, which aims to improve communication and integration of NFRs-related activities within the RE community.","The study suggests future research to validate and refine the proposed ontology-based approach by applying it to a wider range of projects and domains, as well as integrating it with other RE tools and methods."
334,Domah 2015,The NERV methodology: A lightweight process for addressing non-functional requirements in agile software development,Consensus,334,The NERV Methodology: A Lightweight Process for Addressing Non-functional Requirements in Agile Software Development,2015,"Agile software development has become very popular around the world in recent years, with methods such as Scrum and Extreme Programming (XP). Literature suggests that functionality is the primary focus in Agile processes while non-functional requirements (NFRs) are either ignored or ill-defined. However, for software to be of good quality, both functional requirements (FRs) and NFRs need to be taken into consideration; lack of attention to NFRs has been documented to be the cause of failure for many software projects. This study proposes the ""NERV Methodology: Non-functional Requirements Elicitation, Reasoning, and Validation in Agile Processes."" Current results show that the artifacts developed in this research can potentially help software development organizations address NFRs in early Agile processes.
",USA,Conference ,IEEE SoutheastCon 2015,Empirical Study ; Case Study ,"Develop and validate a lightweight methodology to effectively elicit, reason, and validate NFRs in Agile software development processes",YES,,"NERV Methodology	","A lightweight methodology designed to elicit, reason, and validate NFRs in Agile processes, focusing on addressing NFRs early in the development cycle.	",Proposed,NO,YES,"Provides artifacts such as NFRusCOM, NFR Trigger Card, and various taxonomies for handling NFRs in Agile.	",Developed,Proposed,NO,"NORMAP Methodology	","Used for baseline comparison in case studies.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,"PROMISE Dataset	","Various requirements from different projects	","Used to evaluate the effectiveness of the NERV Methodology in classifying NFRs compared to the NORMAP baseline.
",,,,,,,,,,,,,,,,YES,"Confidentiality
Security
Scalability
Usability",,"NFR Elicitation Taxonomy (Confidentiality)	","A taxonomy developed within the NERV Methodology for eliciting NFRs related to confidentiality in Agile processes.	",Proposed,NO,YES,"Provides criteria for eliciting confidentiality-related NFRs in Agile.	",Developed,Proposed ,NO,"NORMAP Methodology	","Used for baseline comparison in case studies.	","NFR Reasoning Taxonomy (Security)	","A taxonomy developed within the NERV Methodology for reasoning about NFRs related to security in Agile processes.	",Proposed,NO,YES,"Provides operationalization solutions for security-related NFRs in Agile.	",Developed,Proposed ,NO,"NORMAP Methodology	","Used for baseline comparison in case studies.	","NFR Quantification Taxonomy (Scalability)	","A taxonomy developed within the NERV Methodology for quantifying NFRs related to scalability in Agile processes.	",Proposed ,NO,YES,"Provides quantification boundaries for scalability-related NFRs in Agile.	",Developed,Proposed ,NO,"NORMAP Methodology	","Used for baseline comparison in case studies.	",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,," The study discusses challenges related to the lack of focus on NFRs in Agile processes, making it difficult to elicit, reason, and validate NFRs effectively",The study includes two case studies: one with the EU eProcurement system and another using the PROMISE dataset to validate the effectiveness of the NERV Methodology in identifying and handling NFRs​,,"PROMISE Dataset	","Various requirements from different projects	","Used to validate the classification of NFRs into sub-categories using the NERV Methodology.
",,,,,,,,,,,,,,,,,,,"The study mentions the use of the NFRusCOM Card as a tool for documenting and presenting NFRs in Agile processes, linking them to corresponding functional requirements","The study suggests further research to extend the NERV taxonomies and validate the methodology in real-life Agile projects, particularly focusing on cross-cutting concerns represented by some NFRs"
333,Galster 2008,A taxonomy for identifying and specifying non-functional requirements in service-oriented development,Consensus,333,A Taxonomy for Identifying and Specifying Non-Functional Requirements in Service-Oriented Development,2008,"
As in traditional software development, non-functional 
requirements play also a crucial role in service-oriented 
development. Non-functional requirements are spread
across the entire service-oriented system or within
individual services and cannot be allocated to one 
specific system / service artefact (such as a package, 
component). This makes them often more difficult to
handle than functional requirements. The specifics of 
service-oriented architectures (in particular highly 
distributed services) bring up additional difficulties. In 
this paper, we present a taxonomy for non-functional 
requirements in a service-oriented context. The taxonomy 
implements three main categories of non-functional 
requirements: process requirements, non-functional 
external requirements, and non-functional service 
requirements. The taxonomy can be applied with 
individual services as well as with a service-based system 
as a whole. This taxonomy is considered as a starting 
point and check list when handling non-functional issues 
in service-oriented and particularly highly distributed 
","Canada
Switzerland",Conference ,IEEE Congress on Services 2008 - Part I,Theoretical Study  ; Literature Review,"to identify, categorize, and specify non-functional requirements (NFRs) for service-based systems in a service-oriented development context. The study presents a taxonomy for non-functional requirements, which can be integrated into a service-oriented Requirements Engineering process",NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Process requirements
Non-functional external requirements
Non-functional service requirements​",,"Taxonomy for NFR in Service-Oriented Development	","Categorizes NFR into process requirements, non-functional external requirements, and non-functional service requirements	",Proposed,"Chung, L., Nixon, B. A., Yu, E., & Mylopoulos, J. (2000). Non-functional Requirements in Software Engineering. Norwell, MA: Kluwer Academic Publishers.
Dobson, G., Lock, R., & Sommerville, I. (2005). Quality of Service Requirements Specification Using an Ontology. Proc. 1st International Workshop on Service-oriented Computing: Consequences for Engineering Requirements (Soccer'05), Paris.
Sawyer, P., Hutchinson, J., Walkerdine, J., & Sommerville, I. (2005). Faceted Service Specification. Proc. 1st International Workshop on Service-oriented Computing: Consequences for Engineering Requirements (Soccer'05), Paris",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Difficulty in determining when a non-functional requirement has been met due to the subjective nature of many NFRs.
Conflicts between different non-functional requirements, which can be difficult to resolve and may impact functional requirements.
Non-functional requirements relating to unknown entities at the requirements stage, such as response time to failure for reliability​",NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,"Context: The presentation of non-functional requirements is discussed as a challenge due to the difficulty in defining when a non-functional requirement has been met, as they are often subjective and difficult to quantify. This is further complicated in service-oriented environments where requirements can change dynamically due to external factors and stakeholder variability.
Proposal: The study suggests using scenarios for the documentation of non-functional requirements to make them assessable, especially in cases where direct measurement is difficult","The study suggests future work should focus on amplifying the taxonomy by adding additional levels of detail and applying non-functional computing models to leverage the quantifiability of non-functional requirements (NFR). It also mentions the need for developing more metrics based on existing software measurement frameworks and suggests applying new standards from the Software Engineering domain, such as ISO/IEC 25030 and ISO/IEC 25020, to service-oriented development​"
332,Casamayor 2009,Semi-supervised classification of non-functional requirements: An empirical analysis,Consensus,332, Semi-Supervised Classification of Non-Functional Requirements: An Empirical Analysis,2009,"The early detection and classification of non-functional requirements (NFRs) is not only a hard and time-consuming process, but also crucial in the evaluation of architectural alternatives starting from initial design decisions. In this paper, we propose a recommender system based on a semi-supervised learning approach for assisting analysts in the detection and classification of NFRs from textual requirements descriptions. Classification relies on a reduced number of categorized requirements and takes advantage of the knowledge provided by uncategorized ones as well as certain properties of text. Experimental results show that the proposed recommendation approach based on semi-supervised learning outperforms previous proposals for classifying different types of requirements.",Argentina,Journal,"nteligencia Artificial. Revista Iberoamericana de Inteligencia Artificial (Volume 13, Number 44)

",Empirical Study ,"to propose a recommender system based on a semi-supervised learning approach for assisting analysts in the detection and classification of non-functional requirements (NFRs) from textual requirements descriptions.
",YES,,"Semi-Supervised Learning	","Uses both labeled and unlabeled data to train classifiers.	",Proposed,"Nigam, K., McCallum, A. K., Thrun, S., & Mitchell, T. (2000). ""Text classification from labeled and unlabeled documents using EM."" Machine Learning, 39, 103-134.	",NO,NO,NO,NO,NO,"Implemented in Java with Classifier4J library	",NO,"Naive Bayes Classifier	","A probabilistic classifier based on applying Bayes' theorem with strong independence assumptions between the features.	",Referenced,"Nigam, K., McCallum, A. K., Thrun, S., & Mitchell, T. (2000). ""Text classification from labeled and unlabeled documents using EM."" Machine Learning, 39, 103-134. doi: 10.1023/A:1009982220290.

",NO,NO,NO,NO,NO,"Implemented in Java with Classifier4J library	",NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"AI Technique: Semi-Supervised Learning using Expectation-Maximization (EM) Strategy.
How AI is Used: The technique involves both labeled and unlabeled documents for text categorization. The EM strategy iteratively estimates missing class labels and re-estimates parameters to converge to a local minimum.
AI Tools Used: Naive Bayesian classification implemented using Java (Classifier4J library) .",,PROMISE Software Engineering Repository,collection of 370 NFRs and 255 functional requirements .,Used to train and test classifiers ,,,,,,,,,,,,,,,,YES,"Availability
Look-and-Feel
Legal
Maintainability
Operational
Performance
Scalability
Security
Usability
Features .",,"Expectation Maximization (EM) Strategy	","A semi-supervised learning algorithm that iteratively classifies documents based on their properties.	",Proposed,"Nigam, K., McCallum, A. K., Thrun, S., & Mitchell, T. (2000). ""Text classification from labeled and unlabeled documents using EM."" Machine Learning, 39, 103-134.	",NO,NO,NO,NO,NO,"Implemented in Java with Classifier4J library	",NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"The need for a significant number of labeled examples for accurate classification, which is time-consuming and costly to obtain.
Variability in vocabulary, domain terminology, and writing styles across projects and requirement elicitation teams .","Type of Nonfunctional Requirement: Various categories as listed in point 15.
Details of Case Study: Conducted using a dataset from PROMISE repository containing NFRs from different software development projects.
Type of Case Study: Empirical evaluation using experimental research .
",,PROMISE Software Engineering Repository,collection of 370 NFRs and 255 functional requirements .,"To classify NFRs into different sub-categories using semi-supervised learning .

",,,,,,,,,,,,,,,,,,,NO,"Introducing active learning strategies to reduce the labeling effort while maintaining classification accuracy by selecting informative examples for labeling .
"
329,SouzaNeto 2016,Designing service-based applications in the presence of non-functional properties: A mapping study,Consensus,329,Designing service-based applications in the presence of non-functional properties:A mapping study,2016,"Context: The development of distributed software systems has become an important problem for the software
engineering community. Service-based applications are a common solution for this kind of systems. Services
provide a uniform mechanism for discovering, integrating and using these resources. In the development of
service based applications not only the functionality of services and compositions should be considered, but
also conditions in which the system operates. These conditions are called non-functional requirements (NFR).
The conformance of applications to NFR is crucial to deliver software that meets the expectations of its users.
Objective: This paper presents the results of a systematic mapping carried out to analyze how NFR have been
addressed in the development of service-based applications in the last years, according to different points of
view.
Method: Our analysis applies the systematic mapping approach. It focuses on the analysis of publications
organized by categories called facets, which are combined to answer specific research questions. The facets
compose a classification schema which is part of the contribution and results.
Results: This paper presents our findings on how NFR have been supported in the development of service-
based applications by proposing a classification scheme consisting in five facets: (i) programming paradigm
(object/service oriented); (ii) contribution (methodology, system, middleware); (iii) software process phase;
(iv) technique or mathematical model used for expressing NFR; and (v) the types of NFR addressed by the
papers, based on the classification proposed by the ISO/IEC 9126 specification. The results of our system-
atic mapping are presented as bubble charts that provide a quantitative analysis to show the frequencies of
publications for each facet. The paper also proposes a qualitative analysis based on these plots. This analysis
discusses how NFR (quality properties) have been addressed in the design and development of service-based
applications, including methodologies, languages and tools devised to support different phases of the soft-
ware process.
Conclusion: This systematic mapping showed that NFR are not fully considered in all software engineering
phases for building service based applications. The study also let us conclude that work has been done for
providing models and languages for expressing NFR and associated middleware for enforcing them at run
time. An important finding is that NFR are not fully considered along all software engineering phases and this
opens room for proposing methodologies that fully model NFR. The data collected by our work and used
for this systematic mapping are available in https://github.com/placidoneto/systematic-mapping_service-
based-app_nfr.","Brazil, France",Journal,Information and Software Technology,Systematic Review; Literature Review,"To analyze how non-functional requirements (NFR) have been addressed in the development of service-based applications over the years through a systematic mapping study.
",YES,,"ISO/IEC 9126	","A standard classification for software quality including functionality, reliability, usability, efficiency, maintainability, and portability.	",Referenced,"ISO/IEC 9126	",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Functionality
Reliability
Usability
Efficiency
Maintainability
Portability
Local/global QoS",,"ISO/IEC 9126	","Classification for quality attributes	","Referenced	","ISO/IEC 9126	",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"NFR are not fully considered in all phases of software engineering for service-based applications.
Proposing methodologies that fully model NFR remains an open area.",NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,"Context: The study discusses how NFRs have been addressed in the design and development of service-based applications, including the methodologies and tools devised to support different phases of the software process.","The study suggests that there is room for proposing methodologies that fully model non-functional requirements (NFR) across all software engineering phases.
"
326,Loucopoulos 2013,A systematic classification and analysis of NFRs,Consensus,326,A Systematic Classification and Analysis of NFRs,2013,"The main agenda of Requirements Engineering (RE) is the development of tools, techniques, and languages for the elicitation, specification, negotiation, and validation of software requirements. However, this development has traditionally been focused on functional requirements (FRs), rather than non-functional requirements (NFRs). Consequently, NFR approaches developed over the years have been fragmental, and there is a lack of clear understanding of the positions of these approaches in the RE process. This paper provides a systematic classification and analysis of 89 NFR approaches","Greece, China, UK, Netherlands",Conference ,"Proceedings of the Nineteenth Americas Conference on Information Systems, Chicago, Illinois",Systematic Review,To systematically classify and analyze various non-functional requirements (NFR) approaches within the field of Requirements Engineering (RE) to provide a clearer understanding of their positions and contributions in the RE process.,NO,,NO,NO,NO,"NO
",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Security
Usability
Performance
Reliability
Maintainability",,"NFR Framework	","A soft-goal interdependency graph is used to systematically classify NFRs into sub-categories like security, usability, etc.	",Referenced,"	Chung, L., Nixon, B.A., Yu, E., & Mylopoulos, J. (2000). Non-functional requirements in software engineering. Springer. ISBN 978-1-4757-6726-3",NO,NO,NO,NO,NO,NO,NO,"Goal-Oriented Approach	","Uses goal models to represent and analyze NFRs, integrating them into the overall requirements model	",Referenced,"Yu, E.S.K. (1997). Towards modelling and reasoning support for early-phase requirements engineering. Proceedings of the 3rd IEEE International Symposium on Requirements Engineering, 226-235. DOI: 10.1109/ISRE.1997.566873; Lamsweerde, A. (2001). Goal-oriented requirements engineering: A guided tour. RE01 Proceedings of the 5th IEEE International Symposium on Requirements Engineering, 249-262. DOI: 10.1109/ISRE.2001.948567",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenges: The study highlights the lack of domain-specific NFR approaches and the challenge of applying generic approaches to different application domains.
Addressing the challenge: The study suggests future research should focus on the ontology of different applications to determine whether generic approaches are adequate or specific approaches are needed.",NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,"Context: The study discusses the presentation of NFRs within the RE process, particularly in the specification and validation phases, using approaches like UML models, goal models, and use cases.
Proposal: The study does not propose new methods for presenting NFRs but reviews existing approaches like the NFR Framework and i* framework.","The study suggests exploring text analysis and natural language processing approaches for handling early NFRs, which are often expressed in informal language.
It also recommends investigating the ontology of different application domains to determine whether generic approaches to NFRs are sufficient or if domain-specific approaches are needed."
324,Abad 2017,What Works Better? A Study of Classifying Requirements,Consensus,324,What Works Better? A Study of Classifying Requirements.,2017,"Classifying requirements into functional requirements (FR) and non-functional ones (NFR) is an important task in requirements engineering. However, automated classification of requirements written in natural language is not straightforward, due to the variability of natural language and the absence of a controlled vocabulary. This paper investigates how automated classification of requirements into FR and NFR can be improved and how well several machine learning approaches work in this context. We contribute an approach for preprocessing requirements that standardizes and normalizes requirements before applying classification algorithms. Further, we report on how well several existing machine learning methods perform for automated classification of NFRs into sub-categories such as usability, availability, or performance. Our study is performed on 625 requirements provided by the OpenScience tera-PROMISE repository. We found that our preprocessing improved the performance of an existing classification method. We further found significant differences in the performance of approaches such as Latent Dirichlet Allocation, Biterm Topic Modeling, or Naïve Bayes for the sub-classification of NFRs.","Canada
Germany
Switzerland",Conference ,2017 IEEE 25th International Requirements Engineering Conference (RE’17),Experimental Research; Empirical Study ; Case Study ,"to investigate how automated classification of requirements into functional requirements (FR) and non-functional requirements (NFR) can be improved, and to evaluate the performance of several machine learning methods for classifying NFRs into sub-categories.",YES,,"Decision Tree Learning Algorithm	","Algorithm applied to classify requirements into FRs and NFRs, using preprocessing of requirements to standardize and normalize data.	",Proposed,"Hussain, I., Kosseim, L., & Ormandjieva, O. (2008). Using linguistic knowledge to classify non-functional requirements in SRS documents. International Conference on Application of Natural Language to Information Systems, Springer, pp. 287–298.","Stanford Parser	","Assigns parts of speech to words, extracts features for classification.	",Developed,Referenced,"Hussain, I., Kosseim, L., & Ormandjieva, O. (2008). Using linguistic knowledge to classify non-functional requirements in SRS documents. International Conference on Application of Natural Language to Information Systems, Springer, pp. 287–298.","LingPipe NLP Toolkit	","Provides initial preprocessing input for classifier.
","Latent Dirichlet Allocation (LDA)	","Topic modeling technique used to classify NFRs into sub-categories based on word frequency.	",Referenced,"Wallach, H. M. (2006). Topic Modeling: Beyond Bag-of-words. Proceedings of the 23rd International Conference on Machine Learning, ACM, pp. 977–984.	",NO,NO,NO,NO,NO,NO,NO,"Biterm Topic Modeling (BTM)	","Models topics based on word co-occurrence patterns, used for classifying short text documents.	",Referenced,NO,NO,NO,NO,NO,NO,NO,NO,"Naïve Bayes Classifier	","Supervised learning method for predicting unseen data based on Bayes' theorem.	",Referenced,"Lewis, D. D. (1998). Naive (bayes) at forty: The independence assumption in information retrieval. In Machine Learning: ECML-98: 10th European Conference on Machine Learning Chemnitz, Germany, April 21–23, 1998 Proceedings, pp. 4–15.	","Binarized Naïve Bayes	","Uses Boolean presence/absence features for higher sentiment classification importance than word frequency.	",Developed,Referenced,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,"Name of the AI technique used: Decision Tree Learning Algorithm, Latent Dirichlet Allocation (LDA), Biterm Topic Modeling (BTM), Naïve Bayes Classifier
How AI is used to classify between functional and non-functional requirements: AI techniques are used to improve the classification accuracy by preprocessing requirements to standardize data and applying machine learning models to distinguish between FRs and NFRs, and further sub-categorize NFRs.
Name of the AI tools used: Stanford Parser, LingPipe NLP Toolkit",,"OpenScience tera-PROMISE repository	",Contains 625 labeled natural language requirements (255 FRs and 370 NFRs),"used to train and test models.
",,,,,,,,,,,,,,,,YES,"Availability (A)
Look & Feel (LF)
Maintainability (MN)
Operability (O)
Performance (PE)
Scalability (SC)
Security (SE)
Usability (US)
Fault Tolerance (FT)
Portability (PO)
Legal & Licensing (L)
",,"Latent Dirichlet Allocation (LDA)	","Topic modeling technique used to classify NFRs into sub-categories based on word frequency.	",Referenced,"Wallach, H. M. (2006). Topic Modeling: Beyond Bag-of-words. Proceedings of the 23rd International Conference on Machine Learning, ACM, pp. 977–984.	",NO,NO,NO,NO,NO,NO,NO,"Biterm Topic Modeling (BTM)	","Models topics based on word co-occurrence patterns, used for classifying short text documents.	",Referenced,NO,NO,NO,NO,NO,NO,NO,NO,"Naïve Bayes Classifier	","Supervised learning method for predicting unseen data based on Bayes' theorem.	",Referenced,"Lewis, D. D. (1998). Naive (bayes) at forty: The independence assumption in information retrieval. In Machine Learning: ECML-98: 10th European Conference on Machine Learning Chemnitz, Germany, April 21–23, 1998 Proceedings, pp. 4–15.	",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenge 1: High variability in natural language expressions and absence of a controlled vocabulary.
Solution: Preprocessing approaches like standardization and normalization were proposed.
Challenge 2: Difficulty in distinguishing between closely related sub-categories, especially usability.
Solution: Additional or better sentimental patterns and sentence structures needed.
",NO,,"OpenScience tera-PROMISE repository	",Contains 625 labeled natural language requirements (255 FRs and 370 NFRs),"used to train and test models.
",,,,,,,,,,,,,,,,,,,NO,"Future work involves expanding preprocessing methods, including more regular expressions, and enhancing classification algorithms to better handle unbalanced data sets.
"
317,Kurtanovic 2017,Automatically Classifying Functional and Non-functional Requirements Using Supervised Machine Learning,Consensus,317,Automatically Classifying Functional and Non-Functional Requirements Using Supervised Machine Learning,2017,"In this paper, we take up the second RE17 data challenge: the identification of requirements types using the 'Quality attributes (NFR)' dataset provided. We studied how accurately we can automatically classify requirements as functional (FR) and non-functional (NFR) in the dataset with supervised machine learning. Furthermore, we assessed how accurately we can identify various types of NFRs, in particular usability, security, operational, and performance requirements. We developed and evaluated a supervised machine learning approach employing meta-data, lexical, and syntactical features. We employed under- and over-sampling strategies to handle the imbalanced classes in the dataset and cross-validated the classifiers using precision, recall, and F1 metrics in a series of experiments based on the Support Vector Machine classifier algorithm. We achieve a precision and recall up to ~92% for automatically identifying FRs and NFRs. For the identification of specific NFRs, we achieve the highest precision and recall for security and performance NFRs with ~92% precision and ~90% recall. We discuss the most discriminating features of FRs and NFRs as well as the sampling strategies used with an additional dataset and their impact on the classification accuracy.",Germany,Conference ,"2017 IEEE 25th International Requirements Engineering Conference (RE)
",Experimental Research; Empirical Study ,"To automatically classify functional (FR) and non-functional requirements (NFR) using supervised machine learning techniques, and to identify the most effective features and strategies for improving classification accuracy, particularly for NFR subcategories like usability, security, operational, and performance.",YES,,Supervised Machine Learning with Support Vector Machine (SVM) classifiers.,"SVM was employed to classify requirements into functional and non-functional. The classifier used lexical, syntactical, and meta-data features and was cross-validated for accuracy.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Technique: Support Vector Machine (SVM) and other ensemble methods like Adaptive Boost, Extra Tree, and Gradient Boosting.
Usage: These AI techniques are used to classify requirements into functional and non-functional categories as well as to identify specific NFR subcategories like usability, security, operational, and performance.
AI Tools: SciKit-learn library was used to implement the machine learning algorithms.
",,"Quality attributes (NFR) dataset	","625 requirements	","Used to train and test the SVM classifier to classify requirements into FR and NFR categories.
",,,,,,,,,,,,,,,,YES,"Usability
Security
Operational
Performance",,"Binary and Multi-class Classifiers (SVM-based)	","The study employs binary and multi-class SVM classifiers to identify specific types of NFRs such as usability, security, operational, and performance. These classifiers were cross-validated and evaluated based on precision, recall, and F1 metrics.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenges: The study mentions challenges related to imbalanced datasets, where certain subcategories of NFRs are underrepresented, leading to lower classification accuracy.
Addressing the challenge: The study suggests using additional datasets and over-sampling strategies to improve classification accuracy.",NO,,"Quality attributes (NFR) dataset	","625 requirements	","Used to train and test the SVM classifier for classifying NFRs into sub-categories 


",,,,,,,,,,,,,,,,,,,NO,"The study suggests further exploration of additional datasets and feature extraction techniques to improve classification accuracy, particularly for rare NFR subcategories. It also highlights the potential for using more advanced machine learning algorithms to enhance the overall performance of the classification process."
316,Deocadez 2017,Automatically classifying requirements from app stores: A preliminary study,Consensus,316,Automatically Classifying Requirements from App Stores: A Preliminary Study,2017,"In this paper we apply self-labeling algorithms as Semi-Supervised Classification (SSC) techniques in order to automate the classification of functional and non-functional requirements contained in reviews in the App Store. In this domain, where it is easy to collect a large number of reviews but difficult to manually annotate them, we found that SSC techniques can successfully perform this task and that only a small amount of data is needed to achieve results similar to classical supervised techniques. We also found that the models learned can properly assign labels to the collected data and can classify unseen future reviews. We believe SSC techniques can be of particular use during requirements classification.","United Kingdom , Spain",Conference ,"IEEE 25th International Requirements Engineering Conference Workshops
",Experimental Research; Empirical Study ,To automate the classification of functional and non-functional requirements contained in reviews within the App Store using Semi-Supervised Classification (SSC) techniques.,YES,,"Self-Training	","A semi-supervised learning algorithm that uses its own predictions to retrain itself with high-confidence predictions.	",Proposed,"Almaghairbe, R., & Roper, M. (2016). Automatically Classifying Test Results by Semi-Supervised Learning. 2016 IEEE 27th International Symposium on Software Reliability Engineering (ISSRE), Ottawa, ON, 2016, pp. 116-126. DOI: 10.1109/ISSRE.2016.12.
",NO,NO,NO,NO,NO,"Weka, KEEL	","Used for text mining and data analysis
","RASCO	","Uses a random subspace method with Co-Training to generate random feature splits instead of the entire set.	",Proposed,"Wang, J., Luo, S., & Zeng, X. (2008). A Random Subspace Method for Co-Training. In 2008 IEEE International Joint Conference on Neural Networks (IEEE World Congress on Computational Intelligence), pp. 195-200. DOI: 10.1109/IJCNN.2008.4633724.",NO,NO,NO,NO,NO,"Weka, KEEL	","Used for text mining and data analysis
","Rel-RASCO	","A variation of RASCO that selects random feature subspaces with relevant features rather than purely random ones.	",Proposed,"Yaslan, Y., & Cataltepe, Z. (2010). Co-training with Relevant Random Subspaces. Neurocomputing, 73(10-12), 1652-1661. DOI: 10.1016/j.neucom.2009.11.032.",NO,NO,NO,NO,NO,"Weka, KEEL	","Used for text mining and data analysis
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Name of the AI Technique: Semi-Supervised Classification (SSC) Techniques (Self-Training, RASCO, Rel-RASCO)
How AI is Used: AI is used to classify functional and non-functional requirements in app reviews by applying self-labeling algorithms that require only a small amount of labeled data to achieve high accuracy.
Name of AI Tools Used: Weka, KEEL",,NO,"300 manually categorized app reviews	","Used as a ground-truth set for the classification process, where 150 reviews are labeled as functional requirements and 150 as non-functional requirements.
",,,,,,,,,,,,,,,,NO,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,NO,"The study suggests analyzing other semi-supervised classification techniques, further evaluation measures, and considering whether the results can be generalized to other app stores."
310,Lauenroth 2017,Do Words Make a Difference? An Empirical Study on the Impact of Taxonomies on the Classification of Requirements,Consensus,310,Do Words Make a Difference? An Empirical Study on the Impact of Taxonomies on the Classification of Requirements,2017,"Requirements taxonomies help to classify and channel the requirements in a project. A very simple taxonomy is the distinction between functional and non-functional requirements. Furthermore, a taxonomy helps to decide if a statement is a requirement at all or just something else (e.g., ‘information’). The quality of a taxonomy is important as we do not want to put a statement in the wrong category. In this paper, we argue that we need to take cognitive psychology into account in this task of requirements classification. Cognitive psychology focuses on the abilities and limitations of the human mind. We present a controlled experiment and a replication in which we compare three requirements taxonomies. The participants had to evaluate a set of requirements based on the given taxonomies. The results of these experiments show that there are differences between the taxonomies: Interestingly, the question of whether a statement is identified as a requirement or not depends on the taxonomy. These experiments present initial results, we assume that these results are related to phenomena of cognitive psychology. We conclude that the wording should be carefully taken into account in the definition of the categories of a high-quality requirements taxonomy .",Germany,Conference , 2017 IEEE 25th International Requirements Engineering Conference .,Experimental Research; Empirical Study ,to investigate whether the wording used in different taxonomies impacts the classification of requirements and to understand how cognitive psychology phenomena influence requirements classification .,YES,,"TIEEE	","Requirement classification into requirement or information	","Referenced	",NO,NO,NO,NO,NO,NO,NO,NO,"TNFR	","Classification into functional, non-functional requirement, or information	","Referenced	",NO,NO,NO,NO,NO,NO,NO,NO,TQR,"Classification into functional, quality requirement, constraint, or information	","Referenced	",NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,NO,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenge: The selection of the taxonomy affects the classification, especially the false positives. For example, the TNFR taxonomy often classifies ""not a functional requirement"" as a ""non-functional requirement,"" even if it is just information .
How the challenge could be addressed: Further experiments and refining of taxonomy categories are suggested to reduce misclassification .
",NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,NO,"Future research is suggested to explore the use of ontologies instead of simple taxonomies for requirements classification. This could provide a richer basis for classification and lead to higher classification quality .
"
309,Mairiza 2010,An investigation into the notion of non-functional requirements,Consensus,309,An Investigation into the Notion of Non-Functional Requirements,2010,"Although Non-Functional Requirements (NFRs) are recognized as very important contributors to the success of software projects, studies to date indicate that there is still no general consensus in the software engineering community regarding the notion of NFRs. This paper presents the result of an extensive and systematic analysis of the extant literature over three NFRs dimensions: (1) definition and terminology; (2) types; and (3) relevant NFRs in various types of systems and application domains. Two different perspectives to consider NFRs are described. A comprehensive catalogue of NFRs types as well as the top five NFRs that are frequently considered are presented. This paper also offers a novel classification of NFRs based on types of systems and application domains. This classification could assist software developers in identifying which NFRs are important in a particular application domain and for specific systems.
",Australia,Conference ,"SAC’10, March 22-26, 2010, Sierre, Switzerland.",Systematic Review,To perform an extensive and systematic investigation of the notion of Non-Functional Requirements (NFRs) in the software engineering literature to increase understanding of this complex and multifaceted phenomenon.,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Performance
Reliability
Usability
Security
Maintainability
",,NO,"The study provides a general discussion on the categorization of non-functional requirements but does not specify a particular classification scheme or technique for sub-categories.	",NO,Referenced,"[1] L. Chung, B. A. Nixon, E. Yu, and J. Mylopoulos, Non-functional requirements in software engineering. Massachusetts: Kluwer Academic Publishers, 2000.	",NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenge: The subjective, relative, and abstract nature of NFRs makes them difficult to model, verify, test, and measure, compared to functional requirements.
How to Address: Increasing knowledge about NFRs and developing a consensus on definitions and taxonomy.
",NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,NO,Investigating conflicts among NFRs to develop a framework to effectively identify and manage potential conflicts.
307,Casamayor 2010,Identification of non-functional requirements in textual specifications: A semi-supervised learning approach,Consensus,307,Identification of non-functional requirements in textual specifications: A semi-supervised learning approach,2010,"Context: Early detection of non-functional requirements (NFRs) is crucial in the evaluation of architectural alternatives starting from initial design decisions. The application of supervised text categorization strategies for requirements expressed in natural language has been proposed in several works as a method to help analysts in the detection and classification of NFRs concerning different aspects of software. However, a significant number of pre-categorized requirements are needed to train supervised text classifiers, which implies that analysts have to manually assign categories to numerous requirements before being able of accurately classifying the remaining ones. Objective: We propose a semi-supervised text categorization approach for the automatic identification and classification of non-functional requirements. Therefore, a small number of requirements, possibly identified by the requirement team during the elicitation process, enable learning an initial classifier for NFRs, which could successively identify the type of further requirements in an iterative process. The goal of the approach is the integration into a recommender system to assist requirement analysts and software designers in the architectural design process. Method: Detection and classification of NFRs is performed using semi-supervised learning techniques. Classification is based on a reduced number of categorized requirements by taking advantage of the knowledge provided by uncategorized ones, as well as certain properties of text. The learning method also exploits feedback from users to enhance classification performance. Results: The semi-supervised approach resulted in accuracy rates above 70%, considerably higher than the results obtained with supervised methods using standard collections of documents. Conclusion: Empirical evidence showed that semi-supervision requires less human effort in labeling requirements than fully supervised methods, and can be further improved based on feedback provided by analysts. Our approach outperforms previous supervised classification proposals and can be further enhanced by exploiting feedback provided by analysts.",Argentina,Journal,Information and Software Technology,Experimental Research; Empirical Study ,"To propose a semi-supervised text categorization approach for the automatic identification and classification of non-functional requirements using a small number of initially categorized requirements, which is then used to iteratively classify further requirements.",YES,,"Semi-supervised Learning with EM and Naïve Bayes	","Uses a small set of labeled examples and a large set of unlabeled examples to improve learning accuracy. It uses Expectation Maximization (EM) strategy combined with naïve Bayesian classification.	",Proposed,"Nigam et al., 2000. Maximum likelihood from incomplete data via the EM algorithm. Journal of the Royal Statistical Society, Series B 39 (1), 1-38.	",Classifier4J,"Text classification using naïve Bayes algorithm	",Developed,Proposed,"Classifier4J documentation	
",NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Technique Name: Semi-supervised Learning with EM and Naïve Bayes

How AI is Used: The Expectation Maximization (EM) algorithm is used to iteratively assign probabilistic class labels to each document. This semi-supervised approach enables classification based on both labeled and unlabeled data.

AI Tools Used: Classifier4J",,NO,A collection of 370 NFRs and 255 functional requirements from 15 different software development projects. The dataset was built by MS students at DePaul University., Used as input for training the semi-supervised learning classifiers to identify and classify NFRs.,,,,,,,,,,,,,,,,YES,"Availability
Legal
Look-and-feel
Maintainability
Operational
Performance
Scalability
Security
Usability
Features
Portability (excluded due to low incidence)",,"Semi-supervised Learning with EM and Naïve Bayes	","Uses the Expectation Maximization (EM) algorithm with naïve Bayes to classify nonfunctional requirements into subcategories based on labeled and unlabeled data.	",Proposed,"Nigam et al., 2000. Maximum likelihood from incomplete data via the EM algorithm. Journal of the Royal Statistical Society, Series B 39 (1), 1-38.	",Classifier4J,"Text classification using naïve Bayes algorithm	",Developed,"Proposed
","Classifier4J documentation	
",NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"The study highlights the challenge of requiring a large number of pre-categorized requirements for supervised classification, which demands significant manual effort from analysts.","Type of Nonfunctional Requirement: Multiple types, including security, performance, scalability, etc.

Details of the Case Study: The study was conducted using a dataset containing real requirements collected from 15 different projects.

Type of Case Study: Empirical evaluation using semi-supervised learning for NFR classification.
",,NO,The same dataset of 370 NFRs and 255 functional requirements from 15 different software development projects.,Used for training and evaluating the classification algorithms for different sub-categories of NFRs.,,,,,,,,,,,,,,,,,,,"Context: The presentation of NFRs is mentioned in the context of utilizing a semi-supervised learning approach for classifying textual requirements.

Proposals: The study proposes an iterative classification process where initial manual labeling is supplemented by automated classification, which is refined based on feedback.
",The study suggests introducing active learning in the iterative classification process to further reduce the required labeling effort while retaining accuracy by selecting the most informative examples for labeling.
305,Knauss 2014,Semi- automatic categorization of natural language requirements,Consensus,305,"(Semi-)Automatic Categorization of Natural Language Requirements
",2014,"Context and motivation: Requirements of today's industry specifications need to be categorized for multiple reasons, including analysis of certain requirement types (like non-functional requirements) and identification of dependencies among requirements. This is a prerequisite for effective communication and prioritization of requirements in industry-size specifications. Because of the size and complexity of these specifications, categorization tasks must be specifically supported to minimize manual efforts and ensure high classification accuracy. Approaches using (supervised) automatic classification algorithms face challenges in providing enough high-quality training data. This paper discusses the requirements engineering team and their requirements management tool as a socio-technical system that enables consistent classification of requirements with a focus on organizational learning. The study compares a manual, semi-automatic, and fully-automatic approach for classifying requirements in this environment. Performance is evaluated by measuring the effort and accuracy of automatic classification recommendations, the combined performance of user and tool, and expert-participant opinions through a questionnaire. Results show that a semi-automatic approach offers the best ratio of quality and effort and the best learning performance. Contribution: The study defines a socio-technical system for requirements classification and evaluates it in an industrial setting at Mercedes-Benz with a team of ten practitioners.
","Sweden 
Germany",Conference ,"Published in the proceedings of a conference, specifically within a Springer publication.",Empirical Study ,"To define and evaluate a socio-technical system for requirements classification in an industrial setting. This system aims to achieve consistent classification of requirements by combining manual, semi-automatic, and fully-automatic approaches.
",YES,,"Classification of requirements into topics using machine learning algorithms	","Uses supervised learning methods to classify requirements into topics, such as functional or non-functional categories	",Proposed,"Knauss, E., Houmb, S., Schneider, K., Islam, S., & Jürjens, J. (2011). Supporting requirements engineers in recognising security issues. Requirements Engineering: Foundation for Software Quality. DOI: 10.1007/978-3-642-19820-6_4
Ott, D. (2013). Automatic requirement categorization of large natural language specifications at Mercedes-Benz for review improvements. Requirements Engineering: Foundation for Software Quality. DOI: 10.1007/978-3-642-37422-8_7",NO (NOT SPECIFICALLY NAMED) ,"Classification support, automatic/semi-automatic classification	",Developed,Proposed,NO,"LASR	","Generic tool for large-scale annotation
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"AI Technique Used: Support Vector Machines (SVM)
Use of AI Technique: SVMs are used to classify requirements by finding a separating hyperplane between different requirement topics in a high-dimensional space.
AI Tools Used: Custom-built tool (not specifically named)",,"Training data from previous specifications	","~2,000 requirements	","Used for training the classification models
",,,,,,,,,,,,,,,,NO,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenge: The main challenge mentioned is the difficulty in providing sufficient high-quality training data for the automatic classification of requirements. The quality of classification is highly dependent on the amount and quality of training data. In addition, there is a challenge in agreeing on a specific classification scheme within a team due to differences in opinions and perspectives.
Addressing the Challenge: The semi-automatic classification approach was proposed to mitigate these challenges by combining automatic classification with user confirmation, allowing continuous learning and adaptation to new domains, thereby generating high-quality training data.
",NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,NO,"Investigate the effects of semi-automatic classification on organizational learning.
Explore further the impact of different modes of requirement classification on the quality of the outcomes."
304,Kassab 2007,Scope management of non-functional requirements,Consensus,304,Scope Management of Non-Functional Requirements,2007,"In order to meet commitments in software projects, a realistic assessment must be made of project scope. Such an assessment relies on the availability of knowledge on the user-defined project requirements and their effort estimates and priorities, as well as their risk. This knowledge enables analysts, managers and software engineers to identify the most significant requirements from the list of requirements initially defined by the user. In practice, this scope assessment is applied to the Functional Requirements (FRs) provided by users who are unaware of, or ignore, the Non-Functional Requirements (NFRs). This paper presents ongoing research which aims at managing NFRs during the software development process. Establishing the relative priority of each NFR, and obtaining a rough estimate of the effort and risk associated with it, is integral to the software development process and to resource management. Our work extends the taxonomy of the NFR framework by integrating the concept of the “hardgoal”. A functional size measure of NFRs is applied to facilitate the effort estimation process. The functional size measurement method we have chosen is COSMIC-FFP, which is theoretically sound and the de facto standard in the software industry.","Netherlands
Canada",Conference ,"33rd EUROMICRO Conference on Software Engineering and Advanced Applications (SEAA 2007)

",Empirical Study ; Theoretical Study  ; Design Science Research,"To manage the scope of non-functional requirements (NFRs) during the software development process by integrating the concept of ""hardgoal"" into the NFR framework, enabling better estimation of effort, priority, and risk associated with NFRs",NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Scalability
Performance
Security
Usability
Reliability",,"NFR Framework	","A process-oriented and goal-oriented approach aimed at making NFRs explicit and placing them at the forefront of stakeholders' minds. It involves acquiring knowledge about the system domain, identifying NFRs as softgoals, decomposing them, and dealing with ambiguities, tradeoffs, priorities, and interdependencies.	",Referenced,"[3] Chung, L., B. A. Nixon, E. Yu and J. Mylopoulos, Nonfunctional Requirements in Software Engineering. Kluwer Academic Publishing, 2000.	",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,"Context: The discussion revolves around the documentation of NFRs using a softgoal interdependency graph and the hardgoal notation.
Proposed Solution: Extending the NFR framework to include hardgoal notations with crisp indicators and acceptable value","Conducting case studies at company sites to understand problems and solutions in managing the scope of NFRs.
Exploring how NFRs impact the total cost of projects.
Defining a process for NFR conflict resolution based on objectively assessed priorities"
301,Singh 2017,Classification of non-functional requirements from SRS documents using thematic roles,Consensus,301,Classification of Non-functional Requirements from SRS Documents Using Thematic Roles,2016,"The proposal presented in this paper combines two approaches: the classification of Non-Functional Requirements (NFRs) to improve software product quality and reduce the manual effort required to identify requirement sentences in Software Requirements Specification (SRS) documents. The classification uses a rule-based technique based on linguistic relations, achieving a Precision of 97% and Recall of 96% on the PROMISE corpus.",India,Conference , IEEE International Symposium on Nanoelectronic and Information Systems.,Empirical Study ; Case Study ; Design Science Research, to develop a technique for the classification of Non-Functional Requirements (NFRs) using thematic roles to minimize manual efforts in identifying requirements and improve the quality of the requirement documents,NO,,NO,NO,NO,"NO
",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Functionality: Accuracy, Suitability, Security.
Usability: Operability, Understandability, Attractiveness.
Efficiency: Time Behavior, Resource Utilization.",,"Thematic Roles using GATE	","A rule-based approach for classifying NFRs into sub-categories using thematic roles	",Proposed,,GATE,"Text processing and annotating thematic roles	",Developed ,Proposed,"ISO. (2001). ""9126-1: 2001 - Software engineering – Product quality – Part 1: Quality model."" International Organization for Standardization, Geneva.


ISO. (2010). ""ISO/IEC 25010 - Systems and software engineering - Systems and software quality requirements and evaluation (square) - System and software quality models."" International Organization for Standardization, Geneva.

Cleland-Huang, J., Settimi, R., Zou, X., & Solc, P. (2006). ""The detection and classification of non-functional requirements with application to early aspects."" Requirements Engineering, 14th IEEE International Conference, pp. 39–48.


Hussain, I., Kosseim, L., & Ormandjieva, O. (2008). ""Using linguistic knowledge to classify non-functional requirements in SRS documents."" Natural Language and Information Systems. Springer, pp. 287–298.


Rashwan, A., Ormandjieva, O., & Witte, R. (2013). ""Ontology-based classification of non-functional requirements in software specifications: A new corpus and SVM-based classifier."" Computer Software and Applications Conference (COMPSAC), 2013 IEEE 37th Annual. IEEE, pp. 381–386.


Rashwan, A. (2015). ""Automated quality assurance of non-functional requirements for testability."" Ph.D. dissertation, Concordia University.








","ANNIE, Snowball Stemmer, POS Tagger, MuNPEx, GATE Morphological Analyzer, Number Tagger, Measurement Tagger, ReqGazetteer	","Used to automate text processing and classification tasks
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,NO,,"PROMISE Corpus	","15 SRS documents with 635 sentences (265 FRs, 370 NFRs)	","Used for categorizing NFRs into sub-categories.
",,,,,,,,,,,,,,,,,,,NO,"Refining the collection of sub-classes and improving fit-criteria.
Redefining thematic roles and using larger corpus for better classification.
"
299,Mahmoud 2016,"Detecting, classifying, and tracing non-functional software requirements",Consensus,299,"Detecting, classifying, and tracing non-functional software requirements",2016," The paper describes a novel unsupervised approach for detecting, classifying, and tracing non-functional software requirements (NFRs). The approach exploits the textual semantics of software functional requirements (FRs) to infer potential quality constraints enforced in the system. The authors conduct a systematic analysis of various word similarity methods and clustering techniques to generate semantically cohesive clusters of FR words, which are classified into categories of NFRs based on their semantic similarity to basic NFR labels. Discovered NFRs are traced to their implementation in the solution space based on their textual semantic similarity to source code artifacts. The experimental analysis conducted on three software systems shows that methods leveraging large textual knowledge sources are more effective in capturing semantic relations between FR words. Hierarchical clustering algorithms are found to generate more thematic word clusters than partitioning clustering techniques. The proposed approach can effectively discover, classify, and trace NFRs with accuracy levels adequate for practical applications",NO,Journal, Requirements Engineering,Empirical Study ; Systematic Review,"to develop a novel, unsupervised approach to detect, classify, and trace non-functional requirements (NFRs) by leveraging textual semantics of software functional requirements (FRs) and to evaluate the effectiveness of various word similarity methods and clustering techniques for this purpose",YES,,"Latent Semantic Analysis (LSA)	","An unsupervised method used for extracting and representing relations between words and documents based on their underlying latent semantic structure.	","Referenced	","Deerwester, S., Dumais, S. T., Furnas, G. W., Landauer, T. K., Harshman, R. (1990). ""Indexing by Latent Semantic Analysis."" Journal of the American Society for Information Science, 41(6), 391-407.","Bluebit Matrix Calculator	","Performs high-performance matrix algebra for .NET programming, used to implement LSA.	",Developed,Referred,NO,"Google API for NGD	","Used to build hit-count matrix for normalized Google distance in similarity analysis.
","Textual Semantic Similarity (TSS)	","A method to calculate the semantic similarity between textual elements using vector representations.	","Proposed	","Anas Mahmoud et al. (2016). ""Detecting, classifying, and tracing non-functional software requirements."" Requirements Eng 21:357-381.	","Custom Developed Tool	","Implements TSS using cosine similarity for semantic comparison between FR and NFR terms.	",Developed,Proposed,"Anas Mahmoud et al. (2016). ""Detecting, classifying, and tracing non-functional software requirements."" Requirements Eng 21:357-381.	",NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"(i) Name of the AI technique used: No specific machine learning or AI technique is directly mentioned for the classification of functional vs. nonfunctional requirements. The study primarily utilizes semantic similarity measures and clustering algorithms.
(ii) Detailed usage: The study focuses on calculating semantic similarity between words extracted from functional requirements and clustering them into different categories of nonfunctional requirements using the Normalized Google Distance (NGD) and textual semantic similarity (TSS) measures.
(iii) Name of AI tools used: The study mentions general-purpose tools such as ""Google API for NGD"" and ""Bluebit Matrix Calculator"" used in the calculation of similarity measures",, The study uses datasets from three different software systems to evaluate the proposed approach. These systems are not explicitly named in the document.,NO,"The datasets were used to extract functional requirements (FRs), calculate the pairwise semantic similarity between FR words, and cluster them into potential nonfunctional requirements (NFRs) categorie",,,,,,,,,,,,,,,,YES,"Security
Performance
Usability",,"Normalized Google Distance (NGDWiki)	","NGDWiki is used to measure the semantic similarity between words in a cluster and predefined NFR labels using Wikipedia-based NGD scores. The average similarity score is used to classify word clusters into NFR subcategories.	","Proposed	","Anas Mahmoud, Grant Williams (2016). ""Detecting, classifying, and tracing non-functional software requirements."" Requirements Engineering 21(3), 357-381. DOI: 10.1007/s00766-016-0252-8.	","Bluebit Matrix Calculator	","Performs high-performance matrix algebra for .NET programming, utilized in similarity calculations.	",Developed,Proposed,"Deerwester, S., Dumais, S. T., Furnas, G. W., Landauer, T. K., Harshman, R. (1990). ""Indexing by Latent Semantic Analysis."" Journal of the American Society for Information Science, 41(6), 391-407.","Google API for NGD	","Used to build hit-count matrix for NGDWiki similarity analysis.
","Textual Semantic Similarity (TSS)	","TSS is used to calculate the semantic similarity between texts using cosine similarity based on vector representations. This technique is applied to classify words into NFR subcategories by comparing their similarity to predefined NFR labels.	",Proposed,"Mihalcea et al. [61], Anas Mahmoud, Grant Williams (2016). ""Detecting, classifying, and tracing non-functional software requirements."" Requirements Engineering 21(3), 357-381. DOI: 10.1007/s00766-016-0252-8.	","Custom Developed Tool	","Implements TSS to compute similarity scores between functional and nonfunctional requirements for classification purposes.	",Developed,Proposed,"Mihalcea et al. [61], Anas Mahmoud, Grant Williams (2016). ""Detecting, classifying, and tracing non-functional software requirements."" Requirements Engineering 21(3), 357-381. DOI: 10.1007/s00766-016-0252-8.	",NO,NO,"Hierarchical Clustering (Average Linkage)	","A clustering algorithm used to group words semantically to classify them into NFR subcategories. This method generates thematic clusters based on average linkage criteria, optimizing cluster coherence and separation.	","Referenced	","Anas Mahmoud, Grant Williams (2016). ""Detecting, classifying, and tracing non-functional software requirements."" Requirements Engineering 21(3), 357-381. DOI: 10.1007/s00766-016-0252-8.	","Custom Clustering Module	","Utilizes hierarchical clustering techniques to group related words based on semantic similarity for NFR classification.	",Developed,"Referenced	","Anas Mahmoud, Grant Williams (2016). ""Detecting, classifying, and tracing non-functional software requirements."" Requirements Engineering 21(3), 357-381. DOI: 10.1007/s00766-016-0252-8.	","SciPy, NumPy	","Used to implement clustering algorithms.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"(i) Challenge details: The study identifies challenges related to the accuracy of semantic similarity measures. For example, methods like Pointwise Mutual Information (PMI) often struggle with small corpora, and Latent Semantic Analysis (LSA) can be computationally expensive. The study also notes that reliance on lexical matching methods alone can result in significant information loss​
(ii) How the challenges could be addressed: The study suggests using methods that combine textual semantics, such as Textual Semantic Similarity (TSS), to improve both precision and recall in classification, reducing the impact of information loss from lexical mismatches","(i) Type of nonfunctional requirement: Security, Performance, Usability, etc.
(ii) Details of the case study: The study conducts an empirical analysis on three different software systems, focusing on classifying nonfunctional requirements from functional requirements using semantic similarity measures and clustering techniques
(iii) Type of case study: Empirical study.
",, The study uses datasets from three different software systems to evaluate the proposed approach. These systems are not explicitly named in the document.,NO,"The datasets were used to extract functional requirements (FRs), calculate the pairwise semantic similarity between FR words, and cluster them into potential nonfunctional requirements (NFRs) categorie",,,,,,,,,,,,,,,,,,,"(i) Context: The presentation of nonfunctional requirements (NFRs) is discussed in the context of tracing them to their implementation in software systems.
(ii) Proposal for presentation: The study proposes using textual semantic similarity measures to align NFRs with source code artifacts and emphasizes the importance of clear documentation to support traceability​","Enhance empirical analysis with more experimental systems and participants.
Continue exploring different types of word semantic similarity methods and clustering techniques.
Develop a set of working prototypes (stand-alone tools and plugins) to implement findings and conduct long-term usability studies"
296,Slankas 2013,Automated extraction of non-functional requirements in available documentation,Consensus,297,Automated Extraction of Non-functional Requirements in Available Documentation.,2013,"While all systems have non-functional requirements (NFRs), they may not be explicitly stated in a formal requirements specification. Furthermore, NFRs may also be externally imposed via government regulations or industry standards. As some NFRs represent emergent system proprieties, those NFRs require appropriate analysis and design efforts to ensure they are met. When the specified NFRs are not met, projects incur costly re-work to correct the issues. The goal of our research is to aid analysts in more effectively extracting relevant non-functional requirements in available unconstrained natural language documents through automated natural language processing. Specifically, we examine which document types (data use agreements, install manuals, regulations, request for proposals, requirements specifications, and user manuals) contain NFRs categorized into 14 NFR categories (e.g., capacity, reliability, and security). We measure how effectively we can identify and classify NFR statements within these documents. In each of the documents evaluated, we found NFRs present. Using a word vector representation of the NFRs, a support vector machine algorithm performed twice as effectively compared to the same input to a multinomial naïve Bayes classifier. Our k-nearest neighbor classifier with a unique distance metric had an F1 measure of 0.54, outperforming in our experiments the optimal naïve Bayes classifier which had a F1 measure of 0.32. We also found that stop word lists beyond common determiners had no minimal performance effect.
",USA,Conference ,"NaturaLiSE 2013, San Francisco, CA, USA.",Experimental Research; Empirical Study ,"to aid analysts in more effectively extracting relevant non-functional requirements (NFRs) from unconstrained natural language documents using automated natural language processing.
",NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Access Control
Audit
Availability
Capacity and Performance
Legal
Look and Feel
Maintainability
Operational
Privacy
Recoverability
Reliability
Security
Usability
Other",,"NFR Locator	","A tool-based approach to classify and extract sentences in existing natural language texts into their appropriate NFR categories. The classification is necessary to determine what role a sentence has.	",Proposed,NO,"NFR Locator	","Utilizes pre-defined classifiers to locate and extract NFRs from documents. It allows for interactive mode to train additional classifiers with new domain or document types.	",Developed,Proposed,NO,"Custom distance metric-based k-NN classifier, Support Vector Machine (SVM)	","These tools are used for implementing and testing the classification algorithm.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenge 1: Identifying and categorizing NFRs from unconstrained natural language texts is complex due to the variability in how such requirements are expressed across different documents.
Challenge 2: The effectiveness of classifiers like SVM and k-NN depends on the quality and characteristics of the training data, and different classifiers perform differently based on sentence structure and feature sets.
",NO,,"PROMISE NFR Data Set.
","625 instances of requirements specifications from a Master's level class at DePaul University.	","Used to train and test various machine learning classifiers (e.g., naïve Bayes, Support Vector Machine (SVM)) for classifying sentences into specific NFR categories. The classifiers were trained using the labeled data from this dataset to identify patterns and characteristics relevant to each NFR category.
","CCHIT Ambulatory Requirements	","Requirements specifications relevant to electronic health records (EHRs).	","The sentences from these specifications were manually labeled into various NFR categories, and the labeled data was then used for training and evaluating machine learning classifiers such as k-nearest neighbor (k-NN), naïve Bayes, and SVM for identifying and classifying NFRs.
",iTrust,"Use cases and requirement specifications for the iTrust Electronic Health Care System.	","Similar to the CCHIT dataset, sentences were manually classified into different NFR categories. This labeled data was then utilized to train classifiers, compare performance across different types of classifiers, and assess the effectiveness of different machine learning techniques in accurately classifying NFRs within natural language documents.
","OpenEMR Install Manual and User Manual	","Installation instructions and user guides for the OpenEMR open-source electronic medical record system.	","These documents were parsed and processed to extract NFR-related sentences. Sentences were categorized manually, and this categorized data was used to train classifiers to improve the automated detection of NFRs, providing a diverse set of document types to enhance the robustness of the classification algorithms.
","Data Use Agreements (DUAs)	","Legal contracts specifying data sharing, access permissions, and purposes from the Centers for Medicare & Medicaid Services and NC Department of Public Health.	","Sentences in these documents were manually labeled into NFR categories like 'Legal' and 'Privacy,' given their relevance to these specific categories. The labeled sentences were then used as part of the training data for machine learning classifiers, helping to fine-tune the classifiers for better accuracy in recognizing these categories.
","Request for Proposals (RFPs)	","RFPs for EHR systems from organizations within the state of California, containing detailed lists of functional and non-functional requirements.	","RFP documents were labeled sentence-by-sentence to classify NFRs and functional requirements. The classified data was utilized in training classifiers to identify the NFRs automatically in other similar documents, helping to validate the machine learning models in a real-world context involving complex document structures.
","Sections from the United States Code of Federal Regulations (CFRs)	","Healthcare-related regulatory documents from the CFR, such as HIPAA Combined Rule, Meaningful Use Criteria, and Health IT Standards.	","The CFR documents were analyzed to identify NFRs related to healthcare regulations. Sentences were categorized manually into NFR subcategories and used as training and test data for the classifiers to assess their capability to handle complex and varied language used in legal and regulatory documents. This step is crucial for validating the classifiers' effectiveness.
","Context: The study emphasizes that properly documented NFRs are crucial for the success of system implementation, especially for large-scale software systems.
Proposal: The NFR Locator tool itself is proposed to enhance the process of identifying and documenting NFRs within various documents by automating the classification process.","Future work includes expanding the corpus beyond healthcare, examining how classifiers trained in one domain perform in others, and employing information extraction techniques to derive specific data elements from classified NFR sentences.
"
293,Singh 2016,Rule-based system for automated classification of non-functional requirements from requirement specifications,Consensus,293,Rule-based system for automated classification of non-functional requirements from requirement specifications,2016,"Unmasking the non-functional requirements (NFRs) such as quality attributes, interface requirements, and design constraints of software is crucial in finding the architectural alternatives for software starting from early design opinions. For developing a quality software product, the extraction of NFRs from requirement documents is needed to be carried out and it’s beneficial if this process becomes automated, reducing the human efforts, time, and mental fatigue involved in identifying specific requirements from a large number of requirements in a document. The proposal presented in this paper combines automated identification and classification of requirement sentences into NFR sub-classes with the help of a rule-based classification technique using thematic roles and identifying the priority of extracted NFR sentences within the document according to their occurrence in multiple NFR classes. F1-measure of 97% is obtained on the PROMISE corpus and 94% F1-Measure on the Concordia RE corpus. The results established validate the claim that the proposal provides specific and higher results than the previous state-of-the-art approaches",India,Conference ,"2016 International Conference on Advances in Computing, Communications, and Informatics (ICACCI)",Empirical Study ,"To develop a rule-based system for the automated classification of non-functional requirements (NFRs) from requirement documents, including the prioritization of extracted NFR sentences based on their occurrence in different NFR classes.",NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Functionality
Usability
Efficiency
",,"Rule-based classification using thematic roles	","A rule-based approach that uses thematic roles to classify requirement sentences into NFR sub-classes, considering their priority based on their occurrence in multiple NFR classes.	",Proposed,"ISO/IEC 9126-1:2001, ISO/IEC 25010:2010	","General Architecture for Text Engineering (GATE)	","Used for thematic roles annotation and applying JAPE rules to identify and classify NFRs.	",Developed,Referenced,"Cunningham, H., Maynard, D., Bontcheva, K. (2011). Text Processing with GATE. Gateway Press CA.	","JAPE, GATE, NLP tools	","Tools are used for preprocessing documents, annotating thematic roles, and classifying sentences using rules.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenge Details: Misclassification due to incomplete requirement sentences; quality of requirement documents influences classification results.
Addressing the Challenge: Redefining thematic roles and improving the fit criteria, using a larger corpus of quality documents to enhance classification accuracy.",NO,,PROMISE Corpus,"635 sentences	","Used to extract thematic roles through the GATE tool, and to identify and classify NFRs using the proposed rule-based classification method.
", Concordia RE Corpus.,"3,064 sentences	","Used to verify that the proposal works on unstructured documents, including SRS, use case models, and supplementary specifications documents.
",,,,,,,,,,,,,,,,NO,"Refining the proposal by enlarging the collection of sub-classes.
Removing misclassifications by improving the fit criteria.
Redefining thematic roles and extracting them using a large corpus of quality requirement document"
291,Tóth 2018,Study of various classifiers for identification and classification of non-functional requirements,Consensus,291,Study of Various Classifiers for Identification and Classification of Non-functional Requirements,2018,"dentification of non-functional requirements in an early phase of the software development process is crucial for creating a proper software design. These requirements are often neglected or given in too general forms. However, interviews and other sources of requirements often include important references also to non-functional requirements which are embedded in a bigger textual context. The non-functional requirements have to be extracted from these contexts and should be presented in a formulated and standardized way to support software design. The set of requirements extracted from their textual context has to be classified to formalize them. This task is to be accomplished manually, but it can be very demanding and error-prone. Several attempts have been made to support identification and classification tasks using supervised and semi-supervised learning processes. These efforts have achieved remarkable results. Researchers were mainly focused on the performance of classification measured by precision and recall. However, creating a tool which can support business analysts with their requirements elicitation tasks, execution time is also an important factor which has to be taken into account. Knowing the performance and the results of benchmarks can help business analysts to choose a proper method for their classification tasks. Our study presented in this article focuses on both the comparison of performances of the classification processes and their execution time to support the choice among the methods.",Hungary,Conference , International Conference on Computational Science and Its Applications (ICCSA 2018),Experimental Research; Empirical Study ,To compare the performances of various classifiers and their execution times in identifying and classifying non-functional requirements to support business analysts in selecting appropriate methods for their specific classification tasks.,YES,,"Multinomial Naive Bayes	","Uses a probabilistic approach based on the frequency of terms (tf-idf) to classify requirements	","Referenced	",NO,NO,NO,NO,NO,NO,"sklearn library	","Implements the algorithm to compare with other classifiers
","Support Vector Machine (SVM)	","Utilizes hyperplane classification method for separating different classes based on maximum margin	","Referenced	",NO,NO,NO,NO,NO,NO,"sklearn library	","Implements the algorithm to compare with other classifiers
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"AI Technique Used: Various classifiers including Multinomial Naive Bayes, SVM, Logistic Regression, Decision Tree, etc.
How AI was used: Classification of non-functional requirements based on textual data using different algorithms to measure precision, recall, and F-score.
AI Tools Used: sklearn library (Python)",,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Availability
Fault Tolerance
Legal
Look and Feel
Maintainability
Operational
Performance
Portability
Scalability
Security
Usability",,"Multinomial Naive Bayes	","Uses term frequency-inverse document frequency (tf-idf) model for sub-category classification	",Referenced,NO,NO,NO,NO,NO,NO,NO,NO,"SVM	","Hyperplane-based separation technique for sub-category classification	",Referenced,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenge: The main challenge identified is the lack of annotated datasets that can be used to effectively train machine learning models for classifying non-functional requirements into sub-categories. Additionally, the ambiguity and overlap between sub-categories make it difficult for classifiers to achieve high accuracy.
How to Address: The study suggests using semi-supervised learning approaches or augmenting existing datasets with additional examples from other domains to improve model accuracy.
",NO,, TERA Promise NFR dataset,"Contains requirements sentences from 15 projects, classified by students of DePaul University, updated in 2010.
",Used as a training dataset to evaluate the performance of different classifiers in distinguishing between various sub-categories of non-functional requirements.,,,,,,,,,,,,,,,,,,,"Context: The study mentions the importance of presenting non-functional requirements in a standardized and structured format to facilitate their identification and classification.
Proposed Solution: The study proposes developing a tool that integrates different classification algorithms to assist business analysts in documenting non-functional requirements effectively.","Developing more sophisticated feature extraction techniques that can better capture the semantic differences between different sub-categories of non-functional requirements.
Experimenting with deep learning models that could potentially outperform traditional machine learning models in identifying and classifying non-functional requirements.
Investigating the applicability of transfer learning by using pre-trained models from related domains to improve classification accuracy for non-functional requirements.
"
289,Lu 2017,Automatic classification of non-functional requirements from augmented app user reviews,Consensus,289,Automatic Classification of Non-Functional Requirements from Augmented App User Reviews,2017,"
Context: The leading App distribution platforms, Apple App 
Store, Google Play, and Windows Phone Store, have over 4 
million Apps. Research shows that user reviews contain abundant 
useful information which may help developers to improve their 
Apps. Extracting and considering Non-Functional Requirements 
(NFRs), which describe a set of quality attributes wanted for an 
App and are hidden in user reviews, can help developers to deliver
a product which meets users’ expectations
. 
Objective: Developers 
need to be aware of the NFRs from massive user reviews during 
software maintenance and evolution. Automatic user reviews 
classification based on an NFR standard provides a feasible way 
to achieve this goal
. 
Method: In this paper, user reviews were 
automatically classified into four types of NFRs (reliability, 
usability, portability, and performance), Functional Requirements
(FRs), and Others. We combined four classification techniques 
BoW, TF-IDF, CHI
2
, and AUR-BoW (proposed in this work) with 
three machine learning algorithms Naive Bayes, J48, and Bagging 
to classify user reviews. We conducted experiments to compare 
the F
-measures of the classification results through all the 
combinations of the techniques and algorithms. Results: We 
found that the combination of AUR-BoW with Bagging achieves 
the best result (a precision of 71.4%, a recall of 72.3%, and an F-
measure of 71.8%) among all the combinations. Conclusion: Our 
finding shows that augmented user reviews can lead to better 
classification results
, 
and the machine learning algorithm Bagging 
is more suitable for NFRs classification from user reviews than 
Naïve Bayes and J48
",China,Conference ,"EASE'17 - The 21st International Conference on Evaluation and Assessment in Software Engineering.
",Experimental Research,"to automatically classify user reviews from mobile apps into Non-Functional Requirements (NFRs), Functional Requirements (FRs), and other categories using a combination of text classification techniques and machine learning algorithms",NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Usability
Reliability
Portability
Performance
",,"AUR-BoW	","Augmented User Reviews with Bag-of-Words for sub-category classification	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,BoW,"Bag-of-Words model, represents text using frequency of words in a corpus	",Referenced,"Zhang, Y., Jin, R., & Zhou, Z. H. (2010). Understanding bag-of-words model: a statistical framework. International Journal of Machine Learning and Cybernetics, 1(1-4), 43-52.",NO,NO,NO,NO,NO,NO,NO,"TF-IDF	","Combines term frequency and inverse document frequency for weighting words	","Referenced	","Zhang, Y., Jin, R., & Zhou, Z. H. (2010). Understanding bag-of-words model: a statistical framework. International Journal of Machine Learning and Cybernetics, 1(1-4), 43-52.",NO,NO,NO,NO,NO,NO,NO,CHI2,"Chi-squared test for feature selection, reducing features to the most informative ones	",Referenced,"Forman, G. (2003). An extensive empirical study of feature selection metrics for text classification. Journal of Machine Learning Research, 3(3), 1289-1305.
",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,"Imbalance of Dataset Types: Very few instances of certain types of NFRs (e.g., portability and performance) compared to other categories.
Solution Proposed: Plan to collect more diverse user reviews and apply techniques to mitigate data imbalance (e.g., resampling) .
Difficulty in Identifying NFRs from Informal Text: User reviews are often unstructured, which complicates automated classification.
Solution Proposed: Augment user review sentences with semantically similar words to improve classification accuracy","Type: Empirical Study
Details: Conducted on two popular apps, iBooks and WhatsApp, to assess the effectiveness of the classification techniques and machine learning algorithms for NFR classification.
Type of Case Study: Experimental Case Study .",,"User reviews from iBooks	","6696 raw reviews (21969 sentences)	","Training and validation of machine learning models. . These reviews were manually classified and then used as training and validation data for machine learning models .
","User reviews from WhatsApp	","4400 raw reviews (21969 sentences)	","Testing the effectiveness of classification techniques.  These reviews were manually classified and then used as training and validation data for machine learning models .
",,,,,,,,,,,,,,,,NO,"Validation with Other Apps: To validate the AUR-BoW technique with user reviews from other app categories to improve the external validity of the results.
Combination of Classification Techniques: To combine AUR-BoW with other techniques like CHI2 and TF-IDF for potentially better results in user review classification.
Handling Imbalance in Datasets: To collect user reviews from more apps to address the imbalance issue and improve classification accuracy .
"
288,Supakkul 2009,"Capturing, organizing, and reusing knowledge of NFRs: An NFR pattern approach",Consensus,288,"Capturing, Organizing, and Reusing Knowledge of NFRs: An NFR Pattern Approach.",2009," Properly dealing with non-functional requirements (NFRs) such as security, cost, and usability requires a large body of knowledge. However, it is difficult for average requirements engineers to possess the necessary knowledge and use it correctly. This paper presents an NFR pattern framework for capturing NFR knowledge using goal, problem, causal attribution, solution/means, and requirements patterns that can be reused to help produce early-phase and late-phase NFR-related requirements. The NFR patterns may be organized using generalization, aggregation, and classification relationships. Reusing the patterns is defined in terms of search and apply operations. The approach is illustrated using a running example based on the TJX incident, the largest credit card theft in history, to demonstrate how knowledge of the incident and mitigation techniques from security standards could be captured and used to help understand and prevent such incidents .",USA,Conference ,2009 Second International Workshop on Managing Requirements Knowledge (MaRK'09),Empirical Study ; Case Study ,"To present an NFR pattern framework for capturing, organizing, and reusing NFR knowledge in multiple dimensions, using goal, problem, causal attribution, solution/means, and requirements patterns ",NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Security
Usability
Cost",,"NFR Pattern Framework	","A framework that captures NFR knowledge using goal, problem, causal attribution, solution/means, and requirements patterns for reuse to help produce early-phase and late-phase NFR-related requirements	",Proposed,NO,"RE-Tools	","COTS-based and development-based requirements modeling tools	",Developed,Proposed,NO,"Microsoft Visio	","Used for annotation and visualization
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,"Type of “Nonfunctional Requirement”: Security
Details of the Case Study: The study uses the TJX incident to demonstrate the application of NFR patterns in capturing security requirements and mitigating threats.
Type of Case Study: Empirical Study based on real-world incident",,NO,NO,NO,,,,,,,,,,,,,,,,,,,"Context: Presentation of security requirements derived from the TJX incident and security standards like PCI DSS.
Proposal: The study proposes using an NFR pattern framework for presenting and documenting NFRs in a structured manner",Future research directions include conducting more case studies to validate the general applicability of the framework and improving the formal definition of the concepts to guide consistent use of the approach and enable tool support
282,Yang 2015,Identification and classification of requirements from app user reviews,Consensus,282,Identification and Classification of Requirements from App User Reviews,2015,"Review function, as a feedback mechanism from users to developers and vendors, is provided by most APP distribution platforms that allow users to rate and comment an APP after using it. User reviews are recognized as a valuable source to improve APPs and increase the value for users. With the sharp increase in the amount of user reviews, how to effectively and efficiently analyze the user reviews and identify potential and critical user needs from them to improve the APPs becomes a challenge. In this paper, we propose an approach to automatically identify requirements information and further classify them into functional and non-functional requirements from user reviews, using a combination of information retrieval technique (TF-IDF) and NLP technique (regular expression) with human intervention in keywords selection for requirements identification and classification. We validated the proposed approach with the user reviews collected from a popular APP iBooks in English App Store, and further investigated the cost and return of our approach: how the size of sample reviews for keywords selection (cost) affects the classification results in precision, recall, and F-measure (return). The results show that when setting an appropriate size of sample reviews, our approach receives a relatively stable precision, recall, and F-measure of requirements classification, in particular for non-functional requirements, which is meaningful and practical for APP developers to elicit requirements from user reviews​",China,Conference ,Proceedings of the International Conference on Software Engineering and Knowledge Engineering (SEKE),Experimental Research; Empirical Study ,"To propose an automated approach to identify and classify requirements from user reviews and to investigate how the size of sample reviews for keywords selection affects the classification results in terms of precision, recall, and F-measure",YES,,"TF-IDF with Regular Expressions	",Combines TF-IDF technique and regular expressions to classify user reviews into FRs and NFRs based on keywords extracted and combined using logical relationships and regular expressions​.,Proposed,"J. Ramos, “Using tf-idf to determine word relevance in document queriroceedings of the 1st Instruction	","Requirements Identifier and Classifier	",Automatically identifies and classifies user reviews as FRs or NFRs using the extracted keywords and regular expressions​.,Developed,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,"iBooks User Reviews	","1,000 user reviews from the English App Store	","The dataset consisted of user reviews from the iBooks app, which were manually classified into functional and non-functional requirements. The reviews were used to extract keywords for automated identification and classification using TF-IDF and regular expression techniques​.",,,,,,,,,,,,,,,,YES,"Usability
Reliability
Security
",,"TF-IDF with Regular Expressions	","Uses TF-IDF for keyword extraction and regular expressions for matching requirements against keywords for sub-category classification	",Proposed,"L. Chung, B. Nixon, E. Yu, and J. Mylopoulos, Non-functional Requirements in Software Engineering. Springer, 2000 ments Identifier and Classifier	","Requirements Identifier and Classifier	","Classifies user reviews into NFR sub-categories using the extracted keywords	",Developed,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,NO,,"iBooks User Reviews	","1,000 user reviews from the English App Store	","The dataset consisted of user reviews from the iBooks app, which were manually classified into functional and non-functional requirements. The reviews were used to extract keywords for automated identification and classification using TF-IDF and regular expression techniques​.",,,,,,,,,,,,,,,,,,,NO,"Validate the approach with user reviews of APPs from other domains and languages.
Prioritize identified requirements based on various factors such as rating information and length of user review.
Explore relationships between functional and non-functional requirements through source analysis ."
279,Zhang 2011,An empirical study on classification of non-functional requirements,Consensus,279,"
An Empirical Study on Classification of Non-Functional Requirements.",2011,"Petri nets are a formal, graphical and executable modeling technique for the specification and analysis of concurrent systems and have been widely applied in computer science and many other engineering disciplines. Low-level Petri nets are simple and useful for modeling control flows; however, they are not powerful to define data and system functionality. High-level Petri nets were developed to support data and functionality definitions [1]. To support the practical applications of Petri nets formalism, tools for designing and executing Petri nets are necessary. Although there are many existing tools for supporting low-level Petri nets [5], few tools are available for high-level Petri nets. There is especially a lack of tools to support high-level Petri net notation proposed in the international standard [1]. In this paper, we present a tool, called PIPE+*, to support a subset of high-level Petri nets proposed in [1]. PIPE+ is built upon an existing low-level Petri net tool PIPE (Platform Independent Petri Net Editor) [2]. This paper describes the functionality of PIPE+ as well as illustrates the process of extending PIPE, which provides helpful insights for others to create Petri net tools suit their own needs. Furthermore, PIPE+ is an open-source tool and thus is available for various enhancements from the worldwide research community",USA,Conference ,"Presented at the 23rd Latin American Conference on Informatics (CLEI 2007), San Jose, Costa Rica.",Empirical Study ,"The study aims to empirically evaluate classification schemes for distinguishing between functional requirements and non-functional requirements within software engineering, focusing on their effectiveness in real-world applications.
",NO,," Various classification techniques are referenced, but specific names are not provided.","The study discusses different methods used in previous research to categorize requirements, focusing on how they distinguish between functional and non-functional requirements.",Referenced,"Bonet, P., Llado, C. M., & Puigjaner, R. (2007). PIPE v2.5: A Petri Net tool for performance modeling. Proceedings of the 23rd Latin American Conference on Informatics (CLEI 2007), San Jose, Costa Rica, October 2007.
Reisig, W. (1985). Petri nets: An introduction. Springer-Verlag, New York, Inc.
",NO,NO,NO,NO,NO,PIPE+ is discussed as an associated tool but is not specifically for requirement classification," PIPE+ is used to simulate Petri nets, which can be associated with the classification techniques discussed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Performance
Reliability
Usability
Security",,No specific names are provided.,"The paper discusses the categorization of NFRs into sub-categories such as performance, reliability, usability, and security, based on existing literature.",Referenced,"Milner, R., Tofte, M., Harper, R., & MacQueen, D. (1997). The definition of Standard ML. MIT Press, Cambridge, MA.
Jensen, K., Kristensen, L. M., & Wells, L. (2007). Coloured Petri nets and CPN tools for modelling and validation of concurrent systems. International Journal on Software Tools for Technology Transfer.",NO,NO,NO,NO,NO,CPN Tools is discussed as an associated tool but is not specifically for requirement classification.,"CPN Tools is used for modeling and validating Petri nets, which can be related to the categorization techniques discussed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenge: The main challenge mentioned is the difficulty in consistently distinguishing between functional and non-functional requirements due to overlapping characteristics.
Addressing the Challenge: The study suggests refining classification schemes and incorporating more empirical data to improve the accuracy and reliability of the classification process.",NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,"Context: The study briefly mentions the importance of clear documentation for NFRs to ensure they are properly classified and managed during the software development process.
Proposals: The study suggests that better tools and techniques for presenting NFRs can aid in their classification, but no specific proposal is provided.","The study suggests further empirical research to test and refine the classification schemes for NFRs.
The development of more sophisticated tools to assist in the classification and documentation of NFRs."
275,Li 2022,Automatically classifying non-functional requirements using deep neural network,Consensus,275,"Automatically classifying non-functional requirements using deep neural network""",2022,"Non-functional requirements are property that software products must have in order to meet the user’s business requirements, and are additional constraints on the quality and characteristics of software systems. They are generally written by software designers and documented in various parts of requirements documentation. When developing systems, developers need to classify non-functional requirements from requirements documents, and classifying these non-functional requirements requires professional skills, experience, and domain knowledge, which is challenging and time-consuming for developers. It would be beneficial to implement automatic classification of non-functional requirements from requirements documents, which could reduce the manual, time, and mental fatigue involved in identifying specific non-functional requirements from a large number of requirements. In this paper, a deep neural network model called NFRNet is designed to automatically classify non-functional requirements from software requirement documents. The network consists of two parts. One is an improved BERT word embedding model based on N-gram masking for learning context representation of the requirement descriptions, and the other is a Bi-LSTM classification network for capturing context information of the requirement descriptions. We use a Softmax classifier in the end to classify the requirement descriptions. At the same time, in order to accelerate the training and improve the generalization ability of the model, the network uses multi-sample dropout regularization technology. This new regularization technology can reduce the number of iterations needed for training, accelerate the training of deep neural networks, and the networks trained achieved lower error rates.",China,Journal,"Pattern Recognition
",Experimental Research; Empirical Study ; Design Science Research,"to design a deep neural network model called NFRNet to automatically classify non-functional requirements from software requirement documents, improving accuracy and efficiency over traditional methods.",NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Accessibility
Adaptability
Auditability
Availability
Backup
Capacity
Cost
Data Integrity
Data Retention
Disaster Recovery
Escrow
Fault Tolerance
Internationalization and Localization
Interoperability
Legal
Look and Feel
Maintainability
Open Source
Operational
Performance
Privacy
Readability
Reliability
Response Time
Reusability
Robustness
Scalability
Security
Stability
System Integrability
Testability
Usability",,NFRNet,"A deep neural network model combining BERT with N-gram masking and Bi-LSTM to classify NFRs into sub-categories	",Proposed,NO,"NFRNet	","Utilizes BERT word embeddings, Bi-LSTM for context capture, and Softmax classifier for predictions	",Developed,Proposed,NO,"PROMISE, SOFTWARE NFR	","General-purpose datasets used for validation
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,NO,,"PROMISE dataset	","Contains 370 non-functional requirements description sentences.
","Used as a benchmark dataset for initial validation and testing
","SOFTWARE NFR dataset	","An expanded dataset designed specifically for the study, containing 6,222 requirement description sentences.
","An expanded dataset designed to test scalability and robustness of the proposed NFRNet model
",,,,,,,,,,,,,,,,NO,"The study suggests exploring further optimizations in deep neural network architectures for NFR classification and the use of more diverse datasets to enhance the generalization of the model.
"
274,Rahman 2023,Pre-Trained Model-Based NFR Classification: Overcoming Limited Data Challenges,Consensus,274,Pre-Trained Model-Based NFR Classification: Overcoming Limited Data Challenges,2023,"Machine learning techniques have shown promising results in classifying non-functional requirements (NFR). However, the lack of annotated training data in the domain of requirement engineering poses challenges to the accuracy, generalization, and reliability of ML-based methods, including overfitting, poor performance, biased models, and out-of-vocabulary issues. This study presents an approach for the classification of NFR in software requirements specification documents by extracting features from word embedding pre-trained models. The novel algorithms are specifically designed to extract relevant representative features from pre-trained word embedding models. In addition, each pre-trained model is paired with four tailored neural network architectures for NFR classification, resulting in twelve unique models. The results show that integrating pre-trained GloVe models with RPBiLSTM demonstrates the highest performance, achieving an average AUC score of 96%, a precision of 85%, and recall of 82%, highlighting its strong ability to accurately classify NFRs. Integration with other pre-trained models also yielded competitive results, providing a practical solution for effectively analyzing and classifying NFRs, thereby facilitating improved software development practices.","Pakistan
Saudi Arabia
United Arab Emirates ",Journal, IEEE Access,Experimental Research; Empirical Study ; Design Science Research; Quantitative Research,To enhance the classification of Non-Functional Requirements (NFR) by extracting and optimizing features from pre-trained word embedding models to improve model performance and mitigate issues such as overfitting and out-of-vocabulary errors caused by limited supervised datasets in the field of Requirements Engineering.,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Maintainability
Operability
Performance
Security
Usability",,"Neural Network Architectures integrated with pre-trained models (GloVe, Word2Vec, FastText)	
RPCNN, RPBiLSTM, RPLSTM, RPANN	","Techniques are used to classify NFRs into sub-categories based on extracted features from pre-trained models.	",Proposed,NO,NO,NO,NO,NO,NO,"Python, TensorFlow, Keras	","Used for implementation
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenges:
Limited annotated datasets
Overfitting due to small data size
Out-of-vocabulary issues
Addressed By:
Using pre-trained models and data augmentation techniques
Employing k-fold cross-validation and early stopping criteria
",NO,," International Requirements Engineering Conference’s 2017 Data Challenge dataset, Predictor Models in Software Engineering Dataset (PROMISE).","These datasets were combined to form a total of 1,165 unique NFRs categorized into 14 categories.","The study employed undersampling strategies and focused on a subset of five categories: maintainability, operability, performance, security, and usability.",,,,,,,,,,,,,,,,,,,NO,"Explore training models on unsupervised domain-specific corpora such as requirement specification documents and then fine-tuning on supervised datasets to improve performance, reliability, and generalizability of NFR classification."
273,Handa 2022,Framework for prediction and classification of non functional requirements: a novel vision,Consensus,273,Framework for prediction and classification of non functional requirements: a novel vision,2022,"Requirement Engineering has radicalized data analytics by playing a pivotal role in planning requirements strategies and activities. It has emerged as a leading domain of software engineering that branches into 2 categories, namely functional requirements (FRs) and non-functional requirements (NFRs). Functional Requirements have gained eminence and prominence while NFRs have always faced a step-sisterly treatment. It is evident from the literature review that NFRs are very crucial but often not considered appropriately, resulting in system failures. The present study proposes an automated system for efficient NFRs prediction. The proposed system consists of 4 layers for the prediction of NFRs' significance, including Data acquisition layer (DA), feature selection and extraction layer (FSE), data extraction and mining layer (DEM), and data analysis and visualization layer (DAV). Moreover, the current research considers the probability measure of the level of NFR significance in terms of LoNFRS, which is cumulatively quantified as NFRs significance measure (NFRINDEX). NFRINDEX has been quantified for prediction purposes using a convolution neural network (CNN). Additionally, the existence of NFRs is visualized based on a self-organized mapping (SOM) procedure. To validate the proposed system, a primary dataset is collected from several IT professionals and academicians. The NFRs dataset of 312 IT professionals and academicians has been gathered for 17 attributes resulting in 5304 instances. Numerous experimental simulations were performed to assess performance in terms of classification, reliability, stability, feature selection, and prediction efficiency.",India,Journal,"Cluster Computing, Springer Nature",Experimental Research; Empirical Study ,To propose an automated system for efficient prediction and classification of non-functional requirements (NFRs).,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Performance
Usability
Security
Time
Accessibility",,"CNN (Convolution Neural Network)	","Used for prediction purposes; quantifies NFR significance	",Proposed,NO,NO,NO,NO,NO,NO,"M-LSTM	","Combined for enhancing predictive model efficiency
","SOM (Self Organized Mapping)	","Visualization of NFRs significance	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,"M-LSTM	","Applied for feature extraction in classification tasks	","Proposed	","Rahman et al. (2020) - ""An ensemble machine learning technique for functional requirement classification""	","NFRFinder	","Semi-automated software technique for mining keywords in unstructured text	",Developed,Referenced,"NLP frameworks	","NLP-related tools	","NLP model customization for NFR classification tasks
","Logistic Regression + TF-IDF	","Uses TF-IDF for feature selection in M-DL techniques	",Referenced,"Naseem, R., Shaukat, Z., Irfan, M., Shah, M.A., Ahmad, A., Muhammad, F., Glowacz, A., Dunai, L., Antonino-Daviu, J., Sulaiman, A. (2021). ""Empirical assessment of machine learning techniques for software requirements risk prediction."" Electronics, 10(2), 168.",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,"The difficulty in eliciting NFRs due to their diverse, subjective, and sometimes contradictory nature.
Challenges in achieving completeness and accuracy in the dataset collected from various IT professionals and academicians.
How to address the challenge: The study suggests the use of advanced machine learning techniques like CNN and M-LSTM for better classification and prediction outcomes.","Type of Nonfunctional Requirement: Performance, Security, Usability
Details of Case Study: Analyzed datasets from PROMISEexp repository and Google forms data collected from IT professionals .
Type of Case Study: Empirical case studies based on real-world datasets .",,"eProcurement dataset, PROMISEexp repository dataset, data from Google forms . (NFR Dataset	)",5304,"Used for classification and prediction tasks. Collected from 312 IT professionals and academicians, including 17 attributes.

Used for evaluating the efficiency of the classification models and techniques .
",,,,,,,,,,,,,,,,,,,"Yes, the study discusses the visualization of NFRs using the Self Organized Mapping (SOM) technique.
Context: Used for visualizing the prediction and classification of NFRs' significance .
Proposal: The study proposes using SOM for visual analysis of NFR significance to aid developers in decision-making ","Development of a recommendation system for NFRs.
Exploration of NFRs prioritization techniques."
272,Vijayvargiya 2022,Software Requirements Classification using Deep-learning Approach with Various Hidden Layers,Consensus,272,Software Requirements Classification using Deep-learning Approach with Various Hidden Layers,2022,"Software requirement classification is becoming increasingly crucial for the industry to keep up with the demand of growing project sizes. Based on client feedback or demand, software requirement classification is critical in segregating user needs into functional and quality requirements. However, because there are numerous machine learning (ML) and deep-learning (DL) models that require parameter tuning, the use of ML to facilitate decision-making across the software engineering pipeline is not well understood. Five distinct word embedding techniques were applied to the functional and quality software requirements in this study. The imbalanced classes in the dataset are balanced using Synthetic Minority Oversampling technique (SMOTE). Then, to reduce duplicate and unnecessary features, feature selection and dimensionality reduction techniques are used. Dimensionality reduction is accomplished with Principal Component Analysis (PCA), while feature selection is accomplished with the Rank-Sum Test (RST). For binary categorization into functional and non-functional needs, the generated vectors are provided as inputs to eight distinct Deep Learning classifiers. The findings of the research show that using a combination of word embedding and feature selection techniques in conjunction with various classifiers can accurately classify functional and quality software requirements.
","India
Norway",Conference , Proceedings of the 17th Conference on Computer Science and Intelligence Systems.,Experimental Research; Empirical Study ,"To develop highly accurate software requirements classification models that can reliably be used in the industry to segregate user needs into functional and non-functional requirements using various deep learning classifiers, word embedding techniques, feature selection, and class balancing techniques.",YES,,"Word Embedding Techniques	","TF-IDF, Continuous Bag of Words (CBOW), Skip-Gram (SKG), Global Vectors for Word Representation (GLOVE), and Google News Word to Vector (W2V)	","Referenced	","[1] N. V. Chawla et al., ""SMOTE: synthetic minority over-sampling technique,"" Journal of artificial intelligence research, vol. 16, pp. 321–357, 2002.	",NO,NO,NO,NO,NO,"General-purpose tools (e.g., Python libraries)	","Used to implement word embedding techniques.
","Feature Selection Techniques	","Rank-Sum Test (RST) and Principal Component Analysis (PCA)	","Referenced	","[2] S. Tiun et al., ""Classification of functional and non-functional requirement in software requirement using word2vec and fast text,"" Journal of Physics, 2020.	",NO,NO,NO,NO,NO,"General-purpose tools (e.g., Python libraries)	","Used to implement word embedding techniques.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"AI Techniques Used: Eight Deep Learning (DL) classifiers including DL1 to DL8, with different layer configurations. These models use neural networks trained with optimizers such as ADAM.
How AI is Used: AI is used to train classifiers that categorize software requirements into functional and non-functional requirements. Techniques like word embeddings (TF-IDF, CBOW, SKG, GLOVE, W2V), feature selection (Rank-Sum Test, PCA), and class balancing (SMOTE) are employed before training the models using DL classifiers.
AI Tools Used: Python libraries and frameworks like TensorFlow or Keras for deep learning implementations.",,The PROMISE dataset,625 labeled criteria from 15 different projects.,The dataset is used to train and validate the classifiers. SMOTE was applied to balance the imbalanced dataset with 382 instances of quality requirements out of 625 total requirement,,,,,,,,,,,,,,,,NO,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenge: Inconsistency in terminology used by clients and software engineers leads to the misclassification of software requirements.
Proposed Solution: Use AI techniques like deep learning classifiers to automate the classification process, reducing dependency on manual classification by domain experts",NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,NO,"Future research can extend this work by classifying requirements into subcategories of functional and non-functional requirements. Additionally, researchers can focus on other parts of the software development pipeline and utilize the developed models for the requirements classification step"
269,Younas 2019,An automated approach for identification of non-functional requirements using Word2Vec model,Consensus,269,An Automated Approach for Identification of Non-Functional Requirements using Word2Vec Model,2019,"Non-Functional Requirements (NFR) are embedded
in functional requirements in requirements specification docu-
ment. Identification of NFR from the requirement document is a
challenging task. Ignorance of NFR identification in early stages
of development increase cost and ultimately cause the failure of
the system. The aim of this approach is to help the analyst and
designers in architect and design of the system by identifying NFR
from the requirements document. Several supervised learning-
based solutions were reported in the literature. However, for accu-
rate identification of NFR, a significant number of pre-categorized
requirements are needed to train supervised text classifiers and
system analysts perform the categorization process manually.
This study proposed an automated semantic similarity based
approach which does not needs pre-categorized requirements
for identification of NFR from requirements documents. The
approach uses an application of Word2Vec model and popular
keywords for identification of NFR. Performance of approach is
measured in term of precision-recall and F-measure by applying
the approach to PROMISE-NFR dataset. The empirical evidence
shows that the automated semi-supervised approach reduces
manual human effort in the identification of NFR.","Pakistan
Iraq
Malaysia",Journal, International Journal of Advanced Computer Science and Applications (IJACSA),Experimental Research; Empirical Study ; Quantitative Research,To develop an automated approach for the identification of non-functional requirements from natural language-based software requirement specification documents using semantic similarity and pre-processing methods.,YES,,"Word2Vec Model	","The Word2Vec model was used to calculate semantic similarity for identifying non-functional requirements. It relies on a vector space model and neural network for semantic embedding of terms.	","Proposed	","Mikolov, T., Chen, K., Corrado, G., & Dean, J. (2013). Efficient Estimation of Word Representations in Vector Space. arXiv preprint arXiv:1301.3781.
",NO,NO,NO,NO,NO,"Gensim	","Used to train Word2Vec model using Wikipedia dump for pre-trained vectors.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"AI Technique Used: Word2Vec Model
Details on How AI is Used: The Word2Vec model is used to create word embeddings for semantic similarity calculation, which helps in distinguishing between functional and non-functional requirements.
AI Tools Used: Gensim (to train Word2Vec model)",,"PROMISE-NFR Dataset	","15 requirement specifications (625 requirements: 255 FR, 370 NFR)	","Used to train and validate the classification model.
",,,,,,,,,,,,,,,,YES,"Availability
Fault tolerance
Legal
Look and feel
Maintainability
Operational
Performance
Portability
Scalability
Security
Usability",,"Semantic Similarity using Word2Vec	","Utilizes the Word2Vec model to compute semantic distances between keywords and text to classify NFR into sub-categories.	","Proposed	","Goldberg, Y., & Levy, O. (2014). word2vec Explained: Deriving Mikolov et al.'s Negative-Sampling Word-Embedding Method. arXiv preprint arXiv:1402.3722.",NO,NO,NO,NO,NO,Gensim,"Used for training Word2Vec on the Wikipedia dataset.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenge 1: The model may not perform well on datasets outside the PROMISE dataset due to reliance on specific indicator keywords.
Challenge 2: Some labeling in the dataset may be biased or incorrect, affecting classification performance.
Challenge 3: Word2Vec's reliance on the Wikipedia vocabulary bank may limit performance if relevant words are missing from the vocabulary.",NO,,"PROMISE-NFR Dataset	","15 requirement specifications (625 requirements: 255 FR, 370 NFR)	","Used to train and validate the classification model for sub-categories.
",,,,,,,,,,,,,,,,,,,NO," Development of a fully unsupervised approach to extract indicator terms through clustering or unsupervised techniques, making the model completely independent of manual keyword selection."
268,Saroth 2024,Automatic Multi-Class Non-Functional Software Requirements Classification Using Machine Learning Algorithms,Consensus,268,Automatic Multi-Class Non-Functional Software Requirements Classification Using Machine Learning Algorithms.,2024,"A successful software development process depends on software requirements. Those requirements are often classified into two categories: functional requirements (FR) and non-functional requirements (NFR). In software development, NFRs play a crucial role, but they are often forgotten by developers. Therefore, it causes adverse consequences. As a result, an NFR classification method is required to assist software developers in classifying NFR from requirement documents. The majority of research in this area focuses on categorizing requirements as FR or NFR. However, NFR can be divided into more than two categories. As a result, a multi-label categorization strategy was required. This study presented an approach for categorizing NFR based on product, process, and external factors. To categorize the NFR, the authors developed four machine learning-based algorithms entitled Logistic Regression (LR), Support Vector Machine (SVM), Decision Tree (DT), and K Nearest Neighbor Classifier (KNN) classifier, as well as one deep learning method named Long Short-Term Memory (LSTM) model. Ultimately, the authors examine the models and conclude that the LSTM model, which gained an accuracy of 99.69%, is appropriate for this type of classification.",Sri Lanka,Conference ,2024 International Research Conference on Smart Computing and Systems Engineering (SCSE),Experimental Research; Empirical Study ,"To leverage machine learning techniques to automate and improve the classification of non-functional requirements (NFRs) into three categories: product, process, and external, leading to time savings, increased accuracy, scalability, and enhanced decision-making support for software development teams.",NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Product-Related (Performance, Portability, Security, Usability, Look & Feel)
Process-Related (Scalability, Maintainability)
External-Related (Availability, Fault Tolerance, Legal, Operational)",,"Logistic Regression (LR)	","A supervised learning classification algorithm that predicts a binary outcome based on previous findings of a dataset. It is commonly used for requirement classification to distinguish different types of requirements.	",Proposed,NO,LR,"Predicts binary outcomes for requirement classification tasks, useful in distinguishing various requirement types. Proposed and validated in this study.	",Developed,Proposed,NO,NO,NO,"Support Vector Machine (SVM)		","A linear model for classification and regression problems. SVM is suited for various scenarios and can handle both linear and nonlinear problems. It aims to generate a line or hyperplane that separates data into different classes.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,"Decision Tree (DT)	","A machine learning method that splits a dataset into smaller subsets based on attributes, similar to a flowchart structure. Nodes in the graph display features, branches represent decision rules, and leaf nodes show results.	",Proposed,"NO	","NO	","NO	","NO	","NO	","NO	","NO	",NO,"K Nearest Neighbor Classifier (KNN)	","A supervised learning algorithm that places new examples in categories similar to the available categories after assuming similarity between the new and available cases. It uses distance metrics to classify new data points based on their proximity to known points.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,"Long Short-Term Memory (LSTM) Model	","A deep learning model designed for handling long-term dependencies in sequential data. LSTM networks are useful for learning from and predicting sequential data, making them applicable for tasks such as natural language processing and time series prediction.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,NO,NO,,Kaggle,"NFR dataset collected from Kaggle website, consisting of 2950 different records.
",The dataset was used to train and test the machine learning models for classifying non-functional requirements into sub-categories.,"Local software companies in Sri Lanka	","NFR dataset collected from various local software companies in Sri Lanka, consisting of 2950 different records.", It was used alongside the Kaggle dataset for training and validating the machine learning models.,,,,,,,,,,,,,,,,NO,"The study suggests applying the newest word embedding methods for the LSTM model, such as Glove, Wordvec2, and BERT. Additionally, future research may continue by classifying NFRs into different categories, such as security, usability, availability, etc."
267,Marinho 2018,A systematic approach of dataset definition for a supervised machine learning using NFR framework,Consensus,267,A Systematic Approach of Dataset Definition for a Supervised Machine Learning Using NFR Framework.,2018,"Non-functional requirements describe important constraints upon software development and should be considered and specified as early as possible during system analysis. Effective elicitation of requirements is among the most important recommended RE practices. Recent research shows that AI techniques like Machine Learning and Text Mining perform automatic extraction and classification of quality attributes from text documents with relevant results. This paper aims to define a systematic process of dataset generation through NFR Framework catalogues, improving NFR’s classification process using Machine Learning techniques. A well-known dataset (Promise) was used to evaluate the precision of our approach, achieving interesting results. For security and performance, we obtained a precision and recall ranging between ~85% and ~98%. F1 score was above ~79% when classifying security, performance, and usability together.",Brazil,Conference ,2018 International Conference on the Quality of Information and Communications Technology (QUATIC) .,Experimental Research; Empirical Study ; Systematic Review,"To define a systematic process for dataset generation using keywords extracted from SIG Catalogues, generating a dataset for supervised machine learning classification with rationale and reasoning according to the NFR Framework .",NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Security
Performance
Usability",,"NFR Framework and SIG Catalogue Keywords	","Use of NFR Framework's SIG catalogues for keyword extraction to classify non-functional requirements through machine learning.	Extraction of keywords from SIG catalogues to distinguish non-functional requirements into categories such as security, performance, and usability.	",Proposed,"L. Chung et al. Nonfunctional Requirements in Software Engineering, 2000	",NO,NO,NO,NO,NO,SciKit tool (http://scikit-learn.org),"Used to implement and test the classification scheme.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,NO,,"Promise Dataset	","187 sentences related to security, performance, and usability.	","Used as a training dataset for the machine learning classifier to evaluate classification accuracy.
",,,,,,,,,,,,,,,,,,,NO,"The study suggests expanding the dataset by adding more catalogues and sweeping a greater number of indexing portals to obtain papers that contain NFR catalogues.
"
266,Alashqar 2022,"Studying the commonalities, mappings and relationships between non-functional requirements using machine learning",Consensus,266,"Studying the Commonalities, Mappings, and Relationships between Non-Functional Requirements using Machine Learning ",2022,"Studying the interactions and relationships between non-functional requirements (NFRs) is important when developing software applications. This is because a specific NFR may conflict, overlap, or complement other NFRs. Moreover, one NFR may include characteristics and features of other NFRs. Most of the current studies focused on classifying NFRs into distinct different categories without considering the common characteristics or the relationships between these categories. This paper provides a study on how the results of various machine learning (ML) classifiers can be visualized and analyzed with the help of confusion matrices and principal component analysis (PCA) tools in order to examine the commonalities, mappings, and relationships between NFRs. And to define which NFRs are mostly distinct and which NFRs are mostly overlapping. The paper also defines which ML classifier achieves the best performance through various classifications of NFRs. The experiments were performed using five different ML classifiers on the newly expanded PROMISE dataset and the achievements of these classifiers are evaluated based on precision, recall, and F1-Score metrics. The results of this research help practitioners and researchers in the field of software engineering to pay more attention to the behavior of various NFRs.",Palestine,Journal,Science of Computer Programming,Experimental Research; Empirical Study ,"Study the commonalities, mappings, and relationships between non-functional requirements (NFRs) using machine learning techniques, and to define which NFRs are mostly distinct and which are mostly overlapping",NO,,NO, NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"	•	Availability
	•	Fault Tolerance
	•	Legal & Licensing
	•	Look & Feel
	•	Maintainability
	•	Operability
	•	Performance
	•	Portability
	•	Scalability
	•	Security
	•	Usability .",,Support Vector Machines (SVM),"SVM was used to classify NFRs into sub-categories based on their features. The study applied this technique to identify distinct and overlapping NFRs, using confusion matrices and PCA to analyze results.",Proposed,NO,NO,NO,NO,NO,NO,Python ML libraries,"Used for implementing machine learning models
",Random Forest (RF),"The study used RF to classify NFRs into sub-categories, focusing on analyzing the commonalities, mappings, and relationships between NFRs using confusion matrices and PCA.",Proposed,NO,NO,NO,NO,NO,NO,Python ML libraries,Used for implementing machine learning models,Principal Component Analysis (PCA),PCA was used to reduce the dimensionality of the dataset and visualize the relationships between NFRs to identify which NFRs are distinct and which are overlapping.,Proposed,NO,NO,NO,NO,NO,NO,Python ML libraries,Used for data analysis and visualization,Confusion Matrix,"The confusion matrix was used to analyze the results of the classifiers, providing detailed information on correct and incorrect classifications to help understand NFR relationships.",Proposed,NO,NO,NO,NO,NO,NO,Python ML libraries,Used for data analysis and visualization,,,,,,,,,,,,,,,,,,,,,,,"The study highlights the challenge of handling overlapping NFRs, particularly how classifiers often misclassify NFRs with similar features, such as Portability and Operability. This challenge was addressed by mapping overlapping NFRs to a single category to improve classification accuracy ",NO,,PROMISE_Exp,"525 NFRs labeled into 11 classes	",Used to train and evaluate multiple ML classifiers for classifying NFRs into sub-categories,,,,,,,,,,,,,,,,,,,NO,The study suggests extending the research by conducting more experiments with a larger dataset of labeled NFRs and using different data sources. The authors also recommend using additional machine learning classifiers and exploring deep learning classification approaches 
265,Chatterjee 2021,A Pipeline for Automating Labeling to Prediction in Classification of NFRs,Consensus,265,A Pipeline for Automating Labeling to Prediction in Classification of NFRs,2021,"Non-Functional Requirements (NFRs) focus on the operational constraints of the software system. Early detection of NFRs enables their incorporation into the architectural design at an initial stage, a practice obviously preferable to expensive refactoring at a later stage. Automated identification and classification of NFRs has therefore seen numerous efforts using rule-based, machine learning, and deep learning-based approaches. One of the major challenges for such automation is the manual effort that needs to be invested into labeling training data. This is a concern for large software vendors who typically work on various applications in diverse domains. We address this challenge by designing a pipeline that facilitates classification of NFRs using only a limited amount (~20% of an available new dataset) of labeled data for training. We (1) employed Snorkel to automatically label a dataset comprising NFRs from various Software Requirement Specification documents, (2) trained several classifiers using it, and (3) reused these pre-trained classifiers using a Transfer Learning approach to classify NFRs in industry-specific datasets. From among the various language model classifiers, the best results have been obtained for a BERT-based classifier fine-tuned to learn the linguistic intricacies of three different domain-specific datasets from real-life projects.",India,Conference ,2021 IEEE 29th International Requirements Engineering Conference (RE).,Experimental Research; Empirical Study ,to automate the classification of non-functional requirements (NFRs) using a limited amount of labeled training data (~20% of a new dataset) by employing a pipeline that utilizes Snorkel for data labeling and pre-trained classifiers with Transfer Learning techniques.,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Availability
Fault Tolerance
Look and Feel
Maintainability
Operational
Performance
Legal
Scalability
Security
Usability",,Snorkel,"Utilizes labeling functions and weak supervision to classify NFRs into subcategories	",Referenced,"Ratner et al., 2019; Snorkel Intro Tutorial, 2021
",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenge: Unequal class-wise distribution of NFRs in datasets of different domains. Some NFR classes are not prevalent in certain domains, leading to very low counts (as low as 1) in the training dataset.
How to Address: Future work suggests making models resilient to such class imbalances, possibly through techniques like Instance Transfer, which uses re-weighted training instances from the source domain in the target domain.",NO,,"PROMISE Dataset	","A collection of NFRs classified into 10 NFR categories	","Used as a benchmark for training classifiers
","Publicly Available Dataset (PAD)	","70 open-source SRS documents and 30 industry-specific datasets	","Used for fine-tuning classifiers
",,,,,,,,,,,,,,,,NO,"Make models resilient to class imbalances by exploring Instance Transfer techniques.
Extend experiments on more diverse industry-specific datasets to improve generalizability."
264,Kaur 2024,SABDM: A self-attention based bidirectional-RNN deep model for requirements classification,Consensus,264,Comparative Analysis for Predicting Non-Functional Requirements using Supervised Machine Learning,2021,"Functional and non-functional 
requirements are two important aspects of the requirements 
gathering phase (RGP) in any system development lifecycle 
(SDLC) model. The FRs are much simpler to understand and 
easily extractable from the user stories at RGP. On the other 
hand, the non-functional requirements (NFRs) are critical but 
play a significant role to improve the quality of the product and 
are used in determining the acceptance of a designed system. 
Inside the NFR, several quality factors focus on the specific 
quality attribute of a system, like security, performance, 
reliability, etc. To classify the NFRs for each category is a 
challenging task. This paper mainly focuses on the prediction 
of the requirements classification of NFRs by using supervised 
machine learning (ML) algorithms followed by comparative 
analysis on five different ML algorithms: decision tree, k-
nearest neighbor (KNN), random forest classifier (RFC), naïve 
Bayes and logistic regression (LR). The study has been 
conducted in two phases. In the first phase, the model has been 
designed which accepts a dataset containing textual data where 
11 quality attributes are focused for prediction, and evaluation 
is done based on 15% of test data and 85% of training data, 
while in the second phase, the performance of each algorithm is 
evaluated based on four different evaluation metrics: precision, 
recall, accuracy, and confusion matrix. The exhaustive results 
of the comparative analysis demonstrate that the performance 
of the LR algorithm is the best of all algorithms with very high 
prediction rates and 75% accuracy. Besides, the naïve Bayes 
resulted in 66% accuracy at second place, the decision tree 
provided 60% accuracy and marked third, the RFC with 53% 
accuracy being at fourth, and KNN with 50% accuracy being 
lowest of all. The LR algorithm should be preferred for the 
prediction of the classification of NFRs","Pakistan
Saudi Arabia.",Conference ,2021 1st International Conference on Artificial Intelligence and Data Analytics (CAIDA).,Experimental Research; Empirical Study ; Other: Comparative Study ,"To classify non-functional requirements (NFRs) using five different machine learning algorithms and evaluate their performance using four metrics: precision, recall, accuracy, and confusion matrix.",YES,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Name of the AI techniques: Decision Tree, K-Nearest Neighbor (KNN), Random Forest Classifier (RFC), Naïve Bayes, Logistic Regression (LR).
How AI is used to classify between functional and non-functional requirements:
The study uses supervised machine learning algorithms to predict and classify non-functional requirements (NFRs) based on labeled training data. Each algorithm analyzes the textual features of requirements to determine their categorization as either functional or non-functional.
Name of the AI tools used: Python libraries such as scikit-learn.",,,,,,,,,,,,,,,,,,,,YES,"Security
Performance
Usability
Availability
Look and Feel
Legal
Maintainability
Scalability
Operability
Portability
Fault Tolerance",,"Supervised Machine Learning Algorithms	","Supervised ML algorithms (Decision Tree, KNN, RFC, Naive Bayes, LR) used for automatic classification of requirements.	","Proposed	",NO,NO,NO,NO,NO,NO,"Python libraries (scikit-learn)	","Used for implementing the classification scheme
","Decision Tree	","Used to classify non-functional requirements based on textual data.	","Proposed	",NO,NO,NO,NO,NO,NO,"Python libraries (scikit-learn)	","Used for implementing the classification scheme
","K-Nearest Neighbor (KNN)	","Applied to classify requirements based on proximity to known categories.	","Proposed	",NO,NO,NO,NO,NO,NO,"Python libraries (scikit-learn)	","Used for implementing the classification scheme
","Random Forest Classifier (RFC)	","Utilizes multiple decision trees to classify requirements with improved accuracy.	","Proposed	",NO,NO,NO,NO,NO,NO,"Python libraries (scikit-learn)	","Used for implementing the classification scheme
","Naïve Bayes	","A probabilistic approach to predict the category of requirements using the Bayes theorem.	","Proposed	",NO,NO,NO,NO,NO,NO,"Python libraries (scikit-learn)	","Used for implementing the classification scheme
","Logistic Regression (LR)	","Determines the probability of a requirement being in a specific category; identified as the best-performing algorithm.	","Proposed	",NO,NO,NO,NO,NO,NO,"Python libraries (scikit-learn)	","Used for implementing the classification scheme
","Challenges: The main challenge is the ambiguity and overlap between different types of non-functional requirements, making it difficult for machine learning algorithms to classify them accurately.
How to address: Utilizing more advanced machine learning techniques and increasing the size and diversity of the dataset could help in mitigating these challenges.",NO,,"Publicly available dataset (NFR2)	",NO,"Used to train and test the supervised machine learning algorithms for classifying requirements into FRs and NFRs
",,,,,,,,,,,,,,,,,,,NO,Further comparative analysis of additional machine learning algorithms to identify the optimal approach for NFR classification
263,Kaur 2022,BERT-CNN: Improving BERT for Requirements Classification using CNN,Consensus,263,BERT-CNN: Improving BERT for Requirements Classification using CNN,2023,"Requirements classification is considered a crucial task in requirements engineering. The analysis of functional and Non-functional requirements (NFRs) requires domain knowledge. NFRs are considered quality attributes that hold critical information about the constraints upon which the success of software depends. Usually, requirements are expressed in natural language, and extraction and classification of such requirements become a challenging task. Various automatic techniques for requirements classification are exploited by existing studies. Recently, Transfer learning as a new deep learning model attracts the attention of researchers, which excelled in different Natural Language Processing tasks. Transfer learning-based BERT pre-trained model achieved more promising results than state-of-the-art approaches. This proposed research presents a Bidirectional Encoder-Decoder Transformer-Convolutional Neural Network (BERT-CNN) model for requirements classification. Then, the convolutional layer is stacked over the BERT layer for performance enhancement. This research work conducted an experiment on the PROMISE dataset of 625 requirements. The experiment results demonstrate that the proposed model performs better than the state-of-the-art baseline approach",India,Conference ,"Procedia Computer Science, International Conference on Machine Learning and Data Engineering .",Experimental Research; Empirical Study ,to investigate the effect of BERT with CNN on the accuracy of requirements classification. The study aims to enhance the performance of the BERT model by stacking a convolutional layer over it and validating the model's effectiveness using the PROMISE dataset .,YES,,"BERT-CNN	","Bidirectional Encoder-Decoder Transformer-Convolutional Neural Network. Combines BERT with CNN for improved classification of requirements.	","Proposed	","Devlin et al. (2018) ""Bert: Pre-training of deep bidirectional transformers for language understanding."" arXiv preprint arXiv: 1810.04805 .	",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Name of the AI Technique Used: BERT (Bidirectional Encoder Representations from Transformers) combined with CNN (Convolutional Neural Network).
How AI is Used to Classify Between Functional and Non-Functional Requirements: The study proposes the BERT-CNN model, which stacks a convolutional layer over the BERT layer to enhance the performance of requirement classification tasks. BERT is used for word representation and capturing contextual information, while CNN is employed to extract local features from the text.
AI Tools Used: BERT (Base and Large) and CNN.",,"PROMISE Dataset	","625 requirements (255 Functional, 370 NFRs)	","The dataset consists of labeled software requirements. The BERT-CNN model is trained and evaluated on this dataset.
",,,,,,,,,,,,,,,,YES,"Availability
Legal
Look and Feel
Maintainability/Maintenance
Operability
Performance
Scalability
Security
Usability
Fault Tolerance
Portability .
",,"BERT-CNN	","Combines BERT and CNN for classifying non-functional requirements into sub-categories, enhancing accuracy and performance.	",Proposed,"Devlin et al. (2018) ""Bert: Pre-training of deep bidirectional transformers for language understanding."" arXiv preprint arXiv: 1810.04805 .	",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"High dimensionality issues in models reduce their performance.
Manual classification processes are time-consuming and labor-intensive .",NO,,"PROMISE Dataset	","625 requirements (255 Functional, 370 NFRs)	","The dataset is used to train and evaluate the BERT-CNN model for classifying NFRs into sub-categories.
",,,,,,,,,,,,,,,,,,,NO,NO
262,Valdés-Souto 2023,Improving a Model for NFR Estimation Using Band Classification and Selection with KNN,Consensus,262,Improving a Model for NFR Estimation Using Band Classification and Selection with KNN,2023,"Any software development project needs to estimate non-functional requirements (NFR). Typically, software managers are forced to use expert judgment to estimate the NFR. Today, NFRs cannot be measured, as there is no standardized unit of measurement for them. Consequently, most estimation models focus on the functional user requirements (FUR) and do not consider the NFR in the estimation process because these terms are often subjective. The objective of this paper was to show how an NFR estimation model was created using fuzzy logic, and K-Nearest Neighbors classifier algorithm, aiming to consider the subjectivity embedded in NFR terms to solve a specific problem in a Mexican company. The proposed model was developed using a database with real projects from a Mexican company in the private sector. The results were beneficial and better than the initial model considering quality criteria like mean magnitude of relative error (MMRE), standard deviation of magnitude of relative error (SDMRE) and prediction level (Pred 25%). Additionally, the proposed approach allows the managers to identify quantitative elements related to NFR that could be used to interpret the data and build additional models.",Mexico,Journal,Programming and Computer Software,Empirical Study ; Case Study ,Create an NFR estimation model using fuzzy logic and K-Nearest Neighbors (KNN) classifier algorithm to account for the subjectivity of NFRs and improve estimation accuracy in software development projects,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,NO,NO,,"NFR Estimation Model	","The study developed an NFR estimation model using fuzzy logic and KNN classifier to classify NFRs into sub-categories based on their impact on project effort estimation.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"The study discusses the challenge of handling the subjectivity of NFR terms, which are difficult to quantify due to the lack of standardized units of measurement. The fuzzy logic model was applied to address this issue by evaluating subjective variables through a structured process ","Type of Nonfunctional Requirement: Various NFRs related to quality, system environment, and technical requirements.

Details of the Case Study: The case study involved developing an NFR estimation model using real project data from a Mexican company. The study applied fuzzy logic and KNN to classify and estimate the effort required for NFRs at the project level.

Type of Case Study: Industry-based empirical study ￼.",,"Mexican Company Projects	","80 real-world software projects with detailed NFR efforts	",Used to develop and test the NFR estimation model by classifying projects into bands based on NFR efforts​,,,,,,,,,,,,,,,,,,,NO,"The study suggests applying the NFR estimation model to other institutions to validate its functionality, continuously improving the model based on additional data, and exploring different classification methods based on machine learning to compare results"
261,AbdelQader 2019,A novel intelligent model for classifying and evaluating non-functional security requirements form scenarios,Consensus,261,A novel intelligent model for classifying and evaluating non-functional security requirements from scenarios.,2019,"Software requirements with its functional and non-functional methods are the first important phase in producing a software system with free errors. The functional requirements are the visual actions that may easily be evaluated from the developer and from the user, but non-functional requirements are not visual and need a lot of efforts to be evaluated. One of the main important non-functional requirements is security, which focuses on generating secure systems from strangers. Evaluating the security of the system in earlier steps will help to reduce the efforts of revealing critical system threats. Security threats are found because of leaking of security scenarios in the requirement phase. In this paper, we propose an intelligent model to extract and evaluate security features from scenarios based on a set of security system goals and a set of security requirements saved on a rich story scenarios dataset (RSSD). This model will use a support vector machine (SVM) classifier to classify the security requirement based on the RSS dataset. The use of SVM will enhance the overall process of evaluating security requirements. The results show a significant enhancement in security improvements",Jordan,Journal,Indonesian Journal of Electrical Engineering and Computer Science,Experimental Research; Empirical Study ,"To propose a novel intelligent model to classify and evaluate non-functional security requirements from scenarios, using a Support Vector Machine (SVM) classifier to enhance the process of evaluating security requirements.",YES,,"SVM Classifier	","A model to extract, classify, and evaluate security features from scenarios based on RSSD, using SVM.	",Proposed,"Al-Azzani, S., & Bahsoon, R. (2010). Using Implied Scenarios in Security Testing. SESS’10, Cape Town, South Africa. ACM; Shambhu, K. J., & Mishra, R. K. (2018). Predicting and Accessing Security Features into Component-Based Software Development: A Critical Survey. Advances in Intelligent Systems and Computing, vol. 731, pp. 287-294.	",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"AI Technique Used: Support Vector Machine (SVM)
Usage Description: The SVM classifier is used to classify non-functional security requirements based on security goals and keywords extracted from user scenarios.
AI Tools Used: No specific tool mentioned, only SVM is referenced as a technique.",,"RSSD (Rich Story Scenarios Dataset)	",200 data points (user scenarios),"Used to store security requirements and system goals, which are then used in the SVM classification process.
",,,,,,,,,,,,,,,,YES,"Security
Efficiency
Reliability
Functionality
Usability/Utility",,"SVM Classifier	","A model to classify non-functional security requirements under sub-categories using security goals.	","Proposed	","Al-Azzani, S., & Bahsoon, R. (2010). Using Implied Scenarios in Security Testing. SESS’10, Cape Town, South Africa. ACM; Shambhu, K. J., & Mishra, R. K. (2018). Predicting and Accessing Security Features into Component-Based Software Development: A Critical Survey. Advances in Intelligent Systems and Computing, vol. 731, pp. 287-294.	",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenge: Identifying vulnerabilities from unexpected interactions between system components.
Solution: Use of security test scenarios and SVM classifier to detect and classify these vulnerabilities.
",NO,, Rich Story Scenarios Dataset (RSSD),200 data points (user scenarios),"Used in the requirement analysis phase to classify and evaluate security requirements from user scenarios.
",,,,,,,,,,,,,,,,,,,"Context: Discussion on security requirements and their elicitation during software development.
Proposal: The use of a database of security goals and keywords for early-stage classification and evaluation of security requirements.
",The study suggests expanding the training dataset to include new requirements and applying the method to different application systems to create a more comprehensive tool for any user scenario system in the future.
258,Kaur 2023,MNoR-BERT: multi-label classification of non-functional requirements using BERT,Consensus,258,MNoR-BERT: multi-label classification of non-functional requirements using BERT,2023,"In the era of Internet access, software is easily available on digital distribution platforms such as app stores. The
distribution of software on these platforms makes user feedback more accessible and can be used from requirements
engineering to software maintenance context. However, such user reviews might contain technical information about the
app that can be valuable for developers and software companies. Due to pervasive use of mobile apps, a large amount of
data is created by users on daily basis. Manual identification and classification of such reviews are time-consuming and
laborious tasks. Hence, automating this process is essential for assisting developers in managing these reviews efficiently.
Prior studies have focused on classification of these reviews into bug reports, user experience, and feature requests.
Nevertheless to date, a very few research papers have extracted Non-Functional Requirements (NFRs) present in these
reviews. NFRs are considered as the set of quality attributes such as reliability, performance, security and usability of the
software. Previous studies have utilized machine learning techniques to classify these reviews into their respective classes.
However, it was observed that existing studies treat review classification problems as single-label classification problem,
and also underestimate the contextual relationship between the words of review statements. To alleviate this limitation, the
proposed research work used a transfer learning model to classify multi-label app reviews into four NFRs: Dependability,
Performance, Supportability, and Usability. The proposed approach evaluates the performance of the pre-trained language
model for multi-label review classification. In this paper, a set of experiments are conducted to compare the performance of
the proposed model against the baseline machine learning with binary relevance and keyword based approach. We
evaluated our approach over a dataset of 6000 user reviews of 24 iOS apps. Experimental results show that the proposed
model outperforms state-of-the-art baseline techniques with respect to precision, recall, and F1-measure",India,Journal,Neural Computing and Applications,Experimental Research; Empirical Study ,"to classify multi-label app reviews into non-functional requirements (NFRs) such as Dependability, Performance, Supportability, and Usability using the BERT language model.
",NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Dependability
Performance
Supportability
Usability",,"MNoR-BERT	","Multi-label classification using BERT to classify app reviews into NFR sub-categories like Dependability, etc.	","Proposed	","Devlin et al. (2019) ""BERT: Pre-training of deep bidirectional transformers for language understanding"" In Proceedings of NAACL-HLT (1) [18].
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenge 1: High rate of false positives due to inadequate contextual analysis in keyword-based approaches.
Challenge 2: Existing models' inability to effectively manage multi-label classification due to oversimplification as single-label problems.
How Challenges Could Be Addressed:
Using BERT language models, which retain contextual relationships between words to minimize false positives.
Adopting multi-label classification techniques that recognize multiple categories per review, such as the MNoR-BERT framework","Type of ""Nonfunctional Requirement"":
Dependability, Performance, Supportability, Usability
Details of the Case Study:
The study evaluated the MNoR-BERT model using datasets from 6000 user reviews collected from 24 iOS apps. These reviews were labeled for four NFRs, demonstrating that the MNoR-BERT model outperforms baseline techniques like CNN, LSTM, and dictionary/keyword-based approaches .
Type of Case Study: Empirical study.",,Dataset 1,"6000 user reviews from Apple Store apps (24 apps, including Netflix, Amazon Music, etc.)",Used to train and evaluate the multi-label classification model.,Dataset 2,1100 user reviews from Google Play and Apple Store apps (12 apps),Used to train and evaluate the multi-label classification model.,,,,,,,,,,,,,,,,"Context:
Presented in the context of automatic classification to extract non-functional requirements (NFRs) from app store reviews.
Proposed Method:
Proposes the use of BERT-based models for automatic classification and presentation of NFRs to improve decision-making in software maintenance and release planning","Direction 1: Extend neural language models to improve classification accuracy further.
Direction 2: Investigate the effectiveness of other pre-trained language models on the multi-label review classification problem.
Direction 3: Explore ensemble methods for enhancing the accuracy of classification models ."
253,Lopez-Hernandez 2021,Non-functional Requirements Classification using Artificial Neural Networks,Consensus,253,Non-functional Requirements Classification using Artificial Neural Networks,2021,"Requirements classification is a task commonly made by the human. This fact makes the process error-prone and expensive in a matter of time and effort. This study aims to classify non-functional requirements using a Shallow Artificial Neural Network to support the requirements classification while analyzing its architectural features. We used an existing pre-processed dataset to compare the results. The non-functional requirements classified were: availability, failure tolerance, maintainability, performance, scalability, security, and usability. A set of experiments were performed to adjust and analyze the features of the Artificial Neural Network: number of neurons, activation functions, additional hidden layer, and learning rate. The obtained neural network, which resulted in a simpler architecture, outperforms the results reported in the literature for that particular dataset.",Mexico,Conference ,"2021 IEEE International Autumn Meeting on Power, Electronics and Computing (ROPEC 2021)",Experimental Research; Empirical Study ,To classify non-functional requirements using a shallow Artificial Neural Network and to analyze the architectural features of the network that contribute to its performance.,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Technique: Shallow Artificial Neural Network (ANN).
Usage: The ANN is used to classify non-functional requirements into categories like availability, failure tolerance, maintainability, performance, scalability, security, and usability.
AI Tools: PyTorch was used to implement and train the ANN.
",,"Pre-processed dataset from the work of Pérez-Verdejo et al.	","630 requirements with 7 labels	",Used to train and test the shallow ANN for classifying requirements into functional and non-functional categories​,,,,,,,,,,,,,,,,YES,"Availability
Failure Tolerance
Maintainability
Performance
Scalability
Security
Usability",,Shallow Artificial Neural Network (ANN),"The study designed a shallow ANN to classify NFRs into sub-categories such as availability, failure tolerance, maintainability, performance, scalability, security, and usability. The ANN's architecture was adjusted through experiments with different numbers of neurons, activation functions, hidden layers, and learning rates to optimize performance.	",Proposed,"Pérez-Verdejo, J.M., Mezura-Montes, E., Sánchez-García, A.J., & Ocharán-Hernández, J.O. (2020). Hyperparameter calibration for software requirements classification by using differential evolution. Research in Computing Science, 149(8), 241-251. DOI: 10.13053/rcs-149-8-20","NO	","NO	","NO	","NO	",NO,PyTorch,"PyTorch was used as the underlying library for training the neural network. It provided the computational backend needed to implement the ANN, including tensor operations and model training. In this case, it was used as a medium to implement and test the classification scheme developed by the study	",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenges: The primary challenge is the imbalanced dataset, which can lead to less accurate classification for underrepresented NFR subcategories.
Addressing the challenge: The study employs stratified cross-validation and experiments with different network parameters to address the challenge.",NO,,"Pre-processed dataset from the work of Pérez-Verdejo et al.	","630 requirements labeled into 7 categories	",Used to train and test the shallow ANN for classifying NFRs into sub-categories​,,,,,,,,,,,,,,,,,,,NO,"The study suggests exploring more complex neural network architectures, such as deep neural networks or neuroevolution approaches, to potentially improve the classification accuracy further.
It also mentions the need to apply more advanced pre-processing methods to handle the imbalanced dataset more effectively."
252,Jindal 2021,Mining non-functional requirements using machine learning techniques,Consensus,252,Mining Non-Functional Requirements using Machine Learning Techniques,2021,"Background: Non-Functional Requirements (NFRs) have a direct impact on the architecture of the system, thus it is essential to identify NFRs in the initial phases of software development.
Aim: The work is based on the extraction of relevant keywords from NFR descriptions by employing text mining steps and thereafter classifying these descriptions into one of the nine types of NFRs.
Method: For each NFR type, keywords are extracted from a set of pre-categorized specifications using Information-Gain measure. Then models using 8 Machine Learning (ML) techniques are developed for the classification of NFR descriptions. A set of 15 projects (containing 326 NFR descriptions) developed by MS students at DePaul University are used to evaluate the models.
Results: The study analyzes the performance of ML models in terms of classification and misclassification rates to determine the best model for predicting each type of NFR descriptions. The Naïve Bayes model has performed best in predicting “maintainability” and “availability” types of NFRs.
Conclusion: The NFR descriptions should be analyzed and mapped into their corresponding NFR types during the initial phases. The authors conducted a cost-benefit analysis to appreciate the advantage of using the proposed models​",India ,Journal,e-Informatica Software Engineering Journal,Experimental Research; Empirical Study ,"to develop models using machine learning techniques to classify NFRs into their respective types based on their descriptions in requirement specifications.
",NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Availability (A)
Look-and-Feel (LF)
Legal (L)
Maintainability (MN)
Operational (O)
Performance (PE)
Scalability (SC)
Security (SE)
Usability (US)",,"Naïve Bayes (NB)	","Extracts keywords using Information Gain measure and develops ML models for classifying NFR descriptions into types.	",Proposed,"Cleland-Huang, J., Settimi, R., Zou, X., & Solc, P. (2007). Automated classification of non-functional requirements. Requirements Engineering, 12(2), 103-120. DOI: 10.1007/s00766-007-0045-1.",NO,NO,NO,NO,NO,WEKA,"Platform for implementing machine learning models	","Radial Basis Function (RBF)	","A neural network that uses radial basis functions as activation functions for classifying NFR descriptions.	","Proposed	",NO,NO,NO,NO,NO,NO,WEKA,"Platform for implementing machine learning models	","J48 Decision Tree	","An implementation of the C4.5 algorithm for creating decision trees to classify NFR descriptions.	","Proposed	",NO,NO,NO,NO,NO,NO,WEKA,"Platform for implementing machine learning models	","Random Forest	","An ensemble learning technique used to create multiple decision trees to classify NFR descriptions.	","Proposed	",NO,NO,NO,NO,NO,NO,WEKA,"Platform for implementing machine learning models	","LogitBoost	","A boosting algorithm that improves the accuracy of weak classifiers in predicting NFR types.	","Proposed	",NO,NO,NO,NO,NO,NO,WEKA,"Platform for implementing machine learning models	","Multi-Layer Perceptron (MLP)	","A type of neural network used for complex classification tasks of NFR descriptions based on their features.	","Proposed	",NO,NO,NO,NO,NO,NO,WEKA,"Platform for implementing machine learning models	","Challenges: The ambiguity caused by overlapping keywords across multiple types of NFRs.
Addressing the Challenges: Using more sophisticated semantic analysis techniques and improved training data.",NO,,PROMISE NFR dataset ,15 projects with 326 NFR descriptions and 358 FR descriptions,Used to develop ML models for classifying NFRs into nine types.,,,,,,,,,,,,,,,,,,,"Context: Discusses the importance of NFRs in the requirement specification document.
Proposal: Suggests the need for systematic extraction and classification to ensure early identification and accurate documentation.","Suggests exploring more advanced machine learning techniques and using larger, more diverse datasets for better classification accuracy."
250,Amro 2023,Arabic User Requirements Classification Using Machine Learning,Consensus,250,Arabic User Requirements Classification Using Machine Learning.,2023,"Requirement engineering is a crucial step in software engineering as it forms the foundation for all subsequent stages and significantly affects whether software development is successful or unsuccessful. The same software requirement document generally includes both functional and non-functional requirements that are essential. However, expressing these requirements in natural language necessitates considerable human effort to classify them. Manual classification can be laborious, time-consuming, expensive, and prone to inaccuracies. Inaccurate classification can result in misunderstandings or ambiguities in requirements, leading to incomplete products that fail to meet customer demands. While many studies have proposed English language requirements classification techniques, there is an absence of research in Arabic requirements classification. Moreover, there aren't many Arabic datasets that are openly accessible in this sector. In this paper, we offer a method for gathering Arabic data sets for needs and utilizing machine learning techniques to automatically categorize software requirements written in Arabic into functional and non-functional requirements. This study intends to assist software developers in time savings, lower the cost and effort associated with the manual classification process, and improve the effectiveness of the requirements engineering phase. Further gives scholars in this subject a new topic to explore.",Jordan,Conference ,2023 International Conference on Information Technology (ICIT).,Experimental Research,to propose a method for gathering Arabic datasets for requirements and utilizing machine learning techniques to automatically categorize software requirements written in Arabic into functional and non-functional requirements.,YES,,"SVM Algorithm	","Used to categorize software requirements written in Arabic into functional and non-functional using machine learning.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"
AI Technique Used: Support Vector Machine (SVM)	
Description of AI Usage: The study uses the SVM optimization algorithm with cross-validation to classify Arabic software requirements into functional and non-functional categories. The SVM classifier is trained and tested using a dataset of Arabic requirements, applying a cross-validation method with 5 folds to ensure robustness and minimize overfitting. The classifier's performance is evaluated based on recall, precision, and F1 score.	
AI Tools Used: NO",,"Arabic Requirements Dataset	","120 software requirements (60 functional and 60 non-functional)	","The dataset was collected from various sources, reviewed by domain experts, and used to train and test the SVM model for classification. The dataset was split into training and testing sets to evaluate the machine learning model's performance.
",,,,,,,,,,,,,,,,NO,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenges: The study mentions the challenge of manually classifying requirements in Arabic due to the language's structural, syntactic, and semantic complexities.
How Addressed: The challenge is addressed by proposing a machine learning-based automated classification method using SVM.
",NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,NO,"The study suggests exploring other classification algorithms like decision trees, random forests, and neural networks and incorporating more advanced natural language processing techniques. It also recommends expanding the dataset to include more diverse requirements and domains."
249,Limaylla-Lunarejo 2023,Towards a FAIR Dataset for non-functional requirements,Consensus,249,Towards a FAIR Dataset for non-functional requirements,2023,"
In the last years, the application of supervised Machine Learning
(ML) algorithms in Requirements Engineering (RE) has allowed
increasing the performance (e.g. accuracy, precision) and scalabil-
ity of automatic requirements classification. However, the lack of
publicly labeled datasets is still one concern when conducting ML
experiments. Few publicly labeled datasets for non-functional re-
quirements classification are available, and even less in the Spanish
language. Moreover, most of the available datasets present some lim-
itations, such as imbalanced classes (e.g. PROMISE NFR). This study
aims to generate a FAIR dataset of non-functional requirements
in the Spanish language for facilitating reuse in ML classification
experiments. 109 non-functional requirements were collected from
final degree projects from the University of A Coruña. We con-
ducted a pilot quasi-experiment for non-functional requirements
labeling in the categories and subcategories of the ISO/IEC 25010
quality model. The labeling process was accomplished by 7 anno-
tators. The inter-annotator agreement using a Fleiss’ Kappa test
obtained a substantial agreement in the category level (0.78) and a
moderate agreement (0.48) when the classification is per subcategory
","Spain
Netherlands",Conference ,"The 38th ACM/SIGAPP Symposium on Applied Computing (SAC ’23) .
",Other: Quasi-experiment,"to generate a FAIR dataset of non-functional requirements in Spanish, facilitating reuse in ML classification experiments .
",NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Usability
Reliability
Performance
Safety
Security
Interoperability
Availability
Extensibility
Adaptability
Testability
Modifiability .",,"ISO/IEC 25010 Quality Model	","A model used to label non-functional requirements into categories and subcategories, as part of the FAIR dataset generation.	",Referenced,"ISO/IEC 25010:2011 Systems and software engineering - Systems and software Quality Requirements and Evaluation (SQuaRE)	",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenge: Lack of publicly labeled datasets for non-functional requirements in the Spanish language.
How It Could Be Addressed: The study generated a new FAIR dataset specifically for NFRs in Spanish to improve availability and usability for ML experiments .
","Case Study Details: A pilot quasi-experiment was conducted for non-functional requirements labeling using ISO/IEC 25010 quality model.
Type of Case Study: Quasi-experiment .
",,"PROMISE NFR Dataset	","Few requirements; unbalanced data	","Used as a reference dataset for automatic classification of non-functional requirements.
","Generated FAIR Dataset	","109 non-functional requirements in Spanish	","Created to facilitate ML classification experiments; follows ISO/IEC 25010 model for NFR labeling .
",,,,,,,,,,,,,,,,"Context: The study discusses the classification and labeling of non-functional requirements in the context of generating a FAIR dataset for machine learning.
Proposal for Presentation: The requirements were labeled using the ISO/IEC 25010 quality model to ensure consistency and ease of reuse in future research .","Conduct further experiments to confirm the preliminary findings.
Improve agreement in classification by including more keywords and providing detailed examples for each subcategory.
Explore the use of feedback options with specific values such as ‘No subcategories fit’, ‘Belongs to more than one subcategory’, or ‘Lack of detail’ to enhance the labeling process ."
248,Li 2019,An empirical comparison of machine learning algorithms for classification of software requirements,Consensus,248, An Empirical Comparison of Machine Learning Algorithms for Classification of Software Requirements.,2019,"Intelligent software engineering has emerged in recent years to address difficult problems in requirements engineering. Requirements are crucial for software development, and the classification of natural language user requirements into functional and non-functional requirements is a fundamental challenge. This study aims to explore and compare the random forest and gradient boosting algorithms to determine their accuracy in classifying functional and non-functional requirements through experiments. The results show that the gradient boosting algorithm yields improved prediction performance when classifying non-functional requirements, while the random forest algorithm is more accurate for functional requirements.",Malaysia,Journal,International Journal of Advanced Computer Science and Applications (IJACSA).,Experimental Research; Empirical Study ,To explore and compare the accuracy of the random forest and gradient boosting algorithms in classifying functional and non-functional software requirements.,YES,,"Random Forest Algorithm	","An ensemble method that uses multiple decision trees to improve prediction performance for functional requirements.	","Referenced	","Kurtanović, Z., & Maalej, W. (2017). Automatically Classifying Functional and Non-functional Requirements Using Supervised Machine Learning. In 2017 IEEE 25th International Requirements Engineering Conference (RE). IEEE, September 2017, pp. 490-495. DOI: 10.1109/RE.2017.69.","Scikit Learn	","Provides classification algorithms such as Random Forest and Gradient Boosting. Developed and validated.	",Developed,Referenced,NO,"Python Pandas, NumPy	","Used for data manipulation and model preparation.
","Gradient Boosting Algorithm	","An ensemble method that improves prediction accuracy by combining outputs of several base models; more accurate for classifying non-functional requirements.	","Referenced	","Casamayor, A., Godoy, D., & Campo, M. (2010). Identification of non-functional requirements in textual specifications: A semi-supervised learning approach. Information and Software Technology, 52(4), 436-445. DOI: 10.1016/j.infsof.2009.11.006.","Scikit Learn	","Provides classification algorithms such as Random Forest and Gradient Boosting. Developed and validated.	",Developed,Referenced,NO,"Python Pandas, NumPy	","Used for data manipulation and model preparation.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Name of AI Technique: Random Forest Algorithm, Gradient Boosting Algorithm.
How AI was Used: These algorithms were employed to predict the labels of functional and non-functional requirements in the classification process.
AI Tools Used: Scikit Learn, Python.",,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Security
Performance
Usability
Efficiency",,"Gradient Boosting Algorithm	","An ensemble method that improves prediction accuracy by combining outputs of several base models; specifically used for classifying sub-categories of non-functional requirements.	",Proposed,NO,"Scikit Learn	","Provides classification algorithms such as Random Forest and Gradient Boosting. Developed and validated.	",Developed,Referenced,NO,"Python Pandas, NumPy	","Used for data manipulation and model preparation.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,NO,"Investigate more machine learning algorithms by engaging the ensemble strategy to improve classification accuracy.
"
247,Rahman 2019,Classifying non-functional requirements using RNN variants for quality software development,Consensus,247,Classifying Non-functional Requirements using RNN Variants for Quality Software Development,2019,"Non-Functional Requirements (NFR), a set of quality attributes, required for software architectural design. Which are usually scattered in SRS and must be extracted for quality software development to meet user expectations. Researchers show that functional and non-functional requirements are mixed together within the same SRS, which requires a mammoth effort for distinguishing them. Automatic NFR classification would be a feasible way to characterize those requirements, where several techniques have been recommended e.g. IR, linguistic knowledge, etc. However, conventional supervised machine learning methods suffered for word representation problem and usually required hand-crafted features, which will be overcome by proposed research using RNN variants to categorize NFR. The NFR are interrelated and one task happens after another, which is the ideal situation for RNN. In this approach, requirements are processed to eliminate unnecessary contents, which are used to extract features using word2vec to feed as input of RNN variants LSTM and GRU. Performance has been evaluated using PROMISE dataset considering several statistical analysis. Among those models, precision, recall, and f1-score of LSTM validation are 0.973, 0.967, and 0.966 respectively, which is higher over CNN and GRU models. LSTM also correctly classified minimum 60% and maximum 80% unseen requirements. In addition, classification accuracy of LSTM is 6.1% better than GRU, which concluded that RNN variants can lead to better classification results, and LSTM is more suitable for NFR classification from textual requirements.",Bangladesh,Conference ,"MaLTeSQuE '19, ACM SIGSOFT International Workshop on Machine Learning Techniques for Software Quality Evaluation",Experimental Research; Empirical Study ,"To classify non-functional requirements (NFR) from software requirements using RNN variants like LSTM and GRU, to achieve better classification results compared to traditional machine learning methods",YES,,"RNN Variants (LSTM and GRU)	",LSTM and GRU are deep learning models used for text classification. They are implemented to distinguish between functional and nonfunctional requirements using word2vec for word vectorization​.,Proposed,"Md. Abdur Rahman, Md. Ariful Haque, Md. Nurul Ahad Tawhid, Md. Saeed Siddik. 2019. Classifying Non-functional Requirements using RNN Variants for Quality Software Development. In Proceedings of the 3rd ACM SIGSOFT International Workshop on Machine Learning Techniques for Software Quality Evaluation (MaLTeSQuE '19), August 27, 2019, Tallinn, Estonia. ACM, New York, NY, USA, 6 pages. https://doi.org/10.1145/3340482.3342745&#8203;:contentReference[oaicite:10]{index=10}",NO,NO,NO,NO,NO,"Word2vec, TensorFlow, Keras	","Word2vec is used for feature extraction, TensorFlow, and Keras are libraries that help implement the models in Python.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,The study uses RNN (Recurrent Neural Network) variants: Long Short-Term Memory (LSTM) and Gated Recurrent Unit (GRU)​,,"PROMISE Dataset	","625 requirement sentences: 255 functional and 370 non-functional requirements	","The PROMISE dataset was used for training and testing the RNN variants (LSTM and GRU). It was preprocessed to remove unnecessary text and vectorized using word2vec to feed into the RNN models for classification​.
",,,,,,,,,,,,,,,,YES,"Availability
Legal
Look and Feel
Maintainability
Operational
Performance
Scalability
Security
Usability
Fault Tolerance
Portability",,"RNN Variants (LSTM and GRU)	",LSTM and GRU are deep learning models that were used to classify non-functional requirements into the mentioned sub-categories using word2vec for word vectorization​.,"Proposed	","	Md. Abdur Rahman, Md. Ariful Haque, Md. Nurul Ahad Tawhid, Md. Saeed Siddik. 2019. Classifying Non-functional Requirements using RNN Variants for Quality Software Development. In Proceedings of the 3rd ACM SIGSOFT International Workshop on Machine Learning Techniques for Software Quality Evaluation (MaLTeSQuE '19), August 27, 2019, Tallinn, Estonia. ACM, New York, NY, USA, 6 pages. https://doi.org/10.1145/3340482.3342745&#8203;:contentReference[oaicite:16]{index=16}",NO,NO,NO,NO,NO,"Word2vec, TensorFlow, Keras	","Word2vec is used for feature extraction; TensorFlow and Keras are libraries that help implement the models in Python.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,NO,,"PROMISE Dataset	","370 non-functional requirements	","The PROMISE dataset was used for training and testing the RNN variants (LSTM and GRU). It was preprocessed to remove unnecessary text and vectorized using word2vec to feed into the RNN models for classification​.
",,,,,,,,,,,,,,,,,,,NO,"Future research directions include incorporating large-scale datasets and significant feature extraction techniques such as GloVe, fastText, and ensemble classifiers"
246,Tasnim 2023,A Fine Tuned Ensemble Approach to Classify Requirement from User Story,Consensus,246,A Fine Tuned Ensemble Approach to Classify Requirement from User Story,2023,"The manual classification process in software re-
quirement Specification (SRS) has several challenges, including
subjectivity, time commitment, and the possibility of mistakes and
discrepancies. There is a chance of inconsistencies and classifi-
cation errors when requirements are manually classified because
of subjectivity and anomalies. Furthermore, the corresponding
manual effort grows increasingly difficult and unfeasible as
the volume of requirements increases. This study explores the
field of automated classification, highlighting the crucial role
of automation in distinguishing between functional and non-
functional requirements. Utilizing the PROMISE repository with
969 requirements, the study deploys an ensemble of machine
learning classifiers—Random Forest, Multinomial Naive Bayes,
Gradient Boosting, XGBoost, and AdaBoost. Based on the test
dataset, the empirical results show that the suggested ensemble
method achieves a 98% accuracy in binary classification of Func-
tional Requirements (FR) and Non-Functional Requirements
(NFR). Moreover, Grid search and hyperparameter optimization
methods refine the ensemble’s performance, highlighting its
usefulness in enhancing the accuracy and consistency of software
requirement analysis in the binary classification framework",Bangladesh,Conference ,26th International Conference on Computer and Information Technology (ICCIT),Experimental Research; Empirical Study ,to enhance the accuracy and consistency in the classification of software requirements by using a fine-tuned ensemble approach that combines multiple machine learning classifiers to distinguish between functional and non-functional requirements.,YES,,"Fine-Tuned Ensemble Technique	","Uses Random Forest, Multinomial Naive Bayes, Gradient Boosting, XGBoost, and AdaBoost models with hyperparameter tuning through Grid Search for binary classification	","Proposed	","Rahimi et al. (2020): Rahimi, N., Eassa, F., & Elrefaei, L. (2020). An ensemble machine learning technique for functional requirement classification. Symmetry, 12(10). [Online]. Available: https://www.mdpi.com/2073-8994/12/10/1601

Cleland-Huang et al. (2006): Cleland-Huang, J., Settimi, R., Zou, X., & Solc, P. (2006). The detection and classification of non-functional requirements with application to early aspects. In 14th IEEE International Requirements Engineering Conference (RE’06), pp. 39–48.

Wnuk et al. (2009): Wnuk, K., Regnell, B., & Schrewelius, C. (2009). Architecting and coordinating thousands of requirements – an industrial case study. In Requirements Engineering: Foundation for Software Quality, pp. 118–123. Springer, Berlin, Heidelberg.

",NO,NO,NO,NO,NO,"sklearn, Python	","Utilized for implementing classification models
","Random Forest	","Uses random subsets of data for each decision tree to reduce overfitting, providing a balanced model for text classification	","Referenced	","Rahimi et al. (2020): Rahimi, N., Eassa, F., & Elrefaei, L. (2020). An ensemble machine learning technique for functional requirement classification. Symmetry, 12(10). [Online]. Available: https://www.mdpi.com/2073-8994/12/10/1601

Jindal et al. (2016): Jindal, R., Malhotra, R., & Jain, A. (2016). Automated classification of security requirements. In International Conference on Software Engineering and Knowledge Engineering, pp. 2027–2033.",NO,NO,NO,NO,NO,"sklearn, Python	","Utilized for implementing classification models
","Multinomial Naive Bayes (MNB)	","Efficient method for text classification that encodes probabilistic differences between text elements	","Referenced	","Rahimi et al. (2020): Rahimi, N., Eassa, F., & Elrefaei, L. (2020). An ensemble machine learning technique for functional requirement classification. Symmetry, 12(10). [Online]. Available: https://www.mdpi.com/2073-8994/12/10/1601
Dias Canedo and Mendes (2020): Dias Canedo, E., & Cordeiro Mendes, B. (2020). Software requirements classification using machine learning algorithms. Entropy, 22(9). [Online]. Available: https://www.mdpi.com/1099-4300/22/9/1057
",NO,NO,NO,NO,NO,"sklearn, Python	","Utilized for implementing classification models
","Gradient Boosting	","Combines weak learning models to create a robust predictive model, enhancing accuracy through iterative refinement	","Referenced	","Rahimi et al. (2020): Rahimi, N., Eassa, F., & Elrefaei, L. (2020). An ensemble machine learning technique for functional requirement classification. Symmetry, 12(10). [Online]. Available: https://www.mdpi.com/2073-8994/12/10/1601

",NO,NO,NO,NO,NO,"sklearn, Python	","Utilized for implementing classification models
","XGBoost	","Enhanced version of Gradient Boosting that includes regularization to avoid overfitting, capable of parallel processing and optimized computation	","Referenced	","Rahimi et al. (2020): Rahimi, N., Eassa, F., & Elrefaei, L. (2020). An ensemble machine learning technique for functional requirement classification. Symmetry, 12(10). [Online]. Available: https://www.mdpi.com/2073-8994/12/10/1601

Kurtanovic et al. (2017): Kurtanovic, Z., & Maalej, W. (2017). Automatically classifying functional and non-functional requirements using supervised machine learning. In 2017 IEEE 25th International Requirements Engineering Conference (RE), pp. 490–495.

",NO,NO,NO,NO,NO,"sklearn, Python	","Utilized for implementing classification models
","AdaBoost	","Focuses on misclassified instances in successive training rounds to improve the accuracy of the classifier	","Referenced	","Onan et al. (2016): Onan, A., Korukoglu, S., & Bulut, H. (2016). Ensemble of keyword extraction methods and classifiers in text classification. Expert Systems with Applications, 57, 232–247.
Guzman et al. (2015): Guzman, E., El-Haliby, M., & Bruegge, B. (2015). Ensemble methods for app review classification: An approach for software evolution. In 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 771–776.

l
",NO,NO,NO,NO,NO,"sklearn, Python	","Utilized for implementing classification models
","(i) Name of AI techniques used: Random Forest, Multinomial Naive Bayes, Gradient Boosting, XGBoost, AdaBoost
(ii) AI is used to classify between functional and non-functional requirements by combining multiple machine learning models in an ensemble approach to improve classification accuracy, using Grid Search for hyperparameter optimization.
(iii) AI tools used: Python, sklearn",,Dataset: PROMISE repository,(Extended version by Lima et al. with 969 requirements),"Used to train and test the ensemble machine learning model for classifying functional and non-functional requirements.
",,,,,,,,,,,,,,,,NO,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,NO,"Future research directions include expanding from binary to multi-class classification, validating the model in real-world software development environments, enhancing its interpretability, and integrating the model into widely used software development tools."
245,Kumar 2023,Classification of NFR based Importance Level of User Story in Agile Software Development,Consensus,245,Classification of NFR based Importance Level of User Story in Agile Software Development,2023,"The fact that requirement engineering creates effective technology and prevents system failure is very important in the early phases of software development. The final implementation criteria and the selection of many alternative models both heavily depend on non-functional requirements. The term ""non-functional requirements"" (NFR) refers to a group of qualities that software must possess, such as security, dependability, performance, etc. Extracting and considering NFR from user stories in Agile Software Development (ASD) can help developers deliver quality software that meets the expectations of users completely. This paper proposed the classification of NFR based on the importance level of user stories in ASD using machine learning models. At the beginning of this work, requirements were converted into user stories, then the weight of NFR type and importance level of each user story were calculated and classified using machine learning models. The outcome of this work shows that the random forest classifier and XGBoost achieved the best results with an accuracy of 96.39%, and the decision tree classifier accuracy is 96.13%, with comparisons of K-nearest neighbor, linear discriminant analysis, support vector classifier, logistic regression, and naïve bayes.",India,Conference ,2023 International Conference on Signal Processing and Communication (ICSC),Experimental Research; Empirical Study ,classify non-functional requirements based on the importance level of user stories in Agile Software Development using various machine learning models,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"
	•	Accessibility
	•	Auditability
	•	Availability
	•	Compliance
	•	Confidentiality
	•	Documentation
	•	Efficiency
	•	Interoperability
	•	Legal
	•	Multilingual
	•	Performance
	•	Reliability
	•	Scalability
	•	Security ￼.",,Random Forest Classifier (RFC),The study used RFC to classify NFRs into sub-categories based on their importance level in user stories. RFC achieved an accuracy of 96.39% in the classification task.,Proposed,NO,NO,NO,NO,NO,NO,Python ML libraries,Used for implementing machine learning models,XGBoost,The study used XGBoost to classify NFRs into sub-categories based on their importance level in user stories. XGBoost also achieved an accuracy of 96.39% in the classification task.,Proposed,NO,NO,NO,NO,NO,NO,Python ML libraries,Used for implementing machine learning models,Decision Tree Classifier (DTC),The study used DTC to classify NFRs into sub-categories based on their importance level in user stories. DTC achieved an accuracy of 96.13% in the classification task.,Proposed,NO,NO,NO,NO,NO ,NO,Python ML libraries,Used for implementing machine learning models,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,"Type of Nonfunctional Requirement: Accessibility, Auditability, Confidentiality, Documentation, Performance, Reliability.
Details of the Case Study: The case study involved converting a user requirement (theme) into detailed user stories (epics) with specific tasks and measuring the importance levels of different NFRs in the context of a login form development.
Type of Case Study: Empirical study in Agile Software Development ￼.",,"User Story Dataset	","User stories with various NFR types like accessibility, auditability, confidentiality, etc.	","Used to identify and classify NFR types based on keyword appearances and to calculate their importance levels.
",,,,,,,,,,,,,,,,,,,NO,The study suggests extending the research by using different machine learning classifiers and considering additional NFR types with different keyword indicators.
243,García 2023,Classification of Non-functional Requirements Using Convolutional Neural Networks,Consensus,243,Classification of Non-functional Requirements Using Convolutional Neural Networks,2023,"The requirements phase is the core of software development, if it is not carried out correctly it can
cause its failure. To combat this problem, analysts have used requirements engineering (ER, for its acronym
in English), which is characterized by producing a list of quality requirements called requirements specifica-
tion (RS, for its acronym in English). The SR performs the requirements classification activity, which consists
of identifying the class to which each requirement belongs so that analysts face the challenge of classifying
them properly. This work is focused on improving the performance of the classification of non-functional
requirements (NFR); that is, with the help of a convolutional neural network. It also seeks to show the impor-
tance of preprocessing, the implementation of sampling strategies, and the use of previously trained matrices
such as Fasttext, Glove, and Word2vec. The results were obtained by evaluating the metrics Recall, Precision,
and F1 with an average increase of up to 30% over related work. Finally, the evaluation of the model is pre-
sented with respect to the pre-trained matrices with the ANOVA analysis",Mexico,Journal,Programming and Computer Software.,Experimental Research; Empirical Study ; Quantitative Research,"to improve the performance of the classification of non-functional requirements (NFR) using a Convolutional Neural Network (CNN), focusing on preprocessing, sampling strategies, and the use of pre-trained matrices.",NO,,"Convolutional Neural Network (CNN)	","Uses CNN with pre-trained matrices (FastText, GloVe, Word2Vec) for classifying FRs and NFRs	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"AI Technique: Convolutional Neural Network (CNN)
Usage: Used CNN to classify between functional and nonfunctional requirements by utilizing pre-trained word embeddings.
AI Tools: Word2Vec, FastText, GloVe
",,PROMISE Corpus,"326 Non-Functional Requirements (NFRs)
358 Functional Requirements (FRs)
",Used for training and evaluating the CNN model to classify NFRs and functional requirements.,,,,,,,,,,,,,,,,NO,NO ,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,NO,"Search for datasets with more examples to observe the performance behavior of the classifier.
Experiment with recurrent neural networks, such as LSTM.
Seek institutions that can provide resources for further research"
238,Dave 2021,Automating the Classification of Requirements Data,Consensus,238,Automating the Classification of Requirements Data.,2021,This paper proposes a pilot approach based on the comparative analysis of supervised Machine Learning models coupled with basic Natural Language Processing concepts for classifying Functional and Non-Functional Requirements from huge collections of data relevant to the Requirements Engineering (RE) phase within software development. The publicly available PROMISE Software Engineering Repository dataset is used in the execution of this approach. Non-Functional Requirements are further classified into subclasses based on attributes they address since they are not directly related to the core functions of the concerned software. This overall research initiative helps to make the RE phase more efficient and reduces human effort in software development. It leverages Big Data in Software Engineering.,"USA
Germany ",Conference , 2021 IEEE International Conference on Big Data (Big Data),Experimental Research; Empirical Study ,To automate the classification of requirements as Functional Requirements (FRs) or Non-Functional Requirements (NFRs) and to classify NFRs into subclasses via the attributes they address.,YES,,"Support Vector Machine (SVM)	","SVM is a supervised learning model that analyzes data for classification and regression analysis, particularly effective in 2-class problems.	","Referenced	","Kurtanovic, Z., & Maalej, W. (2017). ""Automatically Classifying Functional and Non-Functional Requirements Using Supervised Machine Learning."" IEEE International Requirements Engineering Conference (RE), IEEE, 2017. DOI: 10.1109/RE.2017.38.

",NO,NO,NO,NO,NO,NO,NO,"Stochastic Gradient Descent (SGD)	","SGD is an iterative method for optimizing an objective function with appropriate smoothness properties. It is used due to its speed.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,"Random Forest (RF)	","RF is an ensemble learning method for classification, regression, and other tasks that operates by constructing multiple decision trees. It is robust and particularly useful for handling imbalanced data.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Support Vector Machine (SVM): Used for its effectiveness in binary classification problems, like distinguishing between functional and non-functional requirements.
Stochastic Gradient Descent (SGD): Chosen for its speed and efficiency in optimizing the classification models.
Random Forest (RF): Applied due to its robustness in handling imbalanced datasets and its ability to perform well in classification tasks.
AI tools: NO",, PROMISE Software Engineering Repository,"626 Software Requirements labeled as FR or NFR, with NFRs further classified into 9 subclasses based on attributes.","The dataset was utilized to train and test the machine learning models (SVM, SGD, RF). The requirements were tagged as either FRs or NFRs, and the NFRs were further divided into 9 subcategories. The tagged data was converted into a numeric format using TF-IDF, and machine learning models were trained on this processed data to perform classification tasks. Data stratification was also applied to handle class imbalance in training and testing set",,,,,,,,,,,,,,,,YES,"Availability
Legal
Look & Feel
Maintainability
Operational
Performance
Scalability
Security
Usability",,"Support Vector Machine (SVM) with TF-IDF	","SVM is used with Term Frequency-Inverse Document Frequency (TF-IDF) to analyze and classify non-functional requirement types such as Availability, Look & Feel, Maintainability, etc.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,"Stochastic Gradient Descent (SGD) with TF-IDF	","Used with TF-IDF for better analysis and results, particularly for non-functional requirement types like Security, Legal, and Usability.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,"Random Forest (RF) with TF-IDF	","Combined with TF-IDF for classifying Performance-type non-functional requirements.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,NO,, PROMISE Software Engineering Repository,"626 Software Requirements labeled as FR or NFR, with NFRs further classified into 9 subclasses based on attributes.","The dataset was used to train and test machine learning models (Support Vector Machine, Stochastic Gradient Descent, and Random Forest) for the classification tasks. The data is converted into a numeric word matrix using Term Frequency-Inverse Document Frequency (TF-IDF) to be fed into these models. Each model is evaluated using metrics such as F1-score, precision, and recall. Data stratification was also used to handle class imbalance when splitting data into training (80%) and testing (20%) sets.",,,,,,,,,,,,,,,,,,,NO,"Deep Learning Approaches: Future research may involve using deep learning techniques such as CNNs, autoencoders, and transformers.
Commonsense Knowledge Deployment: Further research may include deploying commonsense knowledge for better classification and analysis.
"
237,Baker 2019,Automatic multi-class non-functional software requirements classification using neural networks,Consensus,237,Automatic Multi-class Non-Functional Software Requirements Classification Using Neural Networks.,2019,"The paper presents an approach using neural networks for the automatic multi-class classification of non-functional software requirements (NFRs). The study focuses on improving the accuracy of NFR classification by utilizing deep learning techniques, particularly neural networks, to process textual requirements and categorize them into multiple non-functional requirement types",NO,Conference , 2019 IEEE 43rd Annual Computer Software and Applications Conference (COMPSAC),Experimental Research; Empirical Study ,"Improve the classification accuracy of non-functional software requirements by using deep learning techniques, particularly neural networks, for automatic multi-class classification.",NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Security Requirements.
Performance Requirements.
Usability Requirements.
Maintainability Requirements.",,"Neural Network-based Sub-category Classification	","A deep learning-based approach using neural networks to classify non-functional requirements into specific sub-categories like security, performance, usability, and maintainability.	",Proposed,"NO	","NO	","NO	","NO	","NO	","NO	","NO	",NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"The study discusses challenges related to the ambiguity and overlap of non-functional requirement categories, which complicates the classification process.",NO,,NO,textual data of software requirements.,The dataset was used to train the neural network model to classify non-functional requirements into specific sub-categories.,,,,,,,,,,,,,,,,,,,NO,The study suggests further research to improve the classification accuracy by experimenting with different neural network architectures and incorporating more diverse datasets.
236,Abeba 2022,Identification of Nonfunctional Requirement Conflicts: Machine Learning Approach,Consensus,236,Identification of Nonfunctional Requirement Conflicts: Machine Learning Approach,2022,"The most common causes of software failure in system development are requirements issues. One of these issues is requirement conflicts, which result in expensive costs and a long development time. This is because contradicting requirements make it difficult to design, test, and maintain a software system, which almost always results in software failure. Using manual and semi-automated methods, many researchers attempted to overcome the challenge of detecting conflicting requirements. We’ve suggested a machine learning-based model for detecting conflicts between non-functional requirements in a Software Requirement Specification (SRS) document. To build the model for identifying non-functional requirement conflicts; text preprocessing, vectorization, and classification are included. The text from the document is preprocessed into a series of words using natural language processing (NLP). Then, using vectorization techniques to give words weight, a series of words are stored in numeric representation and utilized as input for classification algorithms. The prepared dataset is used to test traditional machine learning and deep learning classification techniques. Bi-LSTM with pre-trained SO word2vec embedding performs 84.74% accurately, according to a comparative experimental investigation. Future research directions in the problem domain include identifying the relationship between quality attributes and resolving nonfunctional requirements conflict through experiments.",NO,Conference ,"Published as part of the ""Advances of Science and Technology"" proceedings from the 9th EAI International Conference, ICAST 2021.",Experimental Research; Empirical Study ,to identify conflicts among nonfunctional requirements using a machine learning approach. The study aims to leverage machine learning techniques to detect and resolve potential conflicts among nonfunctional requirements in software systems.,YES,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Security
Usability
Performance
Reliability
Maintainability
Compatibility
Portability
",,"Machine Learning Classification	","Uses supervised machine learning techniques to identify and classify nonfunctional requirement conflicts	","Proposed	",NO,"Custom ML Tool	","Designed for detecting conflicts among nonfunctional requirements.	",Developed,Proposed,NO,NO,NO,"Conflict Catalog	","The Conflict Catalog is based on the most up-to-date conflict relationships between quality and sub-quality attributes. It includes absolute conflict, relative conflict, and no conflict classifications.	",Proposed,"Zhang, X., Wang, X.: Tradeoff analysis for conflicting software non-functional requirements. IEEE Access 7, 156463–156475 (2019). https://doi.org/10.1109/ACCESS.2019.2949218 (978-3-030-93709-6)",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenge: Lack of adequate labeled data for training machine learning models effectively.
Address: This could be addressed by creating a labeled dataset with expert-annotated requirements, expanding the dataset with semi-supervised learning techniques, and incorporating active learning strategies.
Challenge: Ambiguity in the definition and interpretation of certain non-functional requirements due to language variability.
Address: Developing a standardized lexicon for non-functional requirements terms and integrating advanced natural language processing (NLP) techniques to reduce ambiguity.",NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,"Context: The study discusses the presentation of nonfunctional requirements in the context of automated conflict detection in software requirement specifications (SRS).
Proposal: The study proposes using structured templates and visualization tools to present nonfunctional requirements to facilitate easier conflict detection and analysis.","Enhancing the conflict detection model by integrating more advanced NLP and machine learning techniques.
Investigating the use of transfer learning to improve the model's performance on domain-specific datasets.
Conducting experiments to validate the relationships between different quality attributes and nonfunctional requirements conflicts."
232,Patel 2024,User Centered Non-Functional Requirements Specification - An Extended Use-Case Diagram,Consensus,232, User Centered Non-Functional Requirements Specification – An Extended Use-Case Diagram ,2024,"Requirements Engineering (RE) activity is often initiated with vaguely specified software requirements. The ambiguities must be overcome to the extent possible when the requirements are specified. Both functional (FRs) and non-functional (NFRs) requirements should be correctly and unambiguously specified. Users communicate about the NFRs in informal discussions. Requirements engineers use formal or semi-formal language notations to manually convey the NFRs. A laborious and ineffective manual approach, however, is unable to identify all likely NFRs and resolve ambiguities in those NFRs. This paper discusses an approach that attempts to overcome ambiguities from natural language requirements, recognize NFRs, and generate NFR specification through the extended Unified Modelling Language (UML) viz. use-case diagram. The empirical evaluation of the proposed approach on the PROMISE dataset achieves an average result of 79.76% recall, 90.05% precision, and 84.59% F-measure. The proposed approach allows the requirements analyst to semi-automatically recognize NFRs and visualize them using an extended use-case diagram at an early stage of RE.","India, USA",Conference ,Procedia Computer Science.,Experimental Research; Empirical Study ,Propose an approach that semi-automatically recognizes non-functional requirements (NFRs) from natural language requirements and visualizes them using an extended use-case diagram ,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"•	Security
•	Performance ",,Semi-Formal NFR Classification Approach (NLP + ML),"The study employs a semi-formal approach using NLP and machine learning to classify NFRs. This approach involves the automatic recognition of NFRs from textual requirements, followed by classification and visualization in an extended use-case diagram.",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,Extended Use-Case Diagram,"This technique uses an extended UML use-case diagram to visualize NFRs, specifically sub-categorizing them into attributes like Security and Performance.",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"The study highlights the challenge of resolving ambiguities in natural language requirements, which complicates the accurate classification of NFRs","Type of Nonfunctional Requirement: Security, Performance.

Details of the Case Study: The case study involved the application of the proposed approach to the PROMISE dataset, which contains 625 NFRs across various projects. The study demonstrated how the approach could automatically classify and visualize NFRs in an extended use-case diagram.

Type of Case Study: Empirical, experimental",,"PROMISE Dataset	","625 NFRs from 15 projects	","Used for evaluating the proposed semi-formal approach in classifying NFRs using extended use-case diagrams.
",,,,,,,,,,,,,,,,,,,"The study discusses how the NFRs are presented through the extended use-case diagram, allowing for the early-stage visualization of NFRs in the RE process ","The study suggests exploring the integration of additional UML diagrams (e.g., class and activity diagrams) to further enhance the visualization and specification of NFRs "
228,Amasaki 2018,The effects of vectorization methods on non-functional requirements classification,Consensus,228,The Effects of Vectorization Methods on Non-Functional Requirements Classification.,2018,"Context: Architecture and design of systems are sensitive to non-functional requirements (NFRs). Identifying NFRs and their categories early is crucial for project success. Automatic classification methods have been studied to support requirements analysis, but past studies using simple vectorization methods may miss semantics and interactions among words in requirements.
Objective: To examine whether different vectorization methods lead to differences in the classification performance of NFRs and their categories.
Method: Comparative experiments were conducted with open data. Five vectorization methods, including document embedding methods and four supervised classification methods, were applied.
Results: Advanced methods achieved better performance than traditional ones, and the preference depended on classification methods.
Conclusions: It is beneficial to consider advanced methods for classifying non-functional requirements categories.","Japan
Thailand ",Conference ,44th Euromicro Conference on Software Engineering and Advanced Applications (SEAA),Experimental Research; Empirical Study ,"to examine whether different vectorization methods affect the classification performance of non-functional requirements (NFRs) and their categories, and to explore if advanced vectorization methods can improve automatic requirements classification.",YES,,"Logistic Regression, Naive Bayes, SVM, Random Forest	","Machine learning methods applied to classify requirements based on vectorized representations	","Referenced	","Cox (1958), Domingos & Pazzani (1997), Cortes & Vapnik (1995), Breiman (2001)	",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"AI technique: Logistic Regression, Naive Bayes, SVM, Random Forest	
Details of Use: These techniques were used to classify requirements based on vectorized representations.	
AI tools: Scikit-Learn
",,"Tera-PROMISE Repository	","255 functional requirements, 370 non-functional requirements	","Used for training and evaluation of classification models.
",,,,,,,,,,,,,,,,YES,"Operational
Performance
Security
Usability
",,"Logistic Regression, Naive Bayes, SVM, Random Forest	","Machine learning methods applied to classify requirements based on vectorized representations	","Referenced	","Cox (1958), Domingos & Pazzani (1997), Cortes & Vapnik (1995), Breiman (2001)
",NO,NO,NO,NO,NO,NO, NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Small dataset size leading to potential overfitting.
Imbalanced classes (e.g., very few requirements for categories like ""Portability"").
Limited representativeness of datasets, as they were sourced from course work rather than real-world projects.",NO,,"Tera-PROMISE Repository	","255 functional requirements, 370 non-functional requirements	","Used for training and evaluation of classification models.
",,,,,,,,,,,,,,,,,,,NO,"Experiments with larger and more diverse datasets.
Incorporation of pretrained models to improve classification performance.
Exploration of additional features like part-of-speech tags."
227,EzzatiKarami 2021,Automatically Classifying Non-functional Requirements with Feature Extraction and Supervised Machine Learning Techniques: A Research Preview,Consensus,277,Automatically Classifying Non-functional Requirements with Feature Extraction and Supervised Machine Learning Techniques: A Research Preview.,2021,"In large projects, extracting the relevant NFR-information as per the stakeholder’s responsibility and needs can be time-consuming and challenging. Classification of NFRs is one way to mitigate this problem. However, due to the size and complexity of the SRS, manual classification of NFRs is considered time-consuming, labour-intensive, and error-prone. An automated solution is needed that provides a reliable and efficient classification of NFRs. Using natural language processing and supervised machine learning (SML) algorithms, this research investigates feature extraction techniques (i.e., POS-tagging based, BoW, and TF-IDF) to assess their efficacy in automated classification, in conjunction with the SML algorithms (such as SVM, SGD SVM, LR, DT, Bagging DT, Extra Tree, RF, GNB, MNB, and BNB). The proposed combinations: (i) SVM with TF-IDF, (ii) LR with POS and BoW, and (iii) MNB with BoW, all achieve precision and recall values greater than 0.85, and process execution time of less than 0.1 s.",Canada,Conference ,27th International Working Conference on Requirements Engineering: Foundation for Software Quality (REFSQ 2021).,Experimental Research; Empirical Study ; Qualitative Research; Quantitative Research,To provide an automated and efficient solution for classifying non-functional requirements (NFRs) using natural language processing and supervised machine learning techniques.,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Performance
Reliability
Availability",,"SVM with TF-IDF	","Uses SVM with TF-IDF for efficient classification of NFRs	",Proposed,"EzzatiKarami, M., & Madhavji, N. H. (2021). Automatically Classifying Non-functional Requirements with Feature Extraction and Supervised Machine Learning Techniques: A Research Preview. In Proceedings of the 27th International Working Conference on Requirements Engineering: Foundation for Software Quality (REFSQ 2021), Essen, Germany. https://doi.org/10.1007/978-3-030-73128-1_1
",,,,,,,,"LR with POS and BoW	","Uses Logistic Regression with POS tagging and Bag of Words for classification	",Proposed,"EzzatiKarami, M., & Madhavji, N. H. (2021). Automatically Classifying Non-functional Requirements with Feature Extraction and Supervised Machine Learning Techniques: A Research Preview. In Proceedings of the 27th International Working Conference on Requirements Engineering: Foundation for Software Quality (REFSQ 2021), Essen, Germany. https://doi.org/10.1007/978-3-030-73128-1_1
",,,,,,,,"MNB with BoW	","Uses Multinomial Naive Bayes with Bag of Words for classification	",Proposed,"EzzatiKarami, M., & Madhavji, N. H. (2021). Automatically Classifying Non-functional Requirements with Feature Extraction and Supervised Machine Learning Techniques: A Research Preview. In Proceedings of the 27th International Working Conference on Requirements Engineering: Foundation for Software Quality (REFSQ 2021), Essen, Germany. https://doi.org/10.1007/978-3-030-73128-1_1
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenges Encountered:
Imbalanced Datasets: Most datasets (e.g., PROMISE) are imbalanced with a low number of certain NFR types, impacting the classification performance.
Feature Extraction Complexity: The necessity of finding the best combination of feature extraction techniques and ML algorithms to maximize precision and recall while minimizing computation time.
How the Challenges Could Be Addressed:
Use of stratified 10-fold cross-validation to evaluate performance.
Future exploration of binary classifiers for individual NFR types rather than a multi-class approach.",NO,,PROMISE,"625	","255 functional, 370 NFRs; 11 NFR types, top four used (usability, performance, security, operational)
","PURE	","296	","136 functional, 160 NFR; 16 NFR types, top three used (usability, performance, security)
","Industry Dataset	","262 NFRs	","Used for multi-class classification of four NFR types (usability, performance, security, operational)
",,,,,,,,,,,,,NO,"Develop binary classifiers for each NFR type to potentially improve performance.
Extend the coverage of product quality attributes, including reliability and privacy, and incorporate process quality aspects such as implementation risk, effort, and cost.
Explore further empirical work to address the causes of misclassification and improve classification accuracy."
225,Canedo 2020,Software requirements classification using machine learning algorithms,Consensus,225,Software Requirements Classification Using Machine Learning Algorithms,2021,"The world is growing and developing rapidly, and the demand for software has been increasing speedily. Any software has many steps for building a program, and all the steps are important for software requirements. Requirements classification can be applied manually, which requires great effort, time, cost, and the accuracy may vary. Therefore, many previous research works have been proposed to automate the classification process, but the automation process of the classification was not sufficient. In this study, we propose a technique to automatically classify software requirements using machine learning to represent text data from software requirements specifications and classify requirements into groups: Functional Requirements and Non-Functional Requirements. The experimented dataset in this study was the PROMISE_exp, which includes labeled requirements. The documents were cleaned and normalized, and the classification was performed using the Bag of Words (BoW) technique with SVM or KNN algorithms. The study shows that using BoW with SVM performs better than KNN algorithms, with an average F-measure of 0.74. Future work aims to improve the technique by merging and changing algorithms such as Logistic Regression to enhance the accuracy (Precision) of the model.",Jordan,Conference ,2021 IEEE International Conference on Information Technology (ICIT),Experimental Research; Empirical Study ,"To propose and evaluate a technique to automatically classify software requirements into Functional and Non-Functional Requirements using machine learning algorithms, particularly SVM and KNN",YES,,BoW (Bag of Words),"The technique involves the use of text data from software requirements specifications. The text data is represented using the Bag of Words technique, which is then classified into Functional Requirements and Non-Functional Requirements using machine learning algorithms such as SVM and KNN.",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,"K-Nearest Neighbor (KNN)	","KNN was also used to classify NFRs into the same sub-categories. However, it had lower performance metrics compared to SVM.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Name of the AI technique used: SVM (Support Vector Machine) and KNN (k-nearest neighbors)
Detailed use of AI: SVM and KNN algorithms are used to classify text data from software requirements specifications into Functional and Non-Functional Requirements.
Name of the AI tools used: NO",,"PROMISE_exp dataset	",255 FRs and 370 NFRs,Used for training and testing the SVM and KNN algorithms to classify requirements into FR and NFR.,,,,,,,,,,,,,,,,YES,"	•	Availability
	•	Performance
	•	Security
	•	Maintainability
	•	Scalability
	•	Usability
	•	Legal
	•	Look and Feel
	•	Operational
	•	Fault Tolerance
	•	Portability",, BoW (Bag of Words) with SVM and KNN," The technique involves classifying Non-Functional Requirements into 11 subcategories using the Bag of Words technique combined with SVM and KNN machine learning algorithms.
",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,"K-Nearest Neighbor (KNN)	","KNN was also used for classifying software requirements into FR and NFR. However, its performance was lower compared to SVM, with a lower F-measure in the study.	",Proposed,"NO	","NO	","NO	","NO	","NO	","NO	","NO	",NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenges: The study mentions the difficulty in achieving high accuracy for certain NFR subcategories due to dataset limitations and the complexity of the requirements.
Addressing the challenge: The study suggests enhancing the dataset and refining the classification algorithms.",NO,,"PROMISE_exp dataset	","370 NFRs	","Used to train and test the SVM and KNN algorithms to classify NFRs into sub-categories.
",,,,,,,,,,,,,,,,,,,NO,"Algorithm Improvement: The study proposes enhancing the accuracy of the classification model by incorporating and merging other algorithms, such as Logistic Regression, with the existing models (SVM and KNN). This is suggested to improve the precision of the classification process.

Dataset Enhancement: The study highlights the need for a more extensive and diverse dataset to improve the classification of both Functional Requirements (FRs) and Non-Functional Requirements (NFRs), particularly in certain subcategories where the current dataset may be insufficient.

Tool Development and Validation: The study suggests further development and validation of the classification tool, with the potential to refine its functionality for better performance across different types of software requirements.

Exploration of Additional Machine Learning Techniques: The study mentions the possibility of exploring other machine learning techniques beyond SVM and KNN to enhance the classification process, potentially including deep learning methods.

Application to Other Domains: The study also indicates that the proposed techniques could be extended and applied to other domains beyond software engineering, where requirement classification is critical."
224,Yucalar 2023,Developing an Advanced Software Requirements Classification Model Using BERT: An Empirical Evaluation Study on Newly Generated Turkish Data,Consensus,224,Developing an Advanced Software Requirements Classification Model Using BERT: An Empirical Evaluation Study on Newly Generated Turkish Data,2023,"Requirements Engineering (RE) is an important step in the software development lifecycle. The problem in RE is to determine the class of software requirements as functional (FR) and non-functional (NFR). Proper and early identification of these requirements is vital for the entire development cycle. Manual identification of these classes is time-consuming and needs automation. This study uses twenty machine learning algorithms, such as Naïve Bayes, Rotation Forests, Convolutional Neural Networks, and transformers like BERT, to predict FR and NFR. A unique Turkish dataset containing 4600 samples collected from real-world software projects was generated for this purpose. The dataset was used to assess the performance of three groups of ML algorithms in terms of F-score and related statistical metrics, with BERTurk showing the best performance for distinguishing between FR and NFR with a 95% F-score. 
From the FR and NFR identification problem point of view, transformer algorithms show significantly
better performances.",Turkey,Journal,Applied Sciences.,Empirical Study ,"To develop and empirically evaluate a software requirements classification model using BERT on a newly generated Turkish dataset.
",YES,,"SVM (Support Vector Machine)	","Uses a linear separation hyperplane for classifying the data into two categories.	","Referenced	","Quba et al., ""Software Requirements Classification Using Machine Learning Algorithm’s,"" IEEE International Conference on Information Technology, 2021, pp. 685–690.	",NO,NO,NO,NO,NO,NO,NO,"KNN (K-Nearest Neighbors)	","Classifies requirements by calculating the distance between the data points in the dataset.	","Referenced	","Quba et al., ""Software Requirements Classification Using Machine Learning Algorithm’s,"" IEEE International Conference on Information Technology, 2021, pp. 685–690.	",NO,NO,NO,NO,NO,NO,NO,"BERT-BiCNN	","Combines BERT for contextual understanding and RNN-CNN layers for classification tasks.	","Proposed	","Kaur and Kaur, ""Improving BERT model for requirements classification by bidirectional LSTM-CNN deep model,"" Computer and Electrical Engineering, 2023.	",NO,NO,NO,NO,NO,NO,NO,"CNN-BPSO	","Optimizes CNN parameters using Binary Particle Swarm Optimization for better prediction accuracy.	","Proposed	","Bisi and Keskar, ""CNN-BPSO Approach to Select Optimal Values of CNN Parameters for Software Requirements Classification,"" IEEE India Council International Conference, 2020.	",NO,NO,NO,NO,NO,NO,NO,"NFRNet	","Deep Neural Network for extracting NFRs using BERT word embeddings and Bi-LSTM for classification.	","Proposed	","Li et al., ""NFRNet: A Deep Neural Network for Automatic Classification of Non-Functional Requirements,"" IEEE International Requirements Engineering Conference, 2021.	",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,"Name of the AI technique used: BERT, SVM, KNN, CNN, Bi-LSTM.
How AI is used to classify: AI techniques like BERT and CNN are used for deep learning to automatically classify requirements into FR and NFR. SVM and KNN are used for traditional machine learning classification.
Name of the AI tools used: Weka (for traditional machine learning), TensorFlow (for deep learning models).",,PROMISE_exp,"	538 labeled requirements","Used for training and testing machine learning models like SVM and KNN for classifying requirements as FR and NFR.
","New Spanish Dataset	",6222 requirements,"Created to explore classification techniques on non-English datasets, focusing on NFRs using methods such as SVM and CNN.
","Corpusa and Corpusn	",600 requirement statements,"Utilized in identifying atomic and non-atomic requirements using algorithms like Bayes Net, Random Forest, and Perceptron.
",,,,,,,,,,YES,"Security
Usability
Performance
Maintainability
Operability
",,NFRNet,"Deep Neural Network for extracting NFRs using BERT word embeddings and Bi-LSTM for classification.	",Proposed,"Li et al., ""NFRNet: A Deep Neural Network for Automatic Classification of Non-Functional Requirements,"" IEEE International Requirements Engineering Conference, 2021.	",NO,NO,NO,NO,NO,NO,NO,"CNN	","Convolutional Neural Network for classifying NFRs.	","Referenced	","Baker et al., ""Automatic Multi-class Non-Functional Software Requirements Classification Using Neural Networks,"" 2019.	",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenge: Lack of multilingual datasets and reliance on English-language requirements, affecting the applicability of classification models across different languages.
Solution: Development of new datasets, such as the New Spanish Dataset, to improve classification techniques in multiple languages.
",NO,,"PROMISE	","	538 labeled requirements","Used for training and testing models for classifying NFRs into categories like security, usability, performance, etc.
","NFR dataset	",Approximately 1000 NFRs.,"Used for training CNN models to classify NFRs into categories with high F-score.
",,,,,,,,,,,,,,,,NO,"Expanding the dataset to include more diverse languages to address the multilingual classification challenge.
Developing and evaluating new classification techniques that could improve accuracy across different languages.
Investigating the use of more sophisticated deep learning models or transfer learning techniques to further enhance classification performance.
Exploring the potential of hybrid models that combine both traditional machine learning algorithms and deep learning models for more robust classification outcomes."
222,Raharja 2019,Classification of non-functional requirements using fuzzy similarity KNN Based on ISO / IEC 25010,Consensus,222,"Classification of Non-Functional Requirements Using Fuzzy Similarity KNN Based on ISO / IEC 25010""",2019,"In developing software, one of the important roles is non-functional requirements. They are often forgotten by the developer, so that it causes adverse effects. For this reason, a non-functional requirement classification method is needed to make it easier for software developers to classify non-functional requirements from requirement documents. Most studies in this area are focusing on single label classification. However, a non-functional requirement sentence can be classified into more than one class. Therefore, a classification technique that supports multi-labels was needed. This research proposes a model for classifying non-functional requirements into quality aspects based on ISO/IEC 25010. It uses Fuzzy Similarity KNN (FSKNN) for building the sentence-based classification model. Six different datasets which contain 1432 sentences are used in the test. The best accuracy, precision, and recall values from classification using FSKNN are 42.8%, 68.1%, and 55.9% respectively.",Indonesia,Conference ,"12th International Conference on Information & Communication Technology and System (ICTS)

",Experimental Research; Empirical Study ; Design Science Research,"To propose a classification model for non-functional requirements (NFR) using Fuzzy Similarity KNN (FSKNN) based on ISO/IEC 25010, supporting multi-label classification of NFRs into quality aspects.",YES,,Fuzzy Similarity KNN ,"FSKNN uses a fuzzy similarity measure approach to calculate the similarity between terms, documents, and quality aspect categories in training data to obtain a training pattern. The patterns are grouped into clusters based on threshold values to find K-Nearest Neighbor (KNN) from the dataset. It supports multi-label classification.",Proposed,"Jiang, J. Y., Tsai, S. C., & Lee, S. I. (2012). FSKNN: Multi-label text categorization based on fuzzy similarity and k nearest neighbors. Expert Systems with Applications, 39(3), 2813-2821.",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Name of the AI technique used: Fuzzy Similarity KNN (FSKNN)
Detailed use of AI in classification: FSKNN uses a fuzzy similarity measure approach to calculate the similarity between terms, documents, and quality aspect categories in training data to form training patterns. These patterns are clustered using a threshold value to find the K-Nearest Neighbor (KNN), which allows multi-label classification.
Name of AI tools used: None specified.",,PROMISE Software Engineering Repository,585,Used for training and testing the model,iTrust Health Care System Requirement,186,Used for training and testing the model,CCHIT Ambulatory Requirements,285,Used for training and testing the model,World Vista US Veterans Health Care System,205,Used for training and testing the model,Online Project Marking System SRS,41,Used for training and testing the model,Mars Express ASPERA-3 Processing Facility,40,Used for training and testing the model,YES,"Functional Completeness
Functional Correctness
Functional Appropriateness
Time Behaviour
Resource Utilization
Capacity
Co-existence
Interoperability
Appropriateness
Learnability
Operability
User Error Protection
User Interface Aesthetics
Accessibility
Maturity
Availability
Fault Tolerance
Recoverability
Confidentiality
Integrity
Non-repudiation
Authenticity
Accountability
Modularity
Reusability
Analyzability
Modifiability
Testability
Adaptability
Installability
Replaceability",,Fuzzy Similarity KNN (FSKNN),"FSKNN uses a fuzzy similarity measure approach to calculate similarity between terms, documents, and quality aspect categories in training data to form training patterns. These patterns are clustered using a threshold value to find the K-Nearest Neighbor (KNN). It supports multi-label classification and is applied for classifying non-functional requirements based on ISO/IEC 25010 sub-categories.",Proposed,"Jiang, J. Y., Tsai, S. C., & Lee, S. I. (2012). FSKNN: Multi-label text categorization based on fuzzy similarity and k nearest neighbors. Expert Systems with Applications, 39(3), 2813-2821.",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,NO,,PROMISE Software Engineering Repository,585,Used for training and testing the model,iTrust Health Care System Requirement,186,Used for training and testing the model,CCHIT Ambulatory Requirements,285,Used for training and testing the model,World Vista US Veterans Health Care System,205,Used for training and testing the model,Online Project Marking System SRS,41,Used for training and testing the model,Mars Express ASPERA-3 Processing Facility,40,Used for training and testing the model,,,,NO,"Improving the FSKNN method for classifying non-functional requirements by adding feature selection in the form of a combined Feature Contribution Degree (FCD) method and the Latent Semantic Indexing (LSI) method.
Applying the Enhanced Porter Stemming Algorithm when stemming."
221,Sangounpao 2019,Ontology-Based Naive Bayes Short Text Classification Method for a Small Dataset,Consensus,221,Ontology-Based Naive Bayes Short Text Classification Method for a Small Dataset,2019,"Content less than two hundred words like comments or review statements is known as short text. Short text classification is useful for automatically categorizing sentences into predefined groups. There are several traditional short text classification methods, such as using bag-of-words with k nearest neighbors (k-NN), Naïve Bayes, Maximum entropy, support vector machines (SVMs), and an algorithm based on statistics and rules. The deep learning method outperforms other methods in classifying short text with a normal-sized dataset. However, there is no research on multi-classification of functional requirements with a small dataset, particularly in the accounting field. This paper presents an approach to classify short text for a small dataset into multiple categories of functional requirements in the accounting domain using ontology to construct bag-of-words and Naive Bayes for classification. The experiment was conducted using 400 datasets with 5-fold and 10-fold cross-validation. The result shows that the method can correctly classify more than 80%. Additionally, comparisons between the ontology-based Naive Bayes method and other methods are investigated.
",Thailand ,Conference ,"IEEE 2019 SNPD, Toyama, Japan",Experimental Research; Empirical Study ,"To propose an ontology-based Naïve Bayes short text classification method for a small dataset, specifically in the accounting domain, to categorize requirements statements into multiple categories.",YES,,"Ontology-Based Naïve Bayes Method	","A method using ontology to construct unique bag-of-words for Naive Bayes classification on a small dataset.	",Proposed,"Kurtanović, Z., & Maalej, W. (2017). ""Automatically Classifying Functional and Non-functional Requirements Using Supervised Machine Learning."" 2017 IEEE 25th International Requirements Engineering Conference (RE), Lisbon, Portugal, pp. 490-495. DOI: 10.1109/RE.2017.60.",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Name of AI Technique: Naïve Bayes
Details of AI Use: The ontology-based Naïve Bayes method constructs unique bag-of-words and applies Naive Bayes classification to categorize requirements statements into multiple categories.
Name of AI Tools: NO",,"Accounting Software Requirement Statements	","439 items	","Used to create bag-of-words with N-grams and classify requirements statements.
","U.S. GAAP Statements	","378 items	","Used for classification comparison using ontology-based Naïve Bayes and PCA methods.
",,,,,,,,,,,,,NO,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,NO,"An extended method to check the completeness of requirements statements for accounting systems.
The method will be evaluated with more case studies ."
220,Li 2022,Automatic Requirements Classification Based on Graph Attention Network,Consensus,220,Automatic Requirements Classification Based on Graph Attention Network.,2022,"Requirements classification is a significant task for requirements engineering, which is time-consuming and challenging. The traditional requirements classification models usually rely on manual pre-processing and have poor generalization capability. Moreover, these traditional models ignore the sentence structure and syntactic information in requirements. To address these problems, we propose an automatic requirements classification based BERT and graph attention network (GAT), called DBGAT. We construct dependency parse trees and then utilize the GAT for mining the implicit structure feature and syntactic feature of requirements. In addition, we introduce BERT to improve the generalization ability of the model. Experimental results of the PROMISE datasets demonstrate that our proposed DBGAT significantly outperforms existing state-of-the-art methods. Moreover, we investigate the impact of graph construction methods on non-functional requirements classification. DBGAT achieved the best classification results on both seen (F1-scores of up to 91%) and unseen projects (F1-scores of up to 88%), further demonstrating the strong generalization ability.",China,Journal,IEE Access,Experimental Research; Empirical Study ; Design Science Research,"to propose an automatic requirements classification model that integrates a graph model into the requirements representation, focusing on improving the generalization ability and classification accuracy using BERT and Graph Attention Networks (GAT).",YES,,"Dependency-Based Graph Attention Network (DBGAT)	","Utilizes dependency parse trees for graph construction and BERT for initial node embedding to capture syntactic features and generalization ability.	",Proposed,"G. Li et al., 2022, ""Automatic Requirements Classification Based on Graph Attention Network"", IEEE Access, doi:10.1109/ACCESS.2022.3159238	",NO,NO,NO,NO,NO,"Sklearn library	","General-purpose tools used to implement machine learning techniques.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"(i) Name of the AI technique used:
Graph Attention Network (GAT), BERT.

(ii) In detail, how AI is used to classify between functional and non-functional requirements:
The study uses a Graph Attention Network (GAT) to capture the structural and syntactic features of requirements sentences based on a dependency graph. BERT is used for initializing node embeddings to enhance the generalization capabilities and better capture the linguistic nuances. The combined model (DBGAT) is applied to classify requirements into functional and non-functional categories and further into sub-categories.

(iii) Name of the AI tools used:
PyTorch (for implementing deep learning models like BERT and GAT).",,"PROMISE Dataset	","625 requirements statements (255 FRs, 370 NFRs)	","Used for training and testing the classification models (DBGAT) with 10-fold and project-level cross-validation.
","Concordia RE Corpus	","3064 annotated sentences (including 4 NFR types)	","Used to test the generalization capability of the model on unseen non-functional requirements.
",,,,,,,,,,,,,YES,"Usability
Security
Operability
Performance",,"Dependency-Based Graph Attention Network (DBGAT)	","Uses dependency graph construction to represent syntactic relations and BERT for node initialization to classify non-functional requirements into sub-categories.	",Proposed,"G. Li et al., 2022, ""Automatic Requirements Classification Based on Graph Attention Network"", IEEE Access, doi:10.1109/ACCESS.2022.3159238",NO,NO,NO,NO,NO,Sklearn library,"General-purpose tools used to implement machine learning techniques and to provide baseline models
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenge: Unbalanced datasets may threaten the validity of statistical findings.
How it could be addressed: Expanding the dataset through data annotation by the research team to improve the model's capability and better adapt to actual project requirements.",NO,,"PROMISE Dataset	","625 requirements statements (255 FRs, 370 NFRs)	","Used for training and testing the classification models (DBGAT) with 10-fold and project-level cross-validation for sub-categories.
","Concordia RE Corpus	","3064 annotated sentences (including 4 NFR types)	","Used to test the generalization capability of the model on unseen non-functional requirements and their sub-categories.
",,,,,,,,,,,,,,,,NO,"Focus on dynamic graph structures for non-functional requirement classification tasks.
"
219,Wang 2018,Can app changelogs improve requirements classification from app reviews?: An exploratory study,Consensus,219,Can App Changelogs Improve Requirements Classification from App Reviews? An Exploratory Study,Can App Changelogs Improve Requirements Classification from App Reviews? An Exploratory Study,"
[Background] Recent research on mining app reviews for 
software evolution indicated that the elicitation and analysis of 
user requirements can benefit from supplementing user reviews by 
data from other sources. However, only a few studies reported
results of leveraging app changelogs together with app reviews
.
[Aims] Motivated by those findings, this exploratory experimental 
study looks into the role of app changelogs in the classification of 
requirements derived from app reviews. We aim at understanding 
if the use of app changelogs can lead to more accurate 
identification and classification of functional and non
-
functional 
requirements from app reviews. We also want to know which 
classification technique works better in this context
. 
[Method] 
We did a case study on the effect of app changelogs on automatic 
classification of app reviews. Specifically, manual labeling, text 
preprocessing
, 
and four supervised machine learning algorithms 
were applied to a series of experiments, varying in the number of 
app changelogs in the experimental data. [Results] We compared 
the accuracy of requirements classification from app reviews, by 
training the four classifiers with varying combinations of app 
reviews and changelogs. Among the four algorithms
, 
Naïve Bayes
was found to be more accurate for categorizing app reviews. 
[Conclusions] The results show that official app changelogs did 
not contribute to more accurate identification and classification of 
requirements from app reviews. In addition, Naïve Bayes seems to 
be more suitable for our further research on this topic
","China
Netherlands",Conference ,12th International Symposium on Empirical Software Engineering and Measurement (ESEM’18),Experimental Research; Case Study ,to explore whether app changelogs can improve the automatic classification of functional and non-functional requirements from app reviews.,YES,,"Naïve Bayes	","A supervised machine learning algorithm used to classify app reviews into functional and non-functional requirements.	","Referenced	","[1] Maalej, W., Kurtanovic, Z., Nabil, H., & Stanik, C. (2016). On the automatic classification of app reviews. Requirements Engineering, 21(3), 311-331. https://doi.org/10.1007/s00766-016-0251-7

[9] Lu, M., & Liang, P. (2017). Automatic Classification of Non-Functional Requirements from Augmented App User Reviews. In Proceedings of the 21st International Conference on Evaluation and Assessment in Software Engineering (EASE '17), 344-353. https://doi.org/10.1145/3084226.3084274",NO,NO,NO,NO,NO,NO,NO,Bagging,"An ensemble method that combines the predictions of multiple classifiers to improve classification performance.	",Referenced,NO,NO,NO,NO,NO,NO,NO,NO,"J48	","A decision tree classifier that builds a decision tree based on the most informative attributes for classification.	",Referenced,NO,NO,NO,NO,NO,NO,NO,NO,"KNN	","A non-parametric algorithm that classifies instances based on the majority vote of the nearest neighbors.	","Referenced	",NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,"Name of the AI Techniques: Naïve Bayes, Bagging, J48, KNN
Usage: These AI techniques were used to classify app reviews into functional and non-functional requirements by training classifiers on labeled datasets of app reviews and changelogs.
AI Tools Used: Weka (a suite of machine learning tools written in Java)
",,"App Reviews	","6000 sentences	","Used as training and test sets for classification algorithms to evaluate the impact of app changelogs on the classification accuracy.
","App Changelogs	","2024 changes	","Used as additional data to train and evaluate the classifiers in conjunction with app reviews to test if changelogs improve classification accuracy.
",,,,,,,,,,,,,YES,"Usability
Reliability
Portability
Performance",,Naïve Bayes,"A supervised machine learning algorithm used to classify app reviews into usability, reliability, portability, and performance.	",Referenced,"[1] Maalej, W., Kurtanovic, Z., Nabil, H., & Stanik, C. (2016). On the automatic classification of app reviews. Requirements Engineering, 21(3), 311-331. https://doi.org/10.1007/s00766-016-0251-7

[9] Lu, M., & Liang, P. (2017). Automatic Classification of Non-Functional Requirements from Augmented App User Reviews. In Proceedings of the 21st International Conference on Evaluation and Assessment in Software Engineering (EASE '17), 344-353. https://doi.org/10.1145/3084226.3084274","NO	","NO	","NO	","NO	","NO	","NO	","NO	",Bagging,"An ensemble method that combines the predictions of multiple classifiers to improve classification performance.	",Referenced,"NO	","NO	","NO	","NO	","NO	","NO	","NO	","NO	",J48,"A decision tree classifier that builds a decision tree based on the most informative attributes for classification.	",Referenced,"NO	","NO	","NO	","NO	","NO	","NO	","NO	","NO	",KNN,"A non-parametric algorithm that classifies instances based on the majority vote of the nearest neighbors.	",Referenced,"NO	","NO	","NO	","NO	","NO	","NO	","NO	","NO	",,,,,,,,,,,,,,,,,,,,,,,"Challenge 1: The high variability in the wording of app reviews makes it difficult to consistently classify them into specific requirements types.
How to Address: Improving feature extraction and selection methods to better capture the nuances in language used in app reviews.
Challenge 2: The differences in the proportion of requirement types between app reviews and changelogs affect classification accuracy.
How to Address: Exploring the impact of unbalanced datasets on the accuracy of classification and adjusting the training data accordingly.
",NO,,"App Reviews	","6000 sentences	","Used to train classifiers to distinguish NFR sub-categories.
","App Changelogs	","2024 changes	","Used as additional data for training classifiers.
",,,,,,,,,,,,,,,,NO,"Re-evaluating the influence of using app changelogs on requirements classification by adjusting the proportions of different types of requirements in the samples.
Investigating methods for improving the accuracy of classifying requirements from app reviews, such as introducing better feature extraction techniques."
218,MirKhatian 2021,Comparative Analysis for Predicting Non-Functional Requirements using Supervised Machine Learning,Consensus,218,Comparative Analysis for Predicting Non-Functional Requirements using Supervised Machine Learning,2021,"Functional and non-functional requirements are two important aspects of the requirements gathering phase (RGP) in any system development lifecycle (SDLC) model. The FRs are much simpler to understand and easily extractable from the user stories at RGP. On the other hand, the non-functional requirements (NFRs) are critical but play a significant role in improving the quality of the product and are used in determining the acceptance of a designed system. Inside the NFR, several quality factors focus on the specific quality attribute of a system, like security, performance, reliability, etc. To classify the NFRs for each category is a challenging task. This paper mainly focuses on the prediction of the requirements classification of NFRs by using supervised machine learning (ML) algorithms followed by comparative analysis on five different ML algorithms: decision tree, k-nearest neighbor (KNN), random forest classifier (RFC), naïve Bayes, and logistic regression (LR). The study has been conducted in two phases. In the first phase, the model has been designed which accepts a dataset containing textual data where 11 quality attributes are focused on for prediction, and evaluation is done based on 15% of test data and 85% of training data, while in the second phase, the performance of each algorithm is evaluated based on four different evaluation metrics: precision, recall, accuracy, and confusion matrix. The exhaustive results of the comparative analysis demonstrate that the performance of the LR algorithm is the best of all algorithms with very high prediction rates and 75% accuracy. Besides, the naïve Bayes resulted in 66% accuracy at second place, the decision tree provided 60% accuracy and marked third, the RFC with 53% accuracy being at fourth, and KNN with 50% accuracy being the lowest of all. The LR algorithm should be preferred for the prediction of the classification of NFRs.","Pakistan
Saudi Arabia",Conference ,2021 1st International Conference on Artificial Intelligence and Data Analytics (CAIDA).,Experimental Research; Empirical Study ; Other: Comparative Analysis,to predict and classify non-functional requirements using supervised machine learning algorithms and to perform a comparative analysis to find the optimal algorithm with the best prediction accuracy and performance measures.,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Performance
Security
Usability
Availability
Look and Feel
Legal
Maintainability
Scalability
Operability
Portability
Fault Tolerance
",,"Decision Tree	","Machine learning algorithm used for classifying NFRs based on various parameters.	",Referenced,NO,NO,NO,NO,NO,NO,NO,NO,"K-Nearest Neighbor (KNN)	","Algorithm used to classify NFRs by finding the nearest data points in the dataset.	",Referenced,NO,NO,NO,NO,NO,NO,NO,NO,"Random Forest Classifier (RFC)	","Ensemble learning method used to improve classification performance.	",Referenced,NO,NO,NO,NO,NO,NO,NO, NO,"Naïve Bayes	","A probabilistic classifier based on Bayes’ theorem, used for NFR classification.	",Referenced,NO,NO,NO,NO,NO,NO,NO,NO,"Logistic Regression (LR)	","A regression algorithm used to classify NFRs, found to have the best performance in the study.	",Referenced,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,"(i) Challenges Mentioned:
The high level of inconsistencies in documenting requirements.
No specific solutions mentioned.
(ii) How Challenges Could Be Addressed: The study suggests that improving dataset quality and algorithm selection could help in better classification .",NO,,NO,"A publicly available dataset was used containing textual data related to functional and non-functional requirements with quality attributes like performance, security, usability, ",The dataset was used to train and test the machine learning models with 85% of the data allocated for training and 15% for testin,,,,,,,,,,,,,,,,,,,NO,"Comparative analysis of more algorithms for predicting non-functional requirements.
"
213,Quba 2021,Software Requirements Classification using Machine Learning algorithm's,Consensus,213,Software Requirements Classification using Machine Learning Algorithms.,2021,"The world is growing and developing 
rapidly, and the demand for software has been increasing 
speedily, any software has many steps for building a
program and all the steps are important for software 
requirements. Requirements classification can be applied 
manually, which requires great effort, time, cost and the 
accuracy may vary. Therefore, many previous researchv 
has been proposed to automate the classification process, 
but the automation process of the classification was not 
sufficient. In this study, we will propose a technique to 
automatically classify software requirements using 
machine learning to represent text data from software 
requirements specification and classify requirement to 
group Functional Requirement and Non-Functional 
Requirement. The experimented dataset in this study was 
the PROMISE_exp, which includes labeled requirements. 
All the documents of software from the database were 
changed (cleaned) with a set of steps (normalization, 
extractions, selection any techniques that will be used.
The BoW used SVM algorithm or KNN algorithm for 
classification. 
This study used data from the 
PROMISE_exp to do the work, the information of the 
steps used to re-performed the classification, and the 
Measurement BoW, when using SVM and KNN 
algorithms the classification of requirements making can 
serve as a way and resources for another study. It can be 
seen that the use of BoW with SVM is better than use 
KNN algorithms with an average F-measure of all cases 
of 0.74. In future work we intend to improve to technique 
with make merge and change some algorithms as Logiest 
Regression to improve the Accuracy ( Precision) of our 
model.",Jordan,Conference ,2021 International Conference on Information Technology (ICIT),Experimental Research,To propose a technique for automatically classifying software requirements using machine learning to distinguish between Functional Requirements (FR) and Non-Functional Requirements (NFR,YES,,"BoW with SVM and KNN	","Bag of Words (BoW) technique using SVM and KNN algorithms to classify requirements into FR and NFR	","Referenced	","[1] Rahimi, N., Eassa, F. and Elrefaei, L., 2020. An Ensemble Machine Learning Technique for Functional Requirement Classification. Symmetry, 12(10), p.1601.	",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Name of AI technique: Support Vector Machine (SVM) and K-Nearest Neighbors (KNN)
Usage in Classification: Used to classify software requirements into functional and non-functional categories.
AI Tools Used: NO ",,PROMISE_exp,255 FRs and 370 NFRs,To train and test the ML models (SVM and KNN) ,,,,,,,,,,,,,,,,YES,"Availability
Performance
Security
Usability
Portability
Reliability
Others .",,"Bag of Words (BoW) with SVM and KNN	","Uses BoW technique along with Support Vector Machine (SVM) and K-Nearest Neighbors (KNN) algorithms to classify non-functional requirements (NFR) into sub-categories such as Availability, Performance, Security, etc.	","Referenced	","Dias Canedo, E. and Cordeiro Mendes, B., 2020. Software Requirements Classification Using Machine Learning Algorithms. Entropy, 22(9), p.1057.	",NO,NO,NO,NO,NO,NO,NO,"Term Frequency–Inverse Document Frequency (TF-IDF) with Logistic Regression	","Utilizes TF-IDF method for feature extraction combined with Logistic Regression to achieve classification of nonfunctional requirements into sub-categories with high accuracy.	","Referenced	","Dash, R., Paramguru, R.L. and Dash, R., 2011. Comparative analysis of supervised and unsupervised discretization techniques. International Journal of Advances in Science and Technology, 2(3), pp.29-37.	",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenge: The limited size of the dataset affects the accuracy of classification.
Addressed by: Suggesting the use of additional datasets or advanced algorithms","NO

",,PROMISE_exp,255 FRs and 370 NFRs divided into 11 sub-categories,For training and testing the ML models .,,,,,,,,,,,,,,,,,,,"NO

","Improve the classification technique by integrating and modifying other algorithms, like Logistic Regression, to enhance accuracy"
212,Hey 2020,NoRBERT: Transfer Learning for Requirements Classification,Consensus,212, NoRBERT: Transfer Learning for Requirements Classification,2020,"Classifying requirements is crucial for automatically handling natural language requirements. The performance of existing automatic classification approaches diminishes when applied to unseen projects due to variations in wording and style, leading to poor generalization. This study proposes NoRBERT, a model that fine-tunes BERT for transfer learning in requirements classification. The approach demonstrates improved results (F1-scores of up to 94%) on both seen and unseen projects when classifying functional and non-functional requirements using the PROMISE NFR dataset. NoRBERT also outperforms recent approaches in classifying non-functional requirements subclasses, achieving an average F1-score of 87%. The model is evaluated on a relabeled version of the PROMISE NFR dataset, showing a 15 percentage point improvement in average F1-score over recent methods. Additionally, NoRBERT classifies functional requirements by concerns (function, data, behavior) and achieves an F1-score of up to 92%.",Germany,Conference , IEEE 28th International Requirements Engineering Conference (RE),Experimental Research; Empirical Study ,"to improve the classification of requirements in natural language documents, particularly distinguishing between functional and non-functional requirements, by using a transfer learning approach (NoRBERT) that fine-tunes BERT for enhanced performance and generalizability on unseen projects.",YES,,"NoRBERT	","Fine-tunes BERT for classifying functional and non-functional requirements in unseen projects.	",Proposed,NO,NoRBERT,"Classification of requirements using BERT	",Deployed,Proposed,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"(i) The name of the AI technique used: Transfer learning using BERT.
(ii) How is AI used to classify between functional requirements and non-functional requirements?
NoRBERT fine-tunes BERT, a pre-trained language model, to classify requirements. BERT's fine-tuning involves training the model on the PROMISE NFR dataset to learn the distinction between functional and non-functional requirements. The AI model uses context from both directions (bidirectional training) and masked language modeling to predict whether a word sequence represents a functional or non-functional requirement.
(iii) The name of the AI tools used: BERT (Bidirectional Encoder Representations from Transformers).",,"PROMISE NFR Dataset	","625 requirements from 15 projects, including 255 functional and 370 non-functional requirements	","Used for training and testing NoRBERT to classify requirements as functional or non-functional
","Relabeled PROMISE NFR	",612 requirements relabeled by Dalpiaz,"Used to compare the performance of NoRBERT with other approaches on a refined dataset with corrected labels
",,,,,,,,,,,,,YES,"Usability
Security
Operational
Performance",,"NoRBERT	","Fine-tunes BERT for classifying non-functional requirements subclasses, such as Usability, Security, Operational, and Performance.	",Proposed,NO,NoRBERT,"Classification of non-functional requirements using BERT	",Deployed,Proposed,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"(i) Challenge: The lack of training data for requirements classification leads to overfitting, reducing generalizability to unseen projects. Additionally, many existing models are heavily dependent on specific wording and sentence structures, which vary across different projects.
(ii) How the challenge could be addressed: Transfer learning is proposed as a solution, as it leverages pre-trained models like BERT that generalize well even with limited training data.
",NO,,"PROMISE NFR Dataset	","NFR subclasses (Usability, Security, Operational, Performance)	","Used to train NoRBERT for classification into sub-categories of non-functional requirements
",,,,,,,,,,,,,,,,,,,NO,"Further exploration into enhancing the generalizability of requirements classification models using transfer learning.
Development of models that require minimal training data to perform well on unseen projects.
Exploration of new architectures that can leverage domain-specific knowledge for more accurate classification of requirements."
209,Sabir 2020,Multi-label Classifier to Deal with Misclassification in Non-functional Requirements,Consensus,209,Multi-label Classifier to Deal with Misclassification in Non-functional Requirements,2020,"The paper presents a new approach using a convolutional neural network (CNN) based multi-label classifier to classify stakeholder requirements into five non-functional requirement (NFR) classes: reliability, usability, portability, maintainability, and efficiency. The approach aims to address existing classification issues such as misclassification and manual labeling limitations.","USA
Portugal
France",Conference ,"he proceedings of the ""2020 World Conference on Information Systems and Technologies (WorldCIST’20)"".",Experimental Research,"to develop a machine learning-based approach, specifically a convolution neural network (CNN), to improve the classification of non-functional requirements (NFRs) by addressing common issues such as misclassification and the need for manual labeling.
",NO,,NO,NO, NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Reliability
Usability
Portability
Maintainability
Efficiency
",,"Convolution Neural Network (CNN) Based Multi-label Classifier	","Utilizes a CNN model to classify requirements into five NFR categories: reliability, usability, portability, maintainability, and efficiency	","Proposed	","Cleland-Huang, J., Settimi, R., Zou, X., & Solc, P. (2007). Automated classification of non-functional requirements. Requirements Engineering, 12, 103–120. DOI: 10.1007/s00766-007-0045-1.

Ormandjieva, O. (2013). Ontology-based classification of non-functional requirements in software specifications: a new corpus and SVM-based classifier. In Proceedings of the 37th Annual IEEE Computer Software and Applications Conference (COMPSAC) (pp. 759-768). DOI: 10.1109/COMPSAC.2013.64.

Slankas, J., & Williams, L. (2013). Automated extraction of non-functional requirements in available documentation. In NaturaLiSE 2013 - Proceedings of the 2013 1st International Workshop on Natural Language Analysis in Software Engineering (pp. 9-16). DOI: 10.1109/NAturaLiSE.2013.6611715.",NO SPECIFIC NAME,"Designed for automatic classification of NFRs into multiple categories, improving upon existing methods' limitations	",Developed,Proposed,NO,Word2Vec,"Used for feature extraction to enhance classification performance
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,The study mentions challenges related to misclassification due to inadequate feature extraction and limited generalizability of current methods.No,NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,NO," Future research directions include improving feature extraction techniques, such as using deep learning methods like word2vec, and addressing the challenges of multi-label classification."
208,Leelaprute 2022,A comparative study on vectorization methods for non-functional requirements classification,Consensus,208,A comparative study on vectorization methods for non-functional requirements classification.,2022,"Context: Identifying non-functional requirements (NFRs) and their categories at the early phase is crucial
for analysts to design software systems and recognize constraints. Automatic non-functional requirements
classification methods have been studied for reducing the costs of that labor-intensive task. Our previous
study focused on the differences among vectorization methods that converted requirements written in
natural language into numerical vectors for classification. It had some limitations regarding the number of
datasets used, the types of vectorization methods supporting pre-trained data, and the performance evaluation
procedure.
Objective: To examine whether different vectorization methods lead to differences in the classification
performance of NFRs and their categories with extended settings.
Methods: Comparative experiments were conducted with five open data. Nine vectorization methods, includ-
ing ones with pre-trained data and four supervised classification methods, were supplied. Performance was
evaluated with AUC and Scott-Knott ESD test.
Results: Some advanced methods could achieve better performance than traditional ones when combined with
some classifiers. The use of pre-trained data was useful for some categories.
Conclusion: It is beneficial to consider using some combinations of vectorization methods and classifiers for classifying non-functional requirements categories. ","Thailand
Japan",Journal, Information and Software Technology,Experimental Research; Other: Comparative Study ,To examine whether different vectorization methods lead to differences in the classification performance of non-functional requirements (NFRs) and their categories with extended settings.,YES,,"Term Frequency (TF)	","Counts the occurrence number of words in a document.	",Proposed,"Leelaprute, Pattara, and Sousuke Amasaki. ""A comparative study on vectorization methods for non-functional requirements classification."" Information and Software Technology 150 (2022): 106991.	",NO,NO,NO,NO,NO,NO,NO,"TF-IDF	","Compensates the weakness of TF by considering the importance of words.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,"Word2Vec	","Learns distributed representations of words using either Skip-gram or Continuous Bag-of-Words models.	","Referenced	",NO,NO,NO,NO,NO,NO,NO,NO,"SCDV (Sparse Composite Document Vectors)	","Combines Word2Vec and a Gaussian Mixture Model (GMM) clustering algorithm to account for the distinction of semantic meanings of words among documents.	",Referenced,NO,NO,NO,NO,NO,NO,NO,NO,"Glove	","Learns distributed representations for words using aggregated global word-word co-occurrence statistics from a corpus.	",Referenced,NO,NO,NO,NO,NO,NO,NO,NO,"FastText	","Similar to Word2Vec, but represents a word by a sum of distributed representations of its sub-words, advantageous for capturing the meaning of word prefixes.	",Referenced,NO,NO,NO,NO,NO,NO,,,"(i) Name of the AI Technique:
Supervised Machine Learning
Convolutional Neural Networks (CNN)
Recurrent Neural Networks (RNN)
Support Vector Machines (SVM)
Naive Bayes
Transfer Learning (BERT-based Models)
(ii) How AI is Used:
The AI techniques were used to classify non-functional requirements (NFRs) by applying vectorization methods to convert textual requirements into numerical vectors, which were then fed into the machine learning models for classification.
SVM and Naive Bayes were combined with different vectorization techniques like Word2Vec, Glove, and Sentence-BERT to classify functional and non-functional requirements. RNN and CNN were used for deeper analysis and processing of textual data to enhance classification performance.
(iii) Name of the AI Tools Used:
TensorFlow
Scikit-Learn
BERT",,CCHIT,"Requirements data for classifying functional and non-functional requirements.	","Used to evaluate classification performance with different vectorization methods and machine learning algorithms.
",Emprfp12,"Eight non-functional requirement categories including access control, audit, database design, legal, maintainability, etc.	","Used for evaluating non-functional requirement classification into specific categories with various AI models.
",iTrust,"Used for access control, audit, database design, and security classifications.	","Used to determine the effectiveness of vectorization and classification methods in different non-functional categories.
","Lacountyehr	","Requirements data including functional and several non-functional categories.	","Used to compare the performance of different vectorization techniques in classifying both functional and non-functional requirements.
",,,,,,,YES,"Access Control (AC)
Audit (AU)
Availability (AV)
Legal (LG)
Look & Feel (LF)
Maintenance (MT)
Operational (OP)
Privacy (PR)
Performance & Scalability (PS)
Recoverability (RC)
Reliability (RL)
Security (SC)
Usability (US)
",,"Term Frequency (TF)	","Counts the occurrence number of words in a document.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,"TF-IDF	","Compensates the weakness of TF by considering the importance of words.	","Referenced	","Leelaprute, Pattara, and Sousuke Amasaki. ""A comparative study on vectorization methods for non-functional requirements classification."" Information and Software Technology 150 (2022): 106991.	",NO,NO,NO,NO,NO,NO,NO,"Word2Vec	","Learns distributed representations of words using either Skip-gram or Continuous Bag-of-Words models.	","Referenced	",NO,NO,NO,NO,NO,NO,NO,NO,"Doc2Vec	","Learns dimensional numerical presentations of a document using Distributed Bag-Of-Words (DBOW) or Distributed Memory model of Paragraph Vectors (DMPV).	","Referenced	",NO,NO,NO,NO,NO,NO,NO,NO,"SCDV (Sparse Composite Document Vectors)	","Combines Word2Vec and a Gaussian Mixture Model (GMM) clustering algorithm to account for the distinction of semantic meanings of words among documents.	","Referenced	",NO,NO,NO,NO,NO,NO,NO,NO,"Glove	","Learns distributed representations for words using aggregated global word-word co-occurrence statistics from a corpus.	","Referenced	",NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,Emprfp12,"Eight non-functional requirement categories including access control, audit, database design, legal, maintainability, etc.	","Used for evaluating non-functional requirement classification into specific categories with various AI models.
",Lacountyehr,"Requirements data including functional and several non-functional categories.	","Used to compare the performance of different vectorization techniques in classifying both functional and non-functional requirements.
",,,,,,,,,,,,,,,,NO,"NO
"
206,Handa 2020,An Inclusive Study of Several Machine Learning Based Non-functional Requirements Prediction Techniques,Consensus,206,A Taxonomy of Methods for Handling Data Streams in Presence of Concept Drifts,2020,Concept drift is the scenario in online learning where the value of the target variable changes over time. The paper discusses adaptive algorithms used for learning from evolving data with different changing patterns and addresses real-world problems related to concept drift.,India,Other: Book Chapter,"Presented at the Futuristic Trends in Network and Computing Technologies (FTNCT) 2019 conference, Revised Selected Papers.
",Empirical Study ; Theoretical Study  ,To discuss adaptive algorithms for managing concept drift in data streams and provide a taxonomy of methods to handle these challenges effectively.,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,v,,,,,,,,,,,,,,,,YES,"Usability
Modifiability
Reliability
Portability
Scalability
Maintainability
Adaptability
Variability
Volatility
Customizability",,"FSKNN (Fuzzy Similarity Based K-Nearest Neighbor)	","A requirement sentences-based classification algorithm for identifying NFRs. It classifies different non-functional requirements from text documents by measuring the semantic relatedness between different classes and terms.	",Proposed,"Ramadhani et al. 2015, ""Classification of Non-Functional Requirements using Semantic-FSKNN based ISO/IEC 9126,"" Telkomnika 13(4), 1456.	","NFR Locator	","Used to extract and classify sentences into 14 predefined categories. Utilizes a k-NN classifier to identify similar types of sentences in documents, helping analysts extract relevant non-functional requirements.	",Developed ,Referenced,"Slankas and Williams 2013, ""Automated Extraction of Non-Functional Requirements in Available Documentation,"" NaturaLiSE, pp. 9–16, May 2013.	","k-NN classifier	","Used to identify sentences based on their similarity, contributing to improved classification results.
","k-NN Classifier	","Utilizes machine learning to automatically classify non-functional requirements based on natural language artifacts. Groups sentences into categories such as security requirements, which helps in translating them into functional security requirements.	","Proposed	","Riaz et al. 2014, ""Hidden in Plain Sight: Automatically Identifying Security Requirements from Natural Language Artifacts,"" IEEE 22nd International Requirements Engineering Conference (RE), pp. 183–192, August 2014.	",NOT MENTIONED ,"Focuses on identifying and classifying requirements related to security from natural language texts.	",Developed,Proposed,NO,NO,NO,"Unsupervised Approach (Custom Technique)	","A technique for detecting and classifying non-functional requirements using an unsupervised method, which avoids the need for a large training dataset. Uses semantic similarity measures for words in the context of software requirements.	","Proposed	","Mahmoud and Williams 2016, ""Detecting, Classifying, and Tracing Non-Functional Software Requirements,"" Requirements Engineering 21(3), 357–381.	",NOT MENTIONED ,"Operates without any dataset, making it scalable for larger systems without the need for substantial time and space resources.	",Developed,Proposed,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenge: The lack of a standard dataset and diverse terminology in natural language documents makes it difficult to consistently classify non-functional requirements.
Solution Proposed: The study suggests developing a more standardized dataset and using advanced machine learning techniques to improve the accuracy of classification. Meta-heuristic techniques could also be employed to better handle parameter tuning issues","Type of Nonfunctional Requirements: Usability, Performance, Security, etc.
Details of the Case Study(s): Involves the classification of non-functional requirements from software requirement specifications (SRS) documents and user stories using various machine learning techniques like k-NN, Naive Bayes, and Rule-based algorithms​(978-981-15-4451-4).
Type of Case Study: Empirical studies that validate the accuracy and effectiveness of classification techniques.",,"PROMISE Repository	","Various NFR-related documents	","Used to train and test machine learning algorithms for the classification of non-functional requirements into subcategories.
","SMART Trip, SafeDrink, Blue Wallet	","Requirements documents and SRS	","Used in multiple studies for testing the proposed machine learning models for NFR classification in different domains.
",,,,,,,,,,,,,,,,"Context: Discusses the necessity of presenting non-functional requirements clearly in early development stages to prevent misunderstandings and misclassifications.
Proposed Approach: The study suggests using automated tools and frameworks that help to better document non-functional requirements through structured formats that are easy to interpret by both developers and stakeholders​","Future research should focus on creating standardized datasets for non-functional requirements, exploring new machine learning techniques like meta-learning and ensembling, and integrating requirements classification with automated tools to reduce human intervention and improve accuracy"
205,Amro 2023,Arabic Non-Functional Requirements Extraction Using Machine Learning,Consensus,205,Arabic Non-Functional Requirements Extraction Using Machine Learning.,2023,"Non-Functional Requirements (NFR) are a set of quality attributes that software must have, such as security, reliability, and performance. Extracting NFR from software requirement specifications can help developers deliver quality software that meets users' expectations. However, since functional and non-functional requirements are mixed in the same SRS, it requires a lot of human effort to distinguish them. While many studies have proposed English language requirements extracting techniques, there is a lack of research in Arabic requirements extracting, as well as a lack of publicly available Arabic datasets in this field. In this study, we propose an automatic NFR extraction method for quality software development by combining machine learning and feature extraction techniques. Also, we will collect an Arabic dataset for requirements. This study aims to help software engineers save time, reduce costs and effort in the manual extraction process, and make the requirements engineering phase more efficient. Additionally, it provides new research areas in this field.",Jordan,Conference ,"2023 International Conference on Information Technology (ICIT).
",Experimental Research; Empirical Study ,"to develop a robust and efficient method that can accurately distinguish between functional and non-functional requirements in Arabic Software Requirement Specifications (SRS) using machine learning and feature extraction techniques.
",YES,,"Machine Learning (KNN with TF-IDF feature extraction)	","Combines KNN classifier with TF-IDF to classify Arabic NFRs.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"(i) Name of the AI technique: K-Nearest Neighbors (KNN).
(ii) How AI is used: The KNN classifier with TF-IDF feature extraction is used to automatically classify Arabic NFRs. The model is trained using cross-validation with 5 folds to enhance its robustness and minimize overfitting.
(iii) AI tools used: NO specific tools mentioned beyond the KNN algorithm.",,NO," A comprehensive dataset of Arabic Non-Functional requirements documents curated from industry standards, academic publications, and online repositories",The dataset was split into training and test sets for model training and evaluation,,,,,,,,,,,,,,,,NO,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,NO,"Future research directions include exploring alternative extraction algorithms (e.g., decision trees, random forests, support vector machines), incorporating advanced NLP techniques (e.g., semantic analysis, named entity recognition), utilizing pre-trained language models like BERT and GPT, and expanding the dataset to encompass more NFRs and domains."
204,Bisi 2020,CNN-BPSO approach to Select Optimal Values of CNN Parameters for Software Requirements Classification,Consensus,204,"CNN-BPSO Approach to Select Optimal Values of CNN Parameters for Software Requirements Classification.

",2020,"Software requirement analysis plays a vital role in Software Development Life Cycle (SDLC). Users' requests are transformed into structured software requirements. It is required to know the class of requirements that each request belongs to. Manual classification of these requirements is time-consuming. In this work, a Convolutional Neural Network (CNN) model is proposed to classify software requirements into functional and non-functional. The performance of CNN is affected by model architecture, embedding input word vectors, filter region size, and the number of filters. In this work, Binary Particle Swarm Optimization (BPSO) is used to optimize the above parameters of CNN (CNN-BPSO) to improve the performance of CNN for software requirements classification. The proposed model is evaluated on PROMISE corpus data set which contains a set of functional and non-functional requirements. The experimental results of the proposed CNN-BPSO model are able to provide better prediction accuracy than the CNN model.",India,Conference , IEEE 17th India Council International Conference (INDICON),Experimental Research,To propose a CNN-BPSO model for optimizing the hyperparameters of CNN in order to classify software requirements into functional and non-functional requirements.,YES,,"CNN-BPSO	","A deep learning-based classification model using Convolutional Neural Network (CNN) to classify software requirements into functional and non-functional. The Binary Particle Swarm Optimization (BPSO) is used to optimize hyperparameters for better prediction accuracy.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"i. Name of the AI technique: Convolutional Neural Network (CNN)
ii. Detailed Use of AI: CNN is used to classify software requirements into functional and non-functional categories. Hyperparameters like embedding size, filter size, and number of filters are optimized using Binary Particle Swarm Optimization (BPSO) to improve accuracy.
iii. Name of AI tools used: NO",,ROMISE corpus datase,538 labeled software requirements (functional and non-functional).,"Used to train and test the CNN and CNN-BPSO models for classifying software requirements.
",,,,,,,,,,,,,,,,NO,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,NO,,NO,NO,NO,,,,,,,,,,,,,,,,,,,NO,Future Research Directions: Applying the proposed models to classify non-functional requirements into different sub-classes.
200,Gnanasekaran 2021,Using recurrent neural networks for classification of natural language-based non-functional requirements,Consensus,200,SABDM: A self-attention based bidirectional-RNN deep model for requirements classification,2022,"The success of software depends upon functional and non-functional requirements
as both requirements are equally important in software development. However,
the requirements engineering community still lacks in comprehensive understand-
ing of functional and non-functional requirements. In addition, the requirements in
software documents are expressed in natural language and also intertwined with
each other. Requirements classification is a crucial task that correctly extracts func-
tional and non-functional requirements and organizes them in specified categories.
Automated classification of software requirements leads to reduced ambiguity, mis-
understanding, and development cost. Most of the recent studies have used
machine learning and deep learning techniques for automatic classification of
requirements. However, there is one drawback of such techniques, that is, poor
generalization. To address these problems, this research work proposes self-
attention based bidirectional LSTM deep model. This automated approach has used
recurrent neural network, which handle long sequential natural language require-
ments statements and classify them into five classes such as capability, maintain-
ability, performance, security, and usability. The proposed approach train and
evaluate over pre-labeled dataset comprised of 34 industrial requirements specifi-
cations and PROMISE dataset. Over this dataset, the proposed approach yields
95% of precision, 96% of recall, 96% of F-measure, and 96% of accuracy. The pro-
posed approach can be applied to wide variety of datasets with different domain.
Furthermore, this paper applies pre-processing techniques to improve the perfor-
mance of the requirements classification model. The results of the proposed model
are compared with existing baseline state-of-art techniques, and it is shown that
the proposed model outperforms the baseline models in requirements
classification.

",India,Journal,Journal of Software Evolution and Process,Experimental Research; Empirical Study ,"To propose a self-attention-based bidirectional LSTM deep model for automated classification of software requirements into functional and non-functional categories and sub-categories, and to improve the generalization and accuracy of the classification model by employing advanced deep learning techniques and pre-processing strategies.",YES,,"SABDM (Self-attention Bidirectional RNN Deep Model)	","A deep learning model using self-attention and Bi-LSTM to classify requirements. It handles long sequential natural language requirements statements by focusing attention on key terms.	",Proposed,NO,NO,NO,NO,NO,NO,"Word2Vec, GloVe	","Used as word embedding representations to implement the technique
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"AI Technique Used: Self-Attention Mechanism with Bidirectional Long Short-Term Memory (Bi-LSTM)
Details on AI Use: The AI model, SABDM, employs self-attention mechanisms with Bi-LSTM to focus on relevant parts of requirements statements, improving classification accuracy. The attention mechanism dynamically adjusts to highlight important words while ignoring irrelevant parts, optimizing the identification of functional and non-functional requirements.
AI Tools Used: Word2Vec, GloVe (used as word embedding tools)
",,"PROMISE dataset	","625 requirements (255 FRs, 370 NFRs)	","Used to train and evaluate the model on labeled requirements
","34 Industrial Requirements Documents	","677 requirements (253 FRs, 424 NFRs)	","Used to validate the model's performance on real-world requirements
",,,,,,,,,,,,,YES,"Availability
Fault Tolerance
Legal
Look and Feel
Maintainability
Operational
Performance
Portability
Scalability
Security
Usability
",,"SABDM (Self-attention Bidirectional RNN Deep Model)	","The model classifies NFRs into various subcategories using the self-attention mechanism and Bi-LSTM.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenge: Difficulty in generalizing the model to datasets containing informal requirements such as user reviews or bug reports.
How to Address: The study suggests applying different preprocessing techniques to informal datasets or employing models trained on similar data types.
",NO,,"PROMISE dataset	","625 requirements (255 FRs, 370 NFRs)	","Used to train and evaluate the model on labeled requirements
","34 Industrial Requirements Documents	","677 requirements (253 FRs, 424 NFRs)	","Used to validate the model's performance on real-world requirements
",,,,,,,,,,,,,,,,NO,"Explore combinations of different attention layers with other deep neural networks.
Develop hybrid models for requirements classification.
Apply proposed models to practical applications.
Utilize advanced language models like XLNet.
Implement other attention mechanisms, such as masked attention or global attention, with Bi-LSTM."
197,Li 2021,NFRNet: A Deep Neural Network for Automatic Classification of Non-Functional Requirements,Consensus,197,NFRNet: A Deep Neural Network for Automatic Classification of Non-Functional Requirements,2021,"Non-functional requirements specify those qualities that software products must have in order to meet the user’s business requirements. The elicitation of these non-functional requirements requires expertise, experience, and domain knowledge, which is challenging and time-consuming for requirements engineers and developers. It would be very beneficial if the non-functional requirements can be automatically extracted from the requirements documentation to reduce human efforts, time, and avoid mental fatigue. In this paper, we present a novel deep neural network model called NFRNet to automatically extract non-functional requirements from software requirements documentation.

",China,Conference ,2021 IEEE 29th International Requirements Engineering Conference (RE),Experimental Research,to develop a novel deep neural network model called NFRNet to automatically classify non-functional requirements from software requirements documentation.,NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Reliability
Performance
Security
Usability
Maintainability",,NFRNet,"Deep neural network model utilizing BERT word embeddings and Bi-LSTM classification for NFR classification.	",Proposed,"     Ameller, D., Ayala, C., Cabot, J., & Franch, X. (2012). ""How do software architects consider non-functional requirements: An exploratory study"". 2021 IEEE 29th International Requirements Engineering Conference (RE). IEEE.	",NFRNet,"Automatic extraction and classification of non-functional requirements; Developed and validated.	
",Developed ,Proposed ,"Hinton, G. E., Srivastava, N., Krizhevsky, A., Sutskever, I., & Salakhutdinov, R. R. (2012). ""Improving neural networks by preventing co-adaptation of feature detectors"". arXiv preprint arXiv:1207.0580.	",NO,NO,"N-gram Masking-based BERT Word Embeddings Model	","Modifies the original BERT masking method using N-gram to consider different combinations of characters.	",Referenced,"Hinton, G. E., Srivastava, N., Krizhevsky, A., Sutskever, I., & Salakhutdinov, R. R. (2012). ""Improving neural networks by preventing co-adaptation of feature detectors"". arXiv preprint arXiv:1207.0580.	","NFRNet	","Part of the NFRNet architecture; Helps in learning contextual representation of requirement descriptions.	",Developed ,Proposed,"Hinton, G. E., Srivastava, N., Krizhevsky, A., Sutskever, I., & Salakhutdinov, R. R. (2012). ""Improving neural networks by preventing co-adaptation of feature detectors"". arXiv preprint arXiv:1207.0580.	",NO,NO,"Bi-LSTM Classification Network	","A Recurrent Neural Network model using forward and backward LSTM networks to improve semantic extraction.	",Proposed,"Baker, C., Deng, L., Chakraborty, S., & Dehlinger, J. (2019). ""Automatic multi-class non-functional software requirements classification using neural networks"". 2019 IEEE 43rd Annual Computer Software and Applications Conference (COMPSAC).	",NFRNet,"Enhances the understanding of textual context by capturing both past and future semantic information.	",Developed ,Proposed,NO,NO,NO,"Multi-Sample Dropout Regularization Technique	","Enhanced version of traditional dropout, selecting multiple dropout samples for improved model generalization.	",Referenced,"Hinton, G. E., Srivastava, N., Krizhevsky, A., Sutskever, I., & Salakhutdinov, R. R. (2012). ""Improving neural networks by preventing co-adaptation of feature detectors"". arXiv preprint arXiv:1207.0580.	",NFRNet,"Reduces the training iterations and error rates in neural networks by combining losses from multiple samples.	",Developed ,Proposed,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,"Challenges: The ambiguity and vagueness in natural language descriptions of non-functional requirements; varying interpretations by people from different backgrounds and the complexity of large-scale requirements documentation.
Addressing Challenges: Using advanced deep learning techniques like NFRNet that incorporate contextual understanding through models like BERT and Bi-LSTM.",NO,,PROMISE dataset,"expanded from 11 to 32 categories and 255 to 6222 statements.
","Used for training and validating the NFRNet model with cross-validation techniques.
",,,,,,,,,,,,,,,,,,,NO, To expand the categories of NFRs in the SOFTWARE NFR dataset and integrate other deep learning feature extraction techniques to enhance classification accuracy.
195,Hidayat 2021,NFR Classification using Keyword Extraction and CNN on App Reviews,Consensus,195, NFR Classification using Keyword Extraction and CNN on App Reviews.,2021,"Documentation and fulfillment of software requirement are important aspects in measuring the success of a team in developing software. In the field of requirement engineering, there are two types of requirements namely functional requirements (FR) and non-functional requirements (NFR). Nowadays, requirements may also be found in app reviews, so this study conducted to classify non-functional requirements collected from app reviews. We classify keywords into 2 categories, namely project-specific (PS) and non-project specific (NPS) and we propose an automatic method to extract them from app reviews and app description. We classify app reviews plus keyword extracted using convolutional neural network (CNN) and word2vec vectorization into several category of NFRs. Our proposed method managed to extract several keywords and improve the performance of the classification algorithm used. Our proposed method has an average accuracy of 80%, precision of 71%, and recall of 63%. The result show that our proposed method performed better than basic CNN and any classification algorithm.",Indonesia,Conference ,2021 4th International Seminar on Research of Information Technology and Intelligent Systems (ISRITI),Experimental Research; Empirical Study ,"to propose an automatic method to classify non-functional requirements (NFR) collected from app reviews using keyword extraction and convolutional neural networks (CNN).
",NO,,NO,NO,NO,NO, NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Usability
Dependability
Supportability
Performance",,"Keyword Extraction and CNN	","Uses keyword extraction and CNN for classifying app reviews into NFR sub-categories	",Proposed,"Li, C., Huang, L., Ge, J., Luo, B., & Ng, V. (2018). Automatically classifying user requests in crowdsourcing requirements engineering. Journal of Systems and Software, 138, 108–123. https://doi.org/10.1016/j.jss.2017.12.028
Jha, N., & Mahmoud, A. (2019). Mining non-functional requirements from App store reviews. Empirical Software Engineering, 24(6).",NO,NO,NO,NO,NO,Word2Vec,"Word2Vec is used for word embedding, which supports the CNN classification process.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"(i) Challenge: Keywords extracted often exist in multiple NFR categories, causing ambiguity in classification.
(ii) Addressing the Challenge: The study differentiates keywords into project-specific (PS) and non-project specific (NPS) to improve classification accuracy by ensuring that keywords more closely relate to specific NFR labels.",NO,, App reviews from App Store," The dataset contains 6,000 app reviews labeled with NFR categories like Usability, Dependability, Supportability, and Performance. "," Reviews labeled with Usability, Dependability, Supportability, and Performance are processed using CNN to classify them into specific NFR sub-categories.",,,,,,,,,,,,,,,,,,,NO,"Development of an automatic prediction method for determining whether user reviews contain requirement statements.
Hyperparameter optimization for the CNN model to improve classification results."
192,Sabir 2021,A Deep Learning-Based Framework for the Classification of Non-functional Requirements,Consensus,192,A Deep Learning-Based Framework for the Classification of Non-functional Requirements.,2021,"This study presents a framework that leverages deep learning techniques to classify non-functional requirements (NFRs) into five classes: reliability, usability, efficiency, maintainability, and portability. The study investigates four neural network models (ANN, CNN, LSTM, and GRU) and proposes a novel text augmentation technique to address data sparsity. The proposed framework enhances NFR classification with fine-tuned word embeddings and demonstrates significant improvements in classification accuracy using convolutional neural networks.",UK,Conference ,"Published in ""WorldCIST 2021, AISC 1366""",Experimental Research; Empirical Study ; Design Science Research; Quantitative Research,"To design and develop an automatic system to classify Non-functional Requirements (NFRs) into multiple classes using deep learning techniques.
",NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,#NAME?,,"Deep Learning-Based Framework using Artificial Neural Network (ANN), Convolutional Neural Network (CNN), Long Short-Term Memory (LSTM), Gated Recurrent Unit (GRU)
","The study uses a deep learning-based framework to classify NFRs into five sub-categories (reliability, usability, efficiency, maintainability, and portability). It employs four neural network models (ANN, CNN, LSTM, GRU) and introduces a novel text augmentation approach to expand the dataset by concatenating sentences from the same class.
","Proposed
","M. Sabir, E. Banissi, M. Child, ""A Deep Learning-Based Framework for the Classification of Non-functional Requirements"", WorldCIST 2021, AISC 1366, Springer Nature Switzerland AG 2021.
",NO,NO,NO,NO,NO,"Word2Vec, Python, TensorFlow","Word2Vec embeddings are fine-tuned for the deep learning models to enhance the semantic representation of the text data; Python and TensorFlow are used as programming environments to implement the deep learning models.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenges:
Data Sparsity: Limited availability of labeled data for training deep learning models.
How Addressed: Proposed a novel text augmentation technique to artificially increase data size without altering the underlying domain-specific knowledge.
Model Overfitting: Risk of overfitting due to small datasets and complex models.
How Addressed: Used techniques like early stopping, fine-tuning of embeddings, and cross-validation.",NO,,"NFRs Corpus	","A dataset comprising 1484 sentences extracted from Software Requirements Specifications (SRS) documents, classified into five NFR categories.	","Used for training and validation of the neural network models; data augmentation techniques were applied to expand the dataset and improve model performance.
",,,,,,,,,,,,,,,,,,,NO,"Investigating the effectiveness of the proposed augmentation technique with different corpora to generalize its applicability.
Addressing the class imbalance problem more efficiently.
Exploring transfer learning approaches for further improving classification performance on small datasets.
"
191,Khan 2023,Non Functional Requirements Identification and Classification Using Transfer Learning Model,Consensus,191,Non Functional Requirements Identification and Classification Using Transfer Learning Model.,2023,"The research addresses the task of identifying and classifying non-functional requirements (NFRs) in software development. The proposed approach uses transfer learning methods to automate NFR identification and classification, aiming to reduce development time and resource consumption. Multiple state-of-the-art transfer learning models, including XLNet, BERT, Distil BERT, Distil Roberta, Electra-base, and Electra-small, are evaluated. Among these, XLNet demonstrates exceptional performance, achieving high values for Accuracy, Precision, Recall, and F1 Score, thus highlighting its potential to automate NFR identification and classification.
","Pakistan
Saudi Arabia
Australia",Journal,"IEEE Access
",Experimental Research; Empirical Study ,"To improve the identification and classification of non-functional requirements (NFRs) in software development using transfer learning models, particularly XLNet, and to automate the process to enhance software development efficiency​",NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Security
Reliability
Scalability
Usability
Performance
Design Aspects
Operational Aspects",,"XLNet Transfer Learning Model	","Uses transfer learning methods, specifically XLNet, to classify non-functional requirements based on software quality attributes	",Proposed,NO,XLNet,"Classification of NFRs based on software quality attributes; developed and validated	",Developed,Proposed,NO,Word2Vec,"Used for representing text as multi-dimensional matrices for the transfer learning model
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"The study mentions challenges related to the small dataset size used for training and testing, which may affect the generalization of results to other datasets and contexts. Future work suggests incorporating a larger and more diverse dataset and exploring ensemble methods and other transfer learning strategies to enhance the performance of NFR identification and classification","Type of Nonfunctional Requirement: Multiple types including security, reliability, etc.

Details of Case Study: Case study focused on improving user experience in mobile banking applications. The implementation of XLNet-based NFR classification resulted in significant improvements in app stability, response times, and overall user satisfaction​(15).

Type of Case Study: Empirical study.
",,NO,Approximately 1445 records consisting of different requirements and their corresponding class names. The dataset was divided into a training set (80%) and a test set (20%) to evaluate the model's performance,Used for training and evaluating the transfer learning models to classify NFRs.,,,,,,,,,,,,,,,,,,,NO,"Future research should focus on incorporating more diverse datasets, improving dataset quality, and employing additional data sources and techniques like user feedback and natural language processing to improve accuracy and model generalizatio"
190,Jha 2019,Mining non-functional requirements from App store reviews,Consensus,190,Mining non-functional requirements from App store reviews,2019,"User reviews obtained from mobile application (app) stores contain technical feedback that
can be useful for app developers. Recent research has been focused on mining and catego-
rizing such feedback into actionable software maintenance requests, such as bug reports and
functional feature requests. However, little attention has been paid to extracting and synthe-
sizing the Non-Functional Requirements (NFRs) expressed in these reviews. NFRs describe
a set of high-level quality constraints that a software system should exhibit (e.g., security,
performance, usability, and dependability). Meeting these requirements is a key factor for
achieving user satisfaction, and ultimately, surviving in the app market. To bridge this gap, in
this paper, we present a two-phase study aimed at mining NFRs from user reviews available
on mobile app stores. In the first phase, we conduct a qualitative analysis using a dataset of
6,000 user reviews, sampled from a broad range of iOS app categories. Our results show that
40% of the reviews in our dataset signify at least one type of NFRs. The results also show
that users in different app categories tend to raise different types of NFRs. In the second
phase, we devise an optimized dictionary-based multi-label classification approach to auto-
matically capture NFRs in user reviews. Evaluating the proposed approach over a dataset
of 1,100 reviews, sampled from a set of iOS and Android apps, shows that it achieves an
average precision of 70% (range [66% - 80%]) and average recall of 86% (range [69% -
98%]).
",USA,Journal,Empirical Software Engineering,Empirical Study ; Qualitative Research; Other: Automated Classification ,"The study aims to mine non-functional requirements (NFRs) from user reviews in mobile app stores, classify these NFRs into different categories, and assess the effectiveness of an automated dictionary-based approach for this purpose.",NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Usability
Dependability
Performance
Supportability",,"Dictionary-Based Multi-Label Classification	","Uses specific indicator terms for classifying NFRs into sub-categories	",Proposed,"Jha N, Mahmoud A (2018) Using frame semantics for classifying and summarizing application store reviews. Empir Softw Eng 23(6):3734–3767	","MARC - Mobile Application Review Classifier	","Download reviews, classify and summarize them, identify main NFRs	",Developed,Proposed,"Jha and Mahmoud (2017b)	",NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Low precision in longer reviews due to the reliance on single indicator terms for classification.
Difficulty in identifying generic indicator terms for certain NFR categories like Dependability when they are implicit in user expressions.","Type: NFR Classification
Details: Manual classification and automated classification approaches used on datasets.
Type of Case Study: Empirical Evaluation
",,"iOS and Android App Reviews	","6,000 reviews for qualitative analysis; 1,100 reviews for automated classification	","Used for both manual and automated classification approaches to identify NFRs and their sub-categories.
",,,,,,,,,,,,,,,,,,,"Context: Presentation in the form of indicator terms and dictionary-based classification.
Proposal: Combining dictionary-based approach with other language patterns for improved accuracy.","Integration of NFR information into the design and development process of mobile apps.
Study of the impact of NFRs on app quality, success, and market performance (e.g., ratings, downloads, and revenue).
Combining dictionary-based approaches with other language models for higher accuracy."
189,Rahman 2023,Hybrid Deep Learning Approach for Nonfunctional Software Requirements Classifications,Consensus,189,"Hybrid Deep Learning Approach for Nonfunctional Software Requirements Classifications.

",2023,"This paper explores the concept of algorithmic hybridization, which involves combining various machine learning (ML) algorithms to enhance performance by utilizing the benefits of both simultaneously. This study presents a framework that utilizes a combination of long short-term memory (LSTM) and bidirectional LSTM (BiLSTM) with artificial neural networks (ANN) to classify non-functional requirements (NFR). The task of NFR classification is challenging due to the scarcity of supervised learning data. The effectiveness of the proposed approach was assessed by comparing the performance of our integrated model with that of single LSTM and BiLSTM models. To conduct this evaluation, we combined two datasets consisting of 1000 non-functional requirements (NFR). The experimental findings revealed that the proposed approach is effective as the hybrid models exhibited better precision, recall, and F-1 score compared to its counterparts.","Pakistan,South Korea ",Conference ,"2023 International Conference on Communication, Computing and Digital Systems (C-CODE)",Experimental Research,"To propose a hybrid deep learning approach using LSTM, BiLSTM, and ANN models for the classification of non-functional requirements in software engineering.",NO,,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,,NO,NO,NO,,,,,,,,,,,,,,,,YES,"Security
Usability
Operability
Maintainability
Performance
",,"LSTM-ANN	","Integrated LSTM with ANN for NFR classification, leveraging word2vec for feature extraction.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,"BiLSTM-ANN	","Integrated BiLSTM with ANN for NFR classification, utilizing word2vec for vectorization and model performance.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,NO,NO,,"PROMISE exp21
",Both datasets consist of fourteen types of non-functional requirements (NFRs) but only five categories were used due to the small number of samples for nine of the requirements.,NO,"PROMIS-NFR
",Both datasets consist of fourteen types of non-functional requirements (NFRs) but only five categories were used due to the small number of samples for nine of the requirements.,NO,,,,,,,,,,,,,,,,NO,NO
186,Haque 2019,Non-Functional Requirements Classification with Feature Extraction and Machine Learning: An Empirical Study,Consensus,186,Non-Functional Requirements Classification with Feature Extraction and Machine Learning: An Empirical Study,2019,"Non-Functional Requirements (NFR) describe a set of quality attributes required for software such as security, reliability, performance, etc. Extracting and considering NFR from software requirement specification can help developers deliver quality software that meets users' expectations completely. Since the functional and non-functional requirements are mixed together within the same SRS, it requires a lot of human effort to distinguish them. This paper proposed an automatic NFR classification approach for quality software development by combining machine learning feature extraction and classification techniques. An empirical study with seven machine learning algorithms and four feature selection approaches has been applied to automatically classify NFR for finding out the best pair. The experiments were measured with statistical analysis, including precision, recall, F1-score, and accuracy of the classification results through all the combinations of the techniques and algorithms. It is found that the SGD SVM classifier achieves the best results, where precision, recall, F1-score, and accuracy are reported as 0.66, 0.61, 0.61, and 0.76, respectively. Additionally, the TF-IDF (character level) feature extraction technique illustrated a higher average score than others.",Bangladesh,Conference ,"1st International Conference on Advances in Science, Engineering and Robotics Technology 2019 (ICASERT 2019)",Experimental Research; Empirical Study ,"To propose and empirically evaluate an automatic classification technique for Non-Functional Requirements (NFR) using various combinations of feature extraction methods and machine learning algorithms to identify the best-performing pair.
",YES,,"SGD SVM	","Stochastic Gradient Descent Support Vector Machine (SGD SVM) was used to classify functional and non-functional requirements. The study detailed that this method involved combining different feature extraction techniques with SGD SVM to optimize classification accuracy.	",Proposed,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Technique: The study uses various machine learning algorithms, including Multinomial Naive Bayes (MNB), Gaussian Naive Bayes (GNB), Bernoulli Naive Bayes (BNB), K-Nearest Neighbors (KNN), Support Vector Machines (SVM), Stochastic Gradient Descent SVM (SGD SVM), and Decision Trees (Dtree).
Usage: These algorithms are applied to classify requirements as either functional or non-functional based on feature extraction methods like TF-IDF and BoW.
AI Tools: The study does not mention specific AI tools by name, but the machine learning algorithms are part of the overall classification framework.",,"PROMISE dataset	","255 Functional Requirements (FR), 370 Non-Functional Requirements (NFR)	","Used to train and test various machine learning algorithms to classify requirements into FR and NFR.
",,,,,,,,,,,,,,,,YES,"Availability
Legal
Look and Feel
Maintainability
Operational
Performance
Scalability
Security
Usability
Fault Tolerance
Portability",,"TF-IDF (Character Level) with SGD SVM	","The study employed the TF-IDF (character level) feature extraction technique combined with the SGD SVM algorithm to classify NFRs into sub-categories such as performance, security, usability, etc.	",Proposed ,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Challenges: The study highlights the challenge of imbalanced datasets, where certain subcategories of NFRs are underrepresented, leading to lower classification accuracy.
Addressing the challenge: The study suggests the need for more balanced datasets and possibly new techniques to improve classification accuracy.",NO,,"PROMISE dataset	","370 Non-Functional Requirements (NFR)	","Used to train and test machine learning algorithms to classify NFRs into sub-categories.
",,,,,,,,,,,,,,,,,,,NO,"The study suggests incorporating other significant machine learning feature extraction techniques, such as Chi-Squared, and exploring additional classification algorithms like bagging and boosting to improve NFR classification.
It also indicates the need for further research on addressing the challenges posed by imbalanced datasets.
"
185,Lopez-Hernandez 2021,Automatic Classification of Software Requirements using Artificial Neural Networks: A Systematic Literature Review,Consensus,185,Automatic Classification of Software Requirements using Artificial Neural Networks: A Systematic Literature Review,2021,"Software requirements classification is a human-intensive task performed during the requirements analysis phase in software development. This literature review analyzes the state-of-the-art of the classification of software requirements using Artificial Neural Networks. Fourteen articles were selected to conduct the review. Sixteen different techniques to classify requirements were identified where, besides artificial neural networks, the most popular are Naive Bayes and the Support Vector Machine. Among the reported Artificial Neural Networks, we identify Convolutional Neural Networks and a Shallow Neural Network. We also found seven approaches that classify functional and non-functional requirements, six that classify only non-functional requirements, and one of them that classifies only functional requirements. The most used metrics to express classification results were accuracy, recall, and F-score. Finally, the results of the classifiers are gathered and reported.",Mexico,Conference ,2021 9th International Conference in Software Engineering Research and Innovation (CONISOFT),Systematic Review; Literature Review,"To analyze the state-of-the-art in the classification of software requirements using Artificial Neural Networks, identifying the most popular techniques and their applications in the domain.",YES,,"Convolutional Neural Network (CNN)	","Utilizes layers of neurons for pattern recognition in NFR classification	",Referenced,"Winkler, J., & Vogelsang, A. (2017). Automatic classification of requirements based on convolutional neural networks. In Proceedings - 2016 IEEE 24th International Requirements Engineering Conference Workshops, REW 2016 (pp. 39–45).	",NO,NO,NO,NO,NO,"TensorFlow, Keras	","External tool used for implementation
","Shallow Neural Network (SNN)	","Neural network with fewer layers, used for simpler pattern recognition tasks	",Referenced,"Winkler, J., & Vogelsang, A. (2017). ibid.	",NO,NO,NO,NO,NO,NO,NO,"Naive Bayes (NB)	","A simple probabilistic classifier based on Bayes' theorem with strong independence assumptions	",Referenced,"Jindal, R., Malhotra, R., & Jain, A. (2016). Automated classification of security requirements. In 2016 International Conference on Advances in Computing, Communications and Informatics (ICACCI) (pp. 2027–2033).	",NO,NO,NO,NO,NO,NO,NO,"Support Vector Machine (SVM)	","A supervised learning model for classification by finding the optimal hyperplane that separates data	",Referenced,"Kurtanovic, Z., & Maalej, W. (2017). Automatically Classifying Functional and Non-functional Requirements Using Supervised Machine Learning. In Proceedings - 2017 IEEE 25th International Requirements Engineering Conference, RE 2017 (pp. 490–495).	",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,,,"PROMISE	","625 Requirements written in natural language	","To classify FR and NFR, commonly used in studies [SS01], [SS06], [SS09], [SS10], [SS12], [SS14]
","DOORS	","Real Project Dataset	","Used for practical classification scenarios
","Quality Attributes	","Department of Homeland Security Data	","To classify NFR sub-categories
","SecReq	","Department of Homeland Security Data	","Focused on security requirements
","Custom Dataset [SS05]	","Real Project Data	","Specific to study use cases
",,,,YES,"Availability
Fault tolerance
Legal
Look and feel
Maintainability
Operational
Performance
Scalability
Security
Usability",,"Convolutional Neural Network (CNN)	","Uses multiple layers for recognizing complex patterns in sub-categories of NFR	",Referenced,"Winkler, J., & Vogelsang, A. (2017). Automatic classification of requirements based on convolutional neural networks. In Proceedings - 2016 IEEE 24th International Requirements Engineering Conference Workshops, REW 2016 (pp. 39–45).
",NO,NO,NO,NO,NO,NO,NO,"Shallow Neural Network (SNN)	","Utilizes fewer layers for simpler classification tasks	",Referenced,"Winkler, J., & Vogelsang, A. (2017). ibid.
",NO,NO,NO,NO,NO,NO,NO,"Naive Bayes (NB)	","Probabilistic classifier for NFR sub-categories	",Referenced,"Jindal, R., Malhotra, R., & Jain, A. (2016). Automated classification of security requirements. In 2016 International Conference on Advances in Computing, Communications and Informatics (ICACCI) (pp. 2027–2033).
",NO,NO,NO,NO,NO,NO,NO,"Support Vector Machine (SVM)	","Classifies NFR sub-categories by separating data with an optimal hyperplane	",Referenced,"Kurtanovic, Z., & Maalej, W. (2017). Automatically Classifying Functional and Non-functional Requirements Using Supervised Machine Learning. In Proceedings - 2017 IEEE 25th International Requirements Engineering Conference, RE 2017 (pp. 490–495).
",NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,,,,,,,,,,,,,"Challenges:
Imbalanced Classes: The studies identified a problem with imbalanced classes in the datasets used, which could impact the performance of classification techniques.
Lack of Uniformity in Experimental Design: Differences in experimental designs, such as preprocessing and the types of labels used, made it difficult to compare results across studies.
Solutions:
Combining Datasets: To address imbalanced classes, authors joined different datasets or excluded imbalanced classes.
Preprocessing Techniques: Further preprocessing techniques such as feature selection were applied to balance the classes and improve classification performance.
","Case Studies:
Types of Nonfunctional Requirements:
Security
Usability
Details of Case Studies:
The study reported that one case study classified security requirements and another focused on usability requirements.
Type of Case Study:
Empirical studies using real-world datasets, such as DOORS, PROMISE, and Quality Attributes datasets.",,PROMISE,"625 Requirements written in natural language	","To classify various sub-categories of NFR
",DOORS,"Real Project Dataset	","Used for practical classification scenarios
","Quality Attributes	","Department of Homeland Security Data	","To classify specific NFR sub-categories like Security
",SecReq,"Department of Homeland Security Data	","Focused on security requirements classification
",,,,,,,,,,NO,"Exploration of Additional Artificial Neural Network Variants: The study suggests exploring other types of artificial neural networks beyond Convolutional Neural Networks (CNN) and Shallow Neural Networks for requirements classification.
Uniform Experimental Design: The need for more standardized experimental designs to allow comparisons between different studies.
Improvements in Data Preparation and Labeling: Future research should address better data preparation methods and consistent labeling schemes to enhance the classification process."
